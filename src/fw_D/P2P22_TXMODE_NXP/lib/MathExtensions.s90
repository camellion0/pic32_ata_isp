
    
#include "macros.m90"


;-------------------------------------------------------------
; L_DIV_MEX_L03
; 'unsigned long' and 'signed long' division
; On call: PL = dividend (i.e. number to be divided by divisor)
;          QL = divisor
; On return: PL = quotient
;
; Destroys: P0 P1 P2 P3 Q0 Q1 Q2 Q3 Z0
;
; SIZE: 36 bytes, Cycles: 55
;        
    MODULE  ?L_DIV_MEX_L03
    PUBLIC  ?UL_DIV_MEX_L03
    PUBLIC  ?SL_DIV_MEX_L03
    RSEG    CODE:CODE:NOROOT(1)

?UL_DIV_MEX_L03:
        CLT
        RJMP skipabs
    REQUIRE ?SL_DIV_MEX_L03
    RSEG    CODE:CODE:NOROOT(1)

?SL_DIV_MEX_L03:
        ABS_L   P0      ;
        ABSXT_L Q0      ;
skipabs:
        LDI     Z0,4    ; Loop counter
        DIVINIT_L P0    ; Dividend to dividend register
        SUB_L   P0,P0   ; Clear remainder
A35:
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DEC     Z0      ;
        BRNE    A35     ;
        DIVINIT_L P0    ; dividend register 
        NEGTS_L P0      ;
        RET             ;

    ENDMOD

;-------------------------------------------------------------
; L_MOD_MEX_L03
; 'unsigned long' and 'signed long' modulo
; On call: PL = dividend (i.e. number to be divided by divisor)
;          QL = divisor
; On return: PL = reminder
;
; Destroys: P0 P1 P2 P3 Q0 Q1 Q2 Q3 Z0
;
; SIZE: 34 bytes, Cycles: 54
;        
    MODULE  ?L_MOD_MEX_L03
    PUBLIC  ?UL_MOD_MEX_L03
    PUBLIC  ?SL_MOD_MEX_L03
    RSEG    CODE:CODE:NOROOT(1)

?UL_MOD_MEX_L03:
        CLT
        RJMP skipabs
    REQUIRE ?SL_MOD_MEX_L03
    RSEG    CODE:CODE:NOROOT(1)

?SL_MOD_MEX_L03:
        ABS_L   Q0      ;
        ABS_L   P0      ;
skipabs:
        LDI     Z0,4    ; Loop counter
        DIVINIT_L P0    ; Dividend to dividend register
        SUB_L   P0,P0   ; Clear remainder
B35:
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DIV_L   P0,Q0   ;
        DEC     Z0      ;
        BRNE    B35     ;
        NEGTS_L P0      ;
        RET             ;

    ENDMOD

    MODULE ?LL_DIV_MEX_L12
    PUBLIC ?ULL_DIV_MEX_L12
    PUBLIC ?SLL_DIV_MEX_L12
    RSEG    CODE:CODE:NOROOT(1)

?ULL_DIV_MEX_L12:
        CLT
        RJMP skipabs
    REQUIRE ?SLL_DIV_MEX_L12
    RSEG    CODE:CODE:NOROOT(1)

?SLL_DIV_MEX_L12:       ; P64 / T64 = q=P64 + rest=R8_64
        ABS_LL   P0     ; R16,R17,R18,R19,R20,R21,R22,R23
        ABSXT_LL T0     ; R0,R1,R2,R3,R4,R5,R6,R7
skipabs:
        SUB_L   R8,R8   ; R8,R9,R10,R11
        SUB_L   R12,R12 ; R12,R13,R14,R15
        LDI     R24,4
        DIVINIT_L Q0
loop1:
        DIV_LL  R8,T0   ; R8,R9,R10,R11,R12,R13,R14,R15  R0,R1,R2,R3,R4,R5,R6,R7
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DEC     R24
        BRNE    loop1

        DIVINIT_L Q0
        
        LDI     R24,4
        DIVINIT_L P0
loop2:
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DEC     R24
        BRNE    loop2

        DIVINIT_L P0
        
        NEGTS_LL P0

        RET

    ENDMOD


    MODULE ?LL_MOD_MEX_L12
    PUBLIC ?ULL_MOD_MEX_L12
    PUBLIC ?SLL_MOD_MEX_L12
    RSEG    CODE:CODE:NOROOT(1)

?ULL_MOD_MEX_L12:
        CLT
        RJMP skipabs
    REQUIRE ?SLL_MOD_MEX_L12
    RSEG    CODE:CODE:NOROOT(1)    

?SLL_MOD_MEX_L12:       ;  P64 / T64 = q=P64 + rest=R8_64
        ABS_LL  T0      ; R0,R1,R2,R3,R4,R5,R6,R7
        ABS_LL  P0      ; R16,R17,R18,R19,R20,R21,R22,R23
skipabs:
        LDI     R24,4
        DIVINIT_L Q0        
        SUB_L   R8,R8   ; R8,R9,R10,R11
        SUB_L   R12,R12 ; R12,R13,R14,R15
loop1:
        DIV_LL  R8,T0   ; R8,R9,R10,R11,R12,R13,R14,R15  R0,R1,R2,R3,R4,R5,R6,R7
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DEC     R24
        BRNE    loop1

        LDI     R24,4
        DIVINIT_L P0
loop2:
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DIV_LL  R8,T0
        DEC     R24
        BRNE    loop2

        MOV_LL  P0,R8
        NEGTS_LL P0

        RET

        
        ENDMOD

        
        MODULE  ?LL_FLOAT_MEX_L12
        
        PUBLIC  ?SLL2D_MEX_L12
        PUBLIC  ?ULL2D_MEX_L12
        PUBLIC  ?SLL2F_MEX_L12
        PUBLIC  ?ULL2F_MEX_L12
        
        PUBLIC  ?D2SLL_MEX_L12
        PUBLIC  ?D2ULL_MEX_L12
        PUBLIC  ?F2SLL_MEX_L12
        PUBLIC  ?F2ULL_MEX_L12
                           
        EXTERN  ?D_NORMALIZE_L11
        EXTERN  ?D_UNPACK_1_L11
        EXTERN  ?D2FL_L11
        EXTERN  ?FL2D_L11

;-----------------------------------------------------
; ?SLL2D_MEX_L12  Signed long long to double conversion
; ?ULL2D_MEX_L12  Unsigned long long to double conversion,
;       uses ?SLL2D_MEX_L12
; On call, the number to be converted is in P3:P0 and Q3:Q0
; On return number is in P3:P0 and Q3:Q0
;
; Destroys: P3 P2 P1 P0 Q3 Q2 Q1 Q0 T0 Z0 Z1
;

    RSEG    CODE:CODE:NOROOT(1)

?SLL2D_MEX_L12:
    CLR     T0
    BST     Q3,7
    BLD     T0,7
    NEGTS_LL P0             ; If sign was negative, negate
A38:
    LDI     Z0,$3E          ; Initial exponent is 63 + BIAS = 63 + 1023 =$04_3E
                            ; low part is initially put in Z0
    ST      -Y,R24
B38:
    TST     Q3
    BRMI    C38             ; If MSB of long long number is Zero
    ADD_L   P0,P0           ; we shift one step and decrement exponent
    ADC_L   Q0,Q0           ;
    DEC     Z0              ; Don't have to do more than 62 shifts here
    BREQ    C38
    RJMP    B38
C38:
    LD      R24,Y+
    MOV     P0,P1
    MOV     P1,P2
    MOV     P2,P3
    MOV     P3,Q0
    MOV     Q0,Q1
    MOV     Q1,Q2
    MOV     Q2,Q3
    MOV     Q3,Z0           ; Move low part of exponent into right position
    LDI     Z0,$04          ; and set high part of exponent
    CLT                     ; Clear the sticky
    XJMP    ?D_NORMALIZE_L11
                            ; If more than 62 shifts are needed,
                            ; they will be done here

    RSEG    CODE:CODE:NOROOT(1)

?ULL2D_MEX_L12:
    CLR     T0              ; Set sign to positive
    RJMP    A38             ; Use signed-long long-to-double conversion


;-----------------------------------------------------
; ?F2SLL_MEX_L12,?F2ULL_MEX_L12 Float to long long conversions
; On call number is in P3:P0
; On return long long number is in P3:P0 and Q3:Q0
;
; Destroys: P3 P2 P1 P0 Q3 Q2 Q1 Q0 Z0 Z1 T0 T1
;

;-----------------------------------------------------
; ?D2SLL_MEX_L12,?D2ULL_MEX_L12 Double to long long conversions
; On call number is in P3:P0 and Q3:Q0
; On return long long number is in P3:P0 and Q3:Q0
;
; Destroys: P3 P2 P1 P0 Q3 Q2 Q1 Q0 Z0 Z1 T0 T1
;
        RSEG    CODE:CODE:NOROOT(1)
?F2ULL_MEX_L12:
        XCALL   ?FL2D_L11       ; Convert to double
        REQUIRE ?D2ULL_MEX_L12      ; and then to long long

        RSEG    CODE:CODE:NOROOT(1)
?D2ULL_MEX_L12:
        SBRC    Q3,7            ;If < 0, return 0
        RJMP    D2L3
        XCALL   ?D_UNPACK_1_L11
        MOV     Z1,Q3
        SUBI    Z1,$FF          ; Subtract bias
        SBCI    Z0,$03
        BRCS    D2L3            ; Branch if exponent < 0
        CLR     T1
        CPI     Z1,64
        CPC     Z0,T1
        BRCS    D2L4            ; Branch  if exponent <= 64
        TST     T0
        BRMI    D2L1            ; If exponent > 64, return
        LDI     Q3,$FF          ; $FF_FF_FF_FF_FF_FF_FF_FF
        RJMP    D2L5

        RSEG    CODE:CODE:NOROOT(1)
?F2SLL_MEX_L12:
        XCALL   ?FL2D_L11       ; Convert to double
        REQUIRE ?D2SLL_MEX_L12      ; and then to long long

        RSEG    CODE:CODE:NOROOT(1)
?D2SLL_MEX_L12:
        XCALL   ?D_UNPACK_1_L11
        MOV     Z1,Q3
        SUBI    Z1,$FF          ; Subtract bias
        SBCI    Z0,$03
        BRCS    D2L3            ; Branch if exponent < 0
        CLR     T1
        CPI     Z1,63
        CPC     Z0,T1
        BRCS    D2L4            ; Branch  if exponent <= 63
        TST     T0
        BRMI    D2L1            ; If exponent > 63, return
        LDI     Q3,$7F          ; $7F_FF_FF_FF_FF_FF_FF_FF
        REQUIRE D2L5
        RSEG    CODE:CODE:NOROOT(1)
D2L5:
        LDI     Q2,$FF          ; if sign is positive
        LDI     Q1,$FF
        LDI     Q0,$FF
        MOVW    P3:P2,Q1:Q0
        MOVW    P1:P0,Q1:Q0
        RET
        RSEG    CODE:CODE:NOROOT(1)
D2L1:
        LDI     Q3,$80          ; or $80_00_00_00_00_00_00_00
D2L2:
        CLR     Q2              ; if sign is negative
        CLR     Q1
        CLR     Q0
        SUB_L   P0,P0
        RET
D2L3:
        CLR     Q3              ; Zero is returned if exponent is too small
        RJMP    D2L2
D2L4:
        MOV     Q3,Q2
        MOV     Q2,Q1
        MOV     Q1,Q0
        MOV     Q0,P3
        MOV     P3,P2
        MOV     P2,P1
        MOV     P1,P0
        CLR     P0
        SUBI    Z1,63
        NEG     Z1
D2L6:   
        DEC     Z1
        BRMI    D2L7
        LSR_LL  P0     
        RJMP    D2L6
D2L7:        
        SBRC    T0,7
        NEG_LL  P0
        RET


;-----------------------------------------------------
; ?SLL2F_MEX_L12  Signed long long to float conversion
; ?ULL2F_MEX_L12  Unsigned long long to double conversion,
;       uses ?SLL2F_MEX_L12
; On call number to be converted is in P3:P0 and Q3:Q0
; On return number is in P3:P0
;
; Destroys: P3 P2 P1 P0 Q3 Q2 Q1 Q0 T0 Z0 Z1
;

        RSEG    CODE:CODE:NOROOT(1)

?SLL2F_MEX_L12:
        RCALL   ?SLL2D_MEX_L12      ; Simply convert to doubles first
        XJMP    ?D2FL_L11       ; and then from double to float

        RSEG    CODE:CODE:NOROOT(1)

?ULL2F_MEX_L12:
        RCALL   ?ULL2D_MEX_L12      ; Simply convert to doubles first
        XJMP    ?D2FL_L11       ; and then from double to float


        END

;----------------------------------------------------------------------------
;  
