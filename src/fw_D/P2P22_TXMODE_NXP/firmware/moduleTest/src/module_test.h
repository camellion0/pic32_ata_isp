/******************************************************************************
  Use of this software is subject to Microchip's Software License Agreement.
--------------------------------------------------------------------------------
  $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/firmware/moduleTest/src/module_test.h $
  $LastChangedRevision: 458065 $
  $LastChangedDate: 2017-05-02 04:55:50 -0600 (Tue, 02 May 2017) $
  $LastChangedBy: krishna.balan $
-------------------------------------------------------------------------------
  Project:      ATA5700
  Target MCU:   ATA5700
  Compiler:     IAR C/C++ Compiler for AVR 6.12.1
-------------------------------------------------------------------------------

******************************************************************************
* Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
*                                                                             *
* This software is owned by the Microchip Technology Incorporated.            *
* Microchip hereby grants to licensee a personal                              *
* non-exclusive, non-transferable license to copy, use, modify, create        *
* derivative works of, and compile the Microchip Source Code and derivative   *
* works for the sole and exclusive purpose of creating custom software in     *
* support of licensee product to be used only in conjunction with a Microchip *
* integrated circuit as specified in the applicable agreement. Any            *        
* reproduction, modification, translation, compilation, or representation of  *
* this software except as specified above is prohibited without the express   *
* written permission of Microchip.                                            *
*                                                                             *
* Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
* WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
* Microchip reserves the right to make changes without further notice to the  *
* materials described herein. Microchip does not assume any liability arising *
* out of the application or use of any product or circuit described herein.   *
* Microchip does not authorize its products for use as critical components in *
* life-support systems where a malfunction or failure may reasonably be       *
* expected to result in significant injury to the user. The inclusion of      *
* Microchip products in a life-support systems application implies that the   *
* manufacturer assumes all risk of such use and in doing so indemnifies       *
* Microchip against all charges.                                              *
*                                                                             *
* Use may be limited by and subject to the applicable Microchip software      *
* license agreement.                                                          *
******************************************************************************/

/** \file module_test.h
 */

#ifndef MODULE_TEST_H
#define MODULE_TEST_H

#ifdef __IAR_SYSTEMS_ICC__

/*===========================================================================*/
/*  INCLUDES                                                                 */
/*===========================================================================*/
#include "../../stdc/src/stdc.h"
#include "../../globals/src/globals.h"
#include "../../eep/src/eep.h"
#include "../../aes/src/aes.h"

/*===========================================================================*/
/*  DEFINES                                                                  */
/*===========================================================================*/
#define MODULE_TEST_BUFFER_SIZE 32U

#define MODULE_TEST_DISABLED    0x00U
#define MODULE_TEST_ID_SPI_WITH_INTERRUPTS  (MODULE_TEST_DISABLED + 1U)
#define MODULE_TEST_ID_SPI_NO_INTERRUPTS    (MODULE_TEST_ID_SPI_WITH_INTERRUPTS + 1U)
#define MODULE_TEST_ID_IIC_WITH_INTERRUPTS  (MODULE_TEST_ID_SPI_NO_INTERRUPTS + 1U)
#define MODULE_TEST_ID_IIC_NO_INTERRUPTS    (MODULE_TEST_ID_IIC_WITH_INTERRUPTS + 1U)
#define MODULE_TEST_ID_I2C_RX_ACK           (MODULE_TEST_ID_IIC_NO_INTERRUPTS + 1U)
#define MODULE_TEST_ID_I2C_RX_NACK          (MODULE_TEST_ID_I2C_RX_ACK + 1U)
#define MODULE_TEST_I2C_ERROR_CASE          (MODULE_TEST_ID_I2C_RX_NACK +1U)
#define MODULE_TEST_I2C_TX_UNKNOWN_STATUS   (MODULE_TEST_I2C_ERROR_CASE +1U)
#define MODULE_TEST_I2C_RX_UNKNOWN_STATUS   (MODULE_TEST_I2C_TX_UNKNOWN_STATUS +1U)
#define MODULE_TEST_I2C_RX_SINGLE_BYTE      (MODULE_TEST_I2C_RX_UNKNOWN_STATUS +1U) 
#define MODULE_TEST_ID_WDT                  (MODULE_TEST_I2C_RX_SINGLE_BYTE +1U)
#define MODULE_TEST_ID_EEP                  (MODULE_TEST_ID_WDT + 1U)
#define MODULE_TEST_ID_TIMER1               (MODULE_TEST_ID_EEP + 1U)
#define MODULE_TEST_ID_TIMER2               (MODULE_TEST_ID_TIMER1 + 1U)
#define MODULE_TEST_ID_TIMER3               (MODULE_TEST_ID_TIMER2 + 1U)
#define MODULE_TEST_ID_TIMER4               (MODULE_TEST_ID_TIMER3 + 1U)
#define MODULE_TEST_ID_TIMER5               (MODULE_TEST_ID_TIMER4 + 1U)
#define MODULE_TEST_ID_TIMER_FAIL           (MODULE_TEST_ID_TIMER5 + 1U)
#define MODULE_TEST_ID_AES                  (MODULE_TEST_ID_TIMER_FAIL + 1U)
#define MODULE_TEST_ID_CLK_MRC_FRC          (MODULE_TEST_ID_AES + 1U)
#define MODULE_TEST_ID_ROLL_CODE_CTR        (MODULE_TEST_ID_CLK_MRC_FRC + 1U)
#define MODULE_TEST_ID_CLK_EXT_CLOCK        (MODULE_TEST_ID_ROLL_CODE_CTR +1U)
#define MODULE_TEST_ID_LF_RSSI              (MODULE_TEST_ID_CLK_EXT_CLOCK +1U)
#define MODULE_TEST_ID_CALIB                (MODULE_TEST_ID_LF_RSSI +1U)
#define MODULE_TEST_ID_SPI_BASIC_FUNCTIONS  (MODULE_TEST_ID_CALIB +1U)
#define MODULE_TEST_ID_RFTX                 (MODULE_TEST_ID_SPI_BASIC_FUNCTIONS + 1U)
#define MODULE_TEST_ID_LFTX                 (MODULE_TEST_ID_RFTX + 1U)
#define MODULE_TEST_ID_GLOBALS              (MODULE_TEST_ID_LFTX + 1U)


/* debug error codes */
#define DEBUG_ERROR_MODULE_TEST         0x80U
#define DEBUG_ERROR_SPI_MODULE_TEST     0x80U

/* moduleTest.subId for SPI module test */
#define MODULE_TEST_ID_SPI_SUBID_NONE   0x00U

/* moduleTest.subId for I2C module test */


/* moduleTest.subId for EEP module test */
#define ATA_EEP_CLEAR_MODULE_HANDLER_PARAMETERS     0x00U
#define ATA_EEP_SINGLE_BYTE_WRITE_ACCESS            (ATA_EEP_CLEAR_MODULE_HANDLER_PARAMETERS + 1U)
#define ATA_EEP_SINGLE_BYTE_READ_ACCESS             (ATA_EEP_SINGLE_BYTE_WRITE_ACCESS + 1U)
#define ATA_EEP_MULTI_BYTE_WRITE_ACCESS             (ATA_EEP_SINGLE_BYTE_READ_ACCESS + 1U)
#define ATA_EEP_MULTI_BYTE_READ_ACCESS              (ATA_EEP_MULTI_BYTE_WRITE_ACCESS + 1U)
#define ATA_EEP_CHANGE_ACCESS_RIGHTS                (ATA_EEP_MULTI_BYTE_READ_ACCESS + 1U)

#define MAX_EEP_DATA                                (16U)

/* moduleTest.subId for Timer module test */
#define ATA_TIMER_INIT                         0x00U
#define ATA_TIMER_OPEN_C                       (ATA_TIMER_INIT + 1)
#define ATA_TIMER_CLOSE_C                      (ATA_TIMER_OPEN_C + 1)
#define ATA_TIMER_CLOSE_ASM                    (ATA_TIMER_CLOSE_C + 1)
#define ATA_TIMER_COM_INTHANDLER_ASM           (ATA_TIMER_CLOSE_ASM + 1)
#define ATA_TIMER_OVF_INTHANDLER_ASM           (ATA_TIMER_COM_INTHANDLER_ASM + 1)
#define ATA_TIMER_CAP_INTHANDLER_ASM           (ATA_TIMER_OVF_INTHANDLER_ASM + 1)
#define ATA_TIMER_1_OPEN_FAIL_C                (ATA_TIMER_CAP_INTHANDLER_ASM + 1)
#define ATA_TIMER_2_OPEN_FAIL_C                (ATA_TIMER_1_OPEN_FAIL_C + 1)
#define ATA_TIMER_3_OPEN_FAIL_C                (ATA_TIMER_2_OPEN_FAIL_C + 1)
#define ATA_TIMER_4_OPEN_FAIL_C                (ATA_TIMER_3_OPEN_FAIL_C + 1)
#define ATA_TIMER_5_OPEN_FAIL_C                (ATA_TIMER_4_OPEN_FAIL_C + 1)

/* moduleTest.subId for Clock switching test */
#define ATA_CLOCK_MRC_ON                        0x00U
#define ATA_CLOCK_FRC_ON                        (ATA_CLOCK_MRC_ON + 1)
#define ATA_CLOCK_DISABLE_VMEM_DVCC             (ATA_CLOCK_FRC_ON + 1)
#define ATA_CLOCK_ENABLE_VMEM_DVCC              (ATA_CLOCK_DISABLE_VMEM_DVCC + 1)
#define ATA_CLOCK_EXT_HIGH                      (ATA_CLOCK_ENABLE_VMEM_DVCC + 1)
#define ATA_CLOCK_EXT_LOW                       (ATA_CLOCK_EXT_HIGH + 1)
#define ATA_CLOCK_SRC_ON                        (ATA_CLOCK_EXT_LOW + 1)
#define ATA_CLOCK_XTO_ON                        (ATA_CLOCK_SRC_ON + 1)
#define ATA_CLOCK_XTO_OFF                       (ATA_CLOCK_XTO_ON + 1)

/* moduleTest.subId for AES module test */
#define ATA_AES_INIT_SECR_KEY1                  0x00U
#define ATA_AES_INIT_SECR_KEY2                  (ATA_AES_INIT_SECR_KEY1 +1U)
#define ATA_AES_ENCRYPTION                      (ATA_AES_INIT_SECR_KEY2 + 1U)
#define ATA_AES_DECRYPTION                      (ATA_AES_ENCRYPTION + 1U)
#define ATA_AES_RUN_ERROR_ENCRYPTION_INT_MODE   (ATA_AES_DECRYPTION + 1U)
#define ATA_AES_RUN_ERROR_ENCRYPTION_POLL_MODE  (ATA_AES_RUN_ERROR_ENCRYPTION_INT_MODE + 1U)
#define ATA_AES_RUN_ERROR_DECRYPTION_INT_MODE   (ATA_AES_RUN_ERROR_ENCRYPTION_POLL_MODE + 1U)
#define ATA_AES_RUN_ERROR_DECRYPTION_POLL_MODE  (ATA_AES_RUN_ERROR_DECRYPTION_INT_MODE + 1U)

/* moduleTest.subId for LF RSSI module test */
#define ATA_LFRSSI_OPEN                         0x00U
#define ATA_LFRSSI_INIT                         (ATA_LFRSSI_OPEN + 1U)
#define ATA_LFRSSI_START_INTERN                 (ATA_LFRSSI_INIT + 1U)
#define ATA_LFRSSI_START_EXTERN                 (ATA_LFRSSI_START_INTERN + 1U)
#define ATA_LFRSSI_STOP                         (ATA_LFRSSI_START_EXTERN + 1U)
#define ATA_LFRSSI_CLOSE                        (ATA_LFRSSI_STOP + 1U)
#define ATA_LFRSSI_LOG2VOLTAGE                  (ATA_LFRSSI_CLOSE + 1U)
#define ATA_LFRSSI_CHECKTIMEOUT                 (ATA_LFRSSI_LOG2VOLTAGE + 1U)
#define ATA_LFRSSI_COMPENSATE                   (ATA_LFRSSI_CHECKTIMEOUT + 1U)

/* moduleTest.subId for RFRCC module test */
#define ATA_RFRCC_TRANSMIT_RCC                  0x0U

/* moduleTest.subId for Watchdog test */
#define ATA_WATCHDOG_ENABLE                     0x00U
#define ATA_WATCHDOG_DISABLE                    (ATA_WATCHDOG_ENABLE + 1U)
#define ATA_SLEEP_ENABLE                        (ATA_WATCHDOG_DISABLE + 1U)

/* moduleTest.subId for calib test */
#define MODULE_TEST_CALIB_SUBID_NO_CAL          0x00U
#define MODULE_TEST_CALIB_SUBID_FRC_XTO4        (MODULE_TEST_CALIB_SUBID_NO_CAL + 1U)
#define MODULE_TEST_CALIB_SUBID_SRC_XTO4        (MODULE_TEST_CALIB_SUBID_FRC_XTO4 + 1U)
#define MODULE_TEST_CALIB_SUBID_FRC_EXT         (MODULE_TEST_CALIB_SUBID_SRC_XTO4 + 1U)
#define MODULE_TEST_CALIB_SUBID_SRC_EXT         (MODULE_TEST_CALIB_SUBID_FRC_EXT  + 1U)
#define MODULE_TEST_CALIB_SUBID_FRCTIMER3LOCKED (MODULE_TEST_CALIB_SUBID_SRC_EXT + 1U)
#define MODULE_TEST_CALIB_SUBID_FRCTIMER4LOCKED (MODULE_TEST_CALIB_SUBID_FRCTIMER3LOCKED + 1U)
#define MODULE_TEST_CALIB_SUBID_SRCTIMER2LOCKED (MODULE_TEST_CALIB_SUBID_FRCTIMER4LOCKED + 1U)
#define MODULE_TEST_CALIB_SUBID_SRCTIMER3LOCKED (MODULE_TEST_CALIB_SUBID_SRCTIMER2LOCKED + 1U)
#define MODULE_TEST_CALIB_SUBID_INIT_FAIL_SRC   (MODULE_TEST_CALIB_SUBID_SRCTIMER3LOCKED + 1U)
#define MODULE_TEST_CALIB_SUBID_INIT_FAIL_FRC   (MODULE_TEST_CALIB_SUBID_INIT_FAIL_SRC + 1U)
#define MODULE_TEST_CALIB_SUBID_END             (MODULE_TEST_CALIB_SUBID_INIT_FAIL_FRC + 1U)

/* moduleTest.subId for spi basic functions test */
#define MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER          0x01U
#define MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_EXCHANGE          (MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER + 1U)
#define MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER_FAIL    (MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_EXCHANGE + 1U)
#define MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_OPEN_FAIL        (MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER_FAIL + 1U)
#define MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_END               (MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_OPEN_FAIL + 1U)

/* moduleTest.subId for rftx test */
#define MODULE_TEST_RFTX_SUBID_INIT_TX      0x01U
#define MODULE_TEST_RFTX_SUBID_RFTX1        (MODULE_TEST_RFTX_SUBID_INIT_TX + 1U)
#define MODULE_TEST_RFTX_SUBID_RFTX2        (MODULE_TEST_RFTX_SUBID_RFTX1 + 1U)
#define MODULE_TEST_RFTX_SUBID_RFTX3        (MODULE_TEST_RFTX_SUBID_RFTX2 + 1U)
#define MODULE_TEST_RFTX_SUBID_VCOT1        (MODULE_TEST_RFTX_SUBID_RFTX3 + 1U)
#define MODULE_TEST_RFTX_SUBID_VCOT2        (MODULE_TEST_RFTX_SUBID_VCOT1 + 1U)
#define MODULE_TEST_RFTX_SUBID_VCOT3        (MODULE_TEST_RFTX_SUBID_VCOT2 + 1U)
#define MODULE_TEST_RFTX_SUBID_ANTTUNE1     (MODULE_TEST_RFTX_SUBID_VCOT3 + 1U)
#define MODULE_TEST_RFTX_SUBID_ANTTUNE2     (MODULE_TEST_RFTX_SUBID_ANTTUNE1 + 1U)
#define MODULE_TEST_RFTX_SUBID_ANTTUNE3     (MODULE_TEST_RFTX_SUBID_ANTTUNE2 + 1U)
#define MODULE_TEST_RFTX_SUBID_SSMWATCHDOG  (MODULE_TEST_RFTX_SUBID_ANTTUNE3 + 1U)
#define MODULE_TEST_RFTX_SUBID_CLOSE_TX     (MODULE_TEST_RFTX_SUBID_SSMWATCHDOG + 1U)
#define MODULE_TEST_RFTX_SUBID_END          (MODULE_TEST_RFTX_SUBID_CLOSE_TX + 1U)

/* moduleTest.subId for lftx test */
#define MODULE_TEST_LFTX_SUBID_INIT          0x01U

/* moduleTest.subId for globals test */
#define MODULE_TEST_GLOBALS_SUBID_DISABLE_VM        0x01U
#define MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_FRC     (MODULE_TEST_GLOBALS_SUBID_DISABLE_VM + 1U)
#define MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_XTO     (MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_FRC + 1U)
#define MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_MRC     (MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_XTO + 1U)
#define MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_SRC     (MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_MRC + 1U)
#define MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_WO_INT  (MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_SRC + 1U)
#define MODULE_TEST_GLOBALS_SUBID_END               (MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_WO_INT + 1U)

/* moduleTest.subId for IIC test */
#define MODULE_TEST_IIC_FILL_BUFFER1 0
#define MODULE_TEST_IIC_FILL_BUFFER2 MODULE_TEST_IIC_FILL_BUFFER1+1U
#define MODULE_TEST_IIC_CLR_BUFFER1 MODULE_TEST_IIC_FILL_BUFFER2+1U
#define MODULE_TEST_IIC_CLR_BUFFER2 MODULE_TEST_IIC_CLR_BUFFER1+1U
#define MODULE_TEST_IIC_SET_BUFFER1 MODULE_TEST_IIC_CLR_BUFFER2+1U
#define MODULE_TEST_IIC_SET_BUFFER2 MODULE_TEST_IIC_SET_BUFFER1+1U
#define MODULE_TEST_IIC_GET_BUFFER1 MODULE_TEST_IIC_SET_BUFFER2+1U
#define MODULE_TEST_IIC_GET_BUFFER2 MODULE_TEST_IIC_GET_BUFFER1+1U
#define MODULE_TEST_IIC_SET_DATA_0 MODULE_TEST_IIC_GET_BUFFER2+1U
#define MODULE_TEST_IIC_SET_DATA_1 MODULE_TEST_IIC_SET_DATA_0+1U
#define MODULE_TEST_IIC_SET_DATA_15 MODULE_TEST_IIC_SET_DATA_1+1U
#define MODULE_TEST_IIC_GET_DATA_0 MODULE_TEST_IIC_SET_DATA_15+1U
#define MODULE_TEST_IIC_GET_DATA_1 MODULE_TEST_IIC_GET_DATA_0+1U
#define MODULE_TEST_IIC_GET_DATA_15 MODULE_TEST_IIC_GET_DATA_1+1U
#define MODULE_TEST_IIC_SET_DATA_OUTOFBOUNDS MODULE_TEST_IIC_GET_DATA_15+1U
#define MODULE_TEST_IIC_GET_DATA_OUTOFBOUNDS MODULE_TEST_IIC_SET_DATA_OUTOFBOUNDS+1U
#define MODULE_TEST_IIC_SET_BUFFER_OUTOFBOUNDS MODULE_TEST_IIC_GET_DATA_OUTOFBOUNDS+1U
#define MODULE_TEST_IIC_GET_BUFFER_OUTOFBOUNDS MODULE_TEST_IIC_SET_BUFFER_OUTOFBOUNDS+1U
#define MODULE_TEST_IIC_RESET MODULE_TEST_IIC_GET_BUFFER_OUTOFBOUNDS+1U
#define MODULE_TEST_IIC_HW_SETUP MODULE_TEST_IIC_RESET+1U
#define MODULE_TEST_IIC_BUFFER_SETUP1 MODULE_TEST_IIC_HW_SETUP+1U
#define MODULE_TEST_IIC_BUFFER_SETUP2 MODULE_TEST_IIC_BUFFER_SETUP1+1U
#define MODULE_TEST_IIC_SET_BUFFER_ENABLEFLAG MODULE_TEST_IIC_BUFFER_SETUP2+1U
#define MODULE_TEST_IIC_OPEN MODULE_TEST_IIC_SET_BUFFER_ENABLEFLAG+1U
#define MODULE_TEST_IIC_USE_CONFIG1 MODULE_TEST_IIC_OPEN+1U
#define MODULE_TEST_IIC_USE_CONFIG2 MODULE_TEST_IIC_USE_CONFIG1+1U
#define MODULE_TEST_IIC_USE_CONFIG3 MODULE_TEST_IIC_USE_CONFIG2+1U
#define MODULE_TEST_IIC_SRAM_RESET MODULE_TEST_IIC_USE_CONFIG3+1U
#define MODULE_TEST_IIC_TRIGGER_MASTERTX MODULE_TEST_IIC_SRAM_RESET+1U
#define MODULE_TEST_IIC_ERROR_RESET1 MODULE_TEST_IIC_TRIGGER_MASTERTX+1U
#define MODULE_TEST_IIC_ERROR_RESET2 MODULE_TEST_IIC_ERROR_RESET1+1U
#define MODULE_TEST_IIC_ERROR_RESET3 MODULE_TEST_IIC_ERROR_RESET2+1U
#define MODULE_TEST_IIC_ERROR_RESET4 MODULE_TEST_IIC_ERROR_RESET3+1U
#define MODULE_TEST_IIC_ERROR_RESET5 MODULE_TEST_IIC_ERROR_RESET4+1U
#define MODULE_TEST_IIC_ERROR_RESET6 MODULE_TEST_IIC_ERROR_RESET5+1U
#define MODULE_TEST_IIC_ERROR_RESET7 MODULE_TEST_IIC_ERROR_RESET6+1U
#define MODULE_TEST_IIC_DO_MASTER_TX MODULE_TEST_IIC_ERROR_RESET7+1U
#define MODULE_TEST_IIC_TRIGGER_MASTERTX_NODATA MODULE_TEST_IIC_DO_MASTER_TX+1U
#define MODULE_TEST_IIC_RETRIGGER_MASTERTX MODULE_TEST_IIC_TRIGGER_MASTERTX_NODATA+1U
#define MODULE_TEST_IIC_TRIGGER_MASTERRX_NODATA MODULE_TEST_IIC_RETRIGGER_MASTERTX+1U
#define MODULE_TEST_IIC_TRIGGER_MASTERRX MODULE_TEST_IIC_TRIGGER_MASTERRX_NODATA+1U
#define MODULE_TEST_IIC_DO_MASTER_RX MODULE_TEST_IIC_TRIGGER_MASTERRX+1U
#define MODULE_TEST_IIC_RETRIGGER_MASTERRX MODULE_TEST_IIC_DO_MASTER_RX+1U
#define MODULE_TEST_IIC_CLR_ERROR_ENA_EA MODULE_TEST_IIC_RETRIGGER_MASTERRX+1U
#define MODULE_TEST_IIC_USE_CONFIG4 MODULE_TEST_IIC_CLR_ERROR_ENA_EA+1U
#define MODULE_TEST_IIC_SETDATATX_LEN MODULE_TEST_IIC_USE_CONFIG4+1U
#define MODULE_TEST_IIC_CLRDATATX_LEN MODULE_TEST_IIC_SETDATATX_LEN+1U
#define MODULE_TEST_IIC_TRIGGER_MASTERRX_BADLEN MODULE_TEST_IIC_CLRDATATX_LEN+1U
#define MODULE_TEST_IIC_DO_MASTER_TX8 MODULE_TEST_IIC_TRIGGER_MASTERRX_BADLEN+1U
#define MODULE_TEST_IIC_DO_MASTER_TX_POLL MODULE_TEST_IIC_DO_MASTER_TX8+1U
#define MODULE_TEST_IIC_POLL_I2CR MODULE_TEST_IIC_DO_MASTER_TX_POLL+1U

/*---------------------------------------------------------------------------*/
/*  TYPE DEFINITIONS                                                         */
/*---------------------------------------------------------------------------*/
typedef struct
{
    uint8_t bId;
    uint8_t bSubId;
} sModuleTest;


typedef struct
{
    eEepErrorCode eepErrorCode;
    uint16_t eepAddress;
    uint8_t eepData[MAX_EEP_DATA];
    uint8_t eepDataLength;
    uint8_t eepAccessRightValue;
    uint8_t eepAccessRightMask;
}sEepModuleTest;


typedef struct
{
    uint8_t  lfrscr;
    uint8_t  lfrsmr;
    uint8_t  calib;
    uint16_t thresLow;
    uint16_t thresHigh;
}sModuleTestLfRssi;

/** \brief <b>moduleTestFunc</b>
    ia function pointer type definition for spi module test
*/
typedef void (*moduleTestFunc)(void);

/** \brief <b>moduleTestFuncLut</b>
    is a type definition for look up table entry
*/
typedef const moduleTestFunc __flash moduleTestFuncLut;

/*---------------------------------------------------------------------------*/
/*  EXTERNAL PROTOTYPES                                                      */
/*---------------------------------------------------------------------------*/
extern sModuleTest g_sModuleTest_flash;
extern uint8_t g_bModuleTestBuffer_flash[MODULE_TEST_BUFFER_SIZE];
extern uint8_t g_bTimerModuleTestStatus_flash;

extern VOIDFUNC ATA_moduleTestInit_flash_C(void);
extern VOIDFUNC ATA_moduleTestSoftware_flash_C(void);

extern VOIDFUNC ATA_moduleTestTimerOverflowIsr_flash_ASM(void);
extern VOIDFUNC ATA_moduleTestTimerCompareIsr_flash_ASM(void);
extern VOIDFUNC ATA_moduleTestTimerCaptureIsr_flash_ASM(void);

extern VOIDFUNC ATA_moduleTestCalib_flash_C(void);
extern VOIDFUNC ATA_moduleTestSpi_flash_C(void);
extern VOIDFUNC ATA_moduleTestSpiBasicFunctions_flash_C(void);

extern VOIDFUNC ATA_moduleTestRfTx_flash_C(void);
extern VOIDFUNC ATA_moduleTestGlobals_flash_C(void);

#elif defined __IAR_SYSTEMS_ASM__
/*startSimExtraction*/
MODULE_TEST_BUFFER_SIZE             EQU     32

/* Module Test IDs */
MODULE_TEST_DISABLED                EQU     0x00
MODULE_TEST_ID_SPI_WITH_INTERRUPTS  EQU     MODULE_TEST_DISABLED + 1
MODULE_TEST_ID_SPI_NO_INTERRUPTS    EQU     MODULE_TEST_ID_SPI_WITH_INTERRUPTS + 1
MODULE_TEST_ID_IIC_WITH_INTERRUPTS  EQU     MODULE_TEST_ID_SPI_NO_INTERRUPTS + 1
MODULE_TEST_ID_IIC_NO_INTERRUPTS    EQU     MODULE_TEST_ID_IIC_WITH_INTERRUPTS + 1
MODULE_TEST_ID_I2C_RX_ACK           EQU     MODULE_TEST_ID_IIC_NO_INTERRUPTS + 1
MODULE_TEST_ID_I2C_RX_NACK          EQU     MODULE_TEST_ID_I2C_RX_ACK + 1
MODULE_TEST_I2C_ERROR_CASE          EQU     MODULE_TEST_ID_I2C_RX_NACK +1
MODULE_TEST_I2C_TX_UNKNOWN_STATUS   EQU     MODULE_TEST_I2C_ERROR_CASE +1
MODULE_TEST_I2C_RX_UNKNOWN_STATUS   EQU     MODULE_TEST_I2C_TX_UNKNOWN_STATUS +1
MODULE_TEST_I2C_RX_SINGLE_BYTE      EQU     MODULE_TEST_I2C_RX_UNKNOWN_STATUS +1
MODULE_TEST_ID_WDT                  EQU     MODULE_TEST_I2C_RX_SINGLE_BYTE +1
MODULE_TEST_ID_EEP                  EQU     MODULE_TEST_ID_WDT + 1
MODULE_TEST_ID_TIMER1               EQU     MODULE_TEST_ID_EEP + 1
MODULE_TEST_ID_TIMER2               EQU     MODULE_TEST_ID_TIMER1 + 1
MODULE_TEST_ID_TIMER3               EQU     MODULE_TEST_ID_TIMER2 + 1
MODULE_TEST_ID_TIMER4               EQU     MODULE_TEST_ID_TIMER3 + 1
MODULE_TEST_ID_TIMER5               EQU     MODULE_TEST_ID_TIMER4 + 1
MODULE_TEST_ID_TIMER_FAIL           EQU     MODULE_TEST_ID_TIMER5 + 1
MODULE_TEST_ID_AES                  EQU     MODULE_TEST_ID_TIMER_FAIL + 1
MODULE_TEST_ID_CLK_MRC_FRC          EQU     MODULE_TEST_ID_AES + 1
MODULE_TEST_ID_ROLL_CODE_CTR        EQU     MODULE_TEST_ID_CLK_MRC_FRC +1
MODULE_TEST_ID_CLK_EXT_CLOCK        EQU     MODULE_TEST_ID_ROLL_CODE_CTR + 1
MODULE_TEST_ID_LF_RSSI              EQU     MODULE_TEST_ID_CLK_EXT_CLOCK +1
MODULE_TEST_ID_CALIB                EQU     MODULE_TEST_ID_LF_RSSI +1
MODULE_TEST_ID_SPI_BASIC_FUNCTIONS  EQU     MODULE_TEST_ID_CALIB +1
MODULE_TEST_ID_RFTX                 EQU     MODULE_TEST_ID_SPI_BASIC_FUNCTIONS + 1
MODULE_TEST_ID_LFTX                 EQU     MODULE_TEST_ID_RFTX + 1
MODULE_TEST_ID_GLOBALS              EQU     MODULE_TEST_ID_LFTX + 1

/* moduleTest.subId for Timer module test */
ATA_TIMER_INIT                          EQU     0x00
ATA_TIMER_OPEN_C                        EQU     ATA_TIMER_INIT + 1
ATA_TIMER_CLOSE_C                       EQU     ATA_TIMER_OPEN_C + 1
ATA_TIMER_CLOSE_ASM                     EQU     ATA_TIMER_CLOSE_C + 1
ATA_TIMER_COM_INTHANDLER_ASM            EQU     ATA_TIMER_CLOSE_ASM + 1
ATA_TIMER_OVF_INTHANDLER_ASM            EQU     ATA_TIMER_COM_INTHANDLER_ASM + 1
ATA_TIMER_CAP_INTHANDLER_ASM            EQU     ATA_TIMER_OVF_INTHANDLER_ASM + 1
ATA_TIMER_1_OPEN_FAIL_C                 EQU     ATA_TIMER_CAP_INTHANDLER_ASM + 1
ATA_TIMER_2_OPEN_FAIL_C                 EQU     ATA_TIMER_1_OPEN_FAIL_C + 1
ATA_TIMER_3_OPEN_FAIL_C                 EQU     ATA_TIMER_2_OPEN_FAIL_C + 1
ATA_TIMER_4_OPEN_FAIL_C                 EQU     ATA_TIMER_3_OPEN_FAIL_C + 1
ATA_TIMER_5_OPEN_FAIL_C                 EQU     ATA_TIMER_4_OPEN_FAIL_C + 1

/* moduleTest.subId for Clock switching test */
ATA_CLOCK_MRC_ON                        EQU     0x00
ATA_CLOCK_FRC_ON                        EQU     ATA_CLOCK_MRC_ON + 1
ATA_CLOCK_DISABLE_VMEM_DVCC             EQU     ATA_CLOCK_FRC_ON + 1
ATA_CLOCK_ENABLE_VMEM_DVCC              EQU     ATA_CLOCK_DISABLE_VMEM_DVCC + 1
ATA_CLOCK_EXT_HIGH                      EQU     ATA_CLOCK_ENABLE_VMEM_DVCC + 1
ATA_CLOCK_EXT_LOW                       EQU     ATA_CLOCK_EXT_HIGH + 1
ATA_CLOCK_SRC_ON                        EQU     ATA_CLOCK_EXT_LOW + 1
ATA_CLOCK_XTO_ON                        EQU     ATA_CLOCK_SRC_ON + 1
ATA_CLOCK_XTO_OFF                       EQU     ATA_CLOCK_XTO_ON + 1

/* Test Sub IDs for Module EEP */
ATA_EEP_CLEAR_MODULE_HANDLER_PARAMETERS EQU     0x00
ATA_EEP_SINGLE_BYTE_WRITE_ACCESS        EQU     ATA_EEP_CLEAR_MODULE_HANDLER_PARAMETERS + 1
ATA_EEP_SINGLE_BYTE_READ_ACCESS         EQU     ATA_EEP_SINGLE_BYTE_WRITE_ACCESS + 1
ATA_EEP_MULTI_BYTE_WRITE_ACCESS         EQU     ATA_EEP_SINGLE_BYTE_READ_ACCESS + 1
ATA_EEP_MULTI_BYTE_READ_ACCESS          EQU     ATA_EEP_MULTI_BYTE_WRITE_ACCESS + 1
ATA_EEP_CHANGE_ACCESS_RIGHTS            EQU     ATA_EEP_MULTI_BYTE_READ_ACCESS + 1


/* moduleTest.subId for AES module test */
ATA_AES_INIT_SECR_KEY1                  EQU     0x00
ATA_AES_INIT_SECR_KEY2                  EQU     ATA_AES_INIT_SECR_KEY1 +1
ATA_AES_ENCRYPTION                      EQU     ATA_AES_INIT_SECR_KEY2 + 1
ATA_AES_DECRYPTION                      EQU     ATA_AES_ENCRYPTION + 1
ATA_AES_RUN_ERROR_ENCRYPTION_INT_MODE   EQU     ATA_AES_DECRYPTION + 1
ATA_AES_RUN_ERROR_ENCRYPTION_POLL_MODE  EQU     ATA_AES_RUN_ERROR_ENCRYPTION_INT_MODE + 1
ATA_AES_RUN_ERROR_DECRYPTION_INT_MODE   EQU     ATA_AES_RUN_ERROR_ENCRYPTION_POLL_MODE + 1
ATA_AES_RUN_ERROR_DECRYPTION_POLL_MODE  EQU     ATA_AES_RUN_ERROR_DECRYPTION_INT_MODE + 1
                                         
/* moduleTest.subId for RFRCC module test */
ATA_RFRCC_TRANSMIT_RCC                  EQU     0x0

/* moduleTest.subId for Watchdog test */
ATA_WATCHDOG_ENABLE                     EQU     0x00
ATA_WATCHDOG_DISABLE                    EQU     ATA_WATCHDOG_ENABLE + 1
ATA_SLEEP_ENABLE                        EQU     ATA_WATCHDOG_DISABLE + 1

/* moduleTest.subId for calib test */
MODULE_TEST_CALIB_SUBID_NO_CAL          EQU 0x00
MODULE_TEST_CALIB_SUBID_FRC_XTO4        EQU MODULE_TEST_CALIB_SUBID_NO_CAL + 1
MODULE_TEST_CALIB_SUBID_SRC_XTO4        EQU MODULE_TEST_CALIB_SUBID_FRC_XTO4 + 1
MODULE_TEST_CALIB_SUBID_FRC_EXT         EQU MODULE_TEST_CALIB_SUBID_SRC_XTO4 + 1
MODULE_TEST_CALIB_SUBID_SRC_EXT         EQU MODULE_TEST_CALIB_SUBID_FRC_EXT  + 1
MODULE_TEST_CALIB_SUBID_FRCTIMER3LOCKED EQU MODULE_TEST_CALIB_SUBID_SRC_EXT + 1
MODULE_TEST_CALIB_SUBID_FRCTIMER4LOCKED EQU MODULE_TEST_CALIB_SUBID_FRCTIMER3LOCKED + 1
MODULE_TEST_CALIB_SUBID_SRCTIMER2LOCKED EQU MODULE_TEST_CALIB_SUBID_FRCTIMER4LOCKED + 1
MODULE_TEST_CALIB_SUBID_SRCTIMER3LOCKED EQU MODULE_TEST_CALIB_SUBID_SRCTIMER2LOCKED + 1
MODULE_TEST_CALIB_SUBID_INIT_FAIL_SRC   EQU MODULE_TEST_CALIB_SUBID_SRCTIMER3LOCKED + 1
MODULE_TEST_CALIB_SUBID_INIT_FAIL_FRC   EQU MODULE_TEST_CALIB_SUBID_INIT_FAIL_SRC + 1
MODULE_TEST_CALIB_SUBID_END             EQU MODULE_TEST_CALIB_SUBID_INIT_FAIL_FRC + 1

/* moduleTest.subId for spi basic functions test */
MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER          EQU 0x01
MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_EXCHANGE          EQU MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER + 1
MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER_FAIL    EQU MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_EXCHANGE + 1
MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_OPEN_FAIL        EQU MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_TRANSFER_FAIL + 1
MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_END               EQU MODULE_TEST_SPI_BASIC_FUNCTIONS_SUBID_OPEN_FAIL + 1


/* moduleTest.subId for rftx test */
MODULE_TEST_RFTX_SUBID_INIT_TX      EQU 0x01
MODULE_TEST_RFTX_SUBID_RFTX1        EQU MODULE_TEST_RFTX_SUBID_INIT_TX  + 1
MODULE_TEST_RFTX_SUBID_RFTX2        EQU MODULE_TEST_RFTX_SUBID_RFTX1    + 1
MODULE_TEST_RFTX_SUBID_RFTX3        EQU MODULE_TEST_RFTX_SUBID_RFTX2    + 1
MODULE_TEST_RFTX_SUBID_VCOT1        EQU MODULE_TEST_RFTX_SUBID_RFTX3    + 1
MODULE_TEST_RFTX_SUBID_VCOT2        EQU MODULE_TEST_RFTX_SUBID_VCOT1    + 1
MODULE_TEST_RFTX_SUBID_VCOT3        EQU MODULE_TEST_RFTX_SUBID_VCOT2    + 1
MODULE_TEST_RFTX_SUBID_ANTTUNE1     EQU MODULE_TEST_RFTX_SUBID_VCOT3    + 1
MODULE_TEST_RFTX_SUBID_ANTTUNE2     EQU MODULE_TEST_RFTX_SUBID_ANTTUNE1 + 1
MODULE_TEST_RFTX_SUBID_ANTTUNE3     EQU MODULE_TEST_RFTX_SUBID_ANTTUNE2 + 1
MODULE_TEST_RFTX_SUBID_SSMWATCHDOG  EQU MODULE_TEST_RFTX_SUBID_ANTTUNE3 + 1
MODULE_TEST_RFTX_SUBID_CLOSE_TX     EQU MODULE_TEST_RFTX_SUBID_SSMWATCHDOG + 1
MODULE_TEST_RFTX_SUBID_END          EQU MODULE_TEST_RFTX_SUBID_CLOSE_TX + 1

/* moduleTest.subId for lftx test */
MODULE_TEST_LFTX_SUBID_INIT_RX      EQU 0x01

/* moduleTest.subId for globals test */
MODULE_TEST_GLOBALS_SUBID_DISABLE_VM        EQU 0x01
MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_FRC     EQU MODULE_TEST_GLOBALS_SUBID_DISABLE_VM + 1
MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_XTO     EQU MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_FRC + 1
MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_MRC     EQU MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_XTO + 1
MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_SRC     EQU MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_MRC + 1
MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_WO_INT  EQU MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_SRC + 1
MODULE_TEST_GLOBALS_SUBID_END               EQU MODULE_TEST_GLOBALS_SUBID_ENABLE_VM_WO_INT + 1

/* moduleTest.subId for IIC test */
MODULE_TEST_IIC_FILL_BUFFER1            EQU 0x00
MODULE_TEST_IIC_FILL_BUFFER2            EQU MODULE_TEST_IIC_FILL_BUFFER1+1 
MODULE_TEST_IIC_CLR_BUFFER1             EQU MODULE_TEST_IIC_FILL_BUFFER2+1 
MODULE_TEST_IIC_CLR_BUFFER2             EQU MODULE_TEST_IIC_CLR_BUFFER1+1
MODULE_TEST_IIC_SET_BUFFER1             EQU MODULE_TEST_IIC_CLR_BUFFER2+1
MODULE_TEST_IIC_SET_BUFFER2             EQU MODULE_TEST_IIC_SET_BUFFER1+1
MODULE_TEST_IIC_GET_BUFFER1             EQU MODULE_TEST_IIC_SET_BUFFER2+1
MODULE_TEST_IIC_GET_BUFFER2             EQU MODULE_TEST_IIC_GET_BUFFER1+1
MODULE_TEST_IIC_SET_DATA_0              EQU MODULE_TEST_IIC_GET_BUFFER2+1
MODULE_TEST_IIC_SET_DATA_1              EQU MODULE_TEST_IIC_SET_DATA_0+1
MODULE_TEST_IIC_SET_DATA_15             EQU MODULE_TEST_IIC_SET_DATA_1+1
MODULE_TEST_IIC_GET_DATA_0              EQU MODULE_TEST_IIC_SET_DATA_15+1
MODULE_TEST_IIC_GET_DATA_1              EQU MODULE_TEST_IIC_GET_DATA_0+1
MODULE_TEST_IIC_GET_DATA_15             EQU MODULE_TEST_IIC_GET_DATA_1+1
MODULE_TEST_IIC_SET_DATA_OUTOFBOUNDS    EQU MODULE_TEST_IIC_GET_DATA_15+1
MODULE_TEST_IIC_GET_DATA_OUTOFBOUNDS    EQU MODULE_TEST_IIC_SET_DATA_OUTOFBOUNDS+1
MODULE_TEST_IIC_SET_BUFFER_OUTOFBOUNDS  EQU MODULE_TEST_IIC_GET_DATA_OUTOFBOUNDS+1
MODULE_TEST_IIC_GET_BUFFER_OUTOFBOUNDS  EQU MODULE_TEST_IIC_SET_BUFFER_OUTOFBOUNDS+1
MODULE_TEST_IIC_RESET                   EQU MODULE_TEST_IIC_GET_BUFFER_OUTOFBOUNDS+1
MODULE_TEST_IIC_HW_SETUP                EQU MODULE_TEST_IIC_RESET+1
MODULE_TEST_IIC_BUFFER_SETUP1           EQU MODULE_TEST_IIC_HW_SETUP+1
MODULE_TEST_IIC_BUFFER_SETUP2           EQU MODULE_TEST_IIC_BUFFER_SETUP1+1
MODULE_TEST_IIC_SET_BUFFER_ENABLEFLAG   EQU MODULE_TEST_IIC_BUFFER_SETUP2+1
MODULE_TEST_IIC_OPEN                    EQU MODULE_TEST_IIC_SET_BUFFER_ENABLEFLAG+1
MODULE_TEST_IIC_USE_CONFIG1             EQU MODULE_TEST_IIC_OPEN+1
MODULE_TEST_IIC_USE_CONFIG2             EQU MODULE_TEST_IIC_USE_CONFIG1+1
MODULE_TEST_IIC_USE_CONFIG3             EQU MODULE_TEST_IIC_USE_CONFIG2+1
MODULE_TEST_IIC_SRAM_RESET              EQU MODULE_TEST_IIC_USE_CONFIG3+1
MODULE_TEST_IIC_TRIGGER_MASTERTX        EQU MODULE_TEST_IIC_SRAM_RESET+1
MODULE_TEST_IIC_ERROR_RESET1            EQU MODULE_TEST_IIC_TRIGGER_MASTERTX+1
MODULE_TEST_IIC_ERROR_RESET2            EQU MODULE_TEST_IIC_ERROR_RESET1+1
MODULE_TEST_IIC_ERROR_RESET3            EQU MODULE_TEST_IIC_ERROR_RESET2+1
MODULE_TEST_IIC_ERROR_RESET4            EQU MODULE_TEST_IIC_ERROR_RESET3+1
MODULE_TEST_IIC_ERROR_RESET5            EQU MODULE_TEST_IIC_ERROR_RESET4+1
MODULE_TEST_IIC_ERROR_RESET6            EQU MODULE_TEST_IIC_ERROR_RESET5+1
MODULE_TEST_IIC_ERROR_RESET7            EQU MODULE_TEST_IIC_ERROR_RESET6+1
MODULE_TEST_IIC_DO_MASTER_TX            EQU MODULE_TEST_IIC_ERROR_RESET7+1
MODULE_TEST_IIC_TRIGGER_MASTERTX_NODATA EQU MODULE_TEST_IIC_DO_MASTER_TX+1
MODULE_TEST_IIC_RETRIGGER_MASTERTX      EQU MODULE_TEST_IIC_TRIGGER_MASTERTX_NODATA+1
MODULE_TEST_IIC_TRIGGER_MASTERRX_NODATA EQU MODULE_TEST_IIC_RETRIGGER_MASTERTX+1
MODULE_TEST_IIC_TRIGGER_MASTERRX        EQU MODULE_TEST_IIC_TRIGGER_MASTERRX_NODATA+1
MODULE_TEST_IIC_DO_MASTER_RX            EQU MODULE_TEST_IIC_TRIGGER_MASTERRX+1
MODULE_TEST_IIC_RETRIGGER_MASTERRX      EQU MODULE_TEST_IIC_DO_MASTER_RX+1
MODULE_TEST_IIC_CLR_ERROR_ENA_EA        EQU MODULE_TEST_IIC_RETRIGGER_MASTERRX+1
MODULE_TEST_IIC_USE_CONFIG4             EQU MODULE_TEST_IIC_CLR_ERROR_ENA_EA+1
MODULE_TEST_IIC_SETDATATX_LEN           EQU MODULE_TEST_IIC_USE_CONFIG4+1
MODULE_TEST_IIC_CLRDATATX_LEN           EQU MODULE_TEST_IIC_SETDATATX_LEN+1
MODULE_TEST_IIC_TRIGGER_MASTERRX_BADLEN EQU MODULE_TEST_IIC_CLRDATATX_LEN+1
MODULE_TEST_IIC_DO_MASTER_TX8           EQU MODULE_TEST_IIC_TRIGGER_MASTERRX_BADLEN+1
MODULE_TEST_IIC_DO_MASTER_TX_POLL       EQU MODULE_TEST_IIC_DO_MASTER_TX8+1
MODULE_TEST_IIC_POLL_I2CR               EQU MODULE_TEST_IIC_DO_MASTER_TX_POLL+1

/*stopSimExtraction*/
#endif

#endif /* MODULE_TEST_H */

