///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          13/May/2020  17:03:25
// Copyright 1996-2017 IAR Systems AB.
// Network license: dvriar01.mchp-main.com (STD)
//
//    Source file  =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
//    Command line =  
//        -f C:\Users\C41045\AppData\Local\Temp\EW23BC.tmp
//        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
//        -lCN
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        -lA
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
//        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 2304 --clib -Ohz)
//    Locale       =  English_USA.1252
//    List file    =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\utils.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME utils

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC calcCRC16
        PUBLIC memory_compare
        PUBLIC memory_compare_const
        PUBLIC memory_copy
        PUBLIC memory_copy_const
        PUBLIC memory_set
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
// C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
//    1 //==============================================================================
//    2 // Function Implementation
//    3 //==============================================================================
//    4 
//    5 
//    6 /*******************************************************************************
//    7 * Copyright (c) 2013 Atmel Corporation. All rights reserved.
//    8 *
//    9 * Redistribution and use in source and binary forms, with or without
//   10 * modification, are permitted provided that the following conditions are met:
//   11 *
//   12 * 1. Redistributions of source code must retain the above copyright notice,
//   13 *    this list of conditions and the following disclaimer.
//   14 *
//   15 * 2. Redistributions in binary form must reproduce the above copyright notice,
//   16 *    this list of conditions and the following disclaimer in the documentation
//   17 *    and/or other materials provided with the distribution.
//   18 *
//   19 * 3. The name of Atmel may not be used to endorse or promote products derived
//   20 *    from this software without specific prior written permission.
//   21 *
//   22 * 4. This software may only be redistributed and used in connection with an
//   23 *    Atmel microcontroller product.
//   24 *
//   25 * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
//   26 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//   27 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
//   28 * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
//   29 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//   30 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
//   31 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//   32 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
//   33 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
//   34 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//   35 * POSSIBILITY OF SUCH DAMAGE.
//   36 *
//   37 *******************************************************************************/
//   38 /*******************************************************************************
//   39 * File Name    : (utils.c)
//   40 * Version      : (2.0)
//   41 * Device(s)    : 
//   42 * OS           : (if applicable)
//   43 * H/W Platform : (if applicable)
//   44 * Description  : (brief description of what is in the file)
//   45 *
//   46 * $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/utils.c $
//   47 * $LastChangedRevision: 443672 $
//   48 * $LastChangedDate: 2017-01-23 01:58:06 -0700 (Mon, 23 Jan 2017) $
//   49 * $LastChangedBy: krishna.balan $
//   50 *******************************************************************************/
//   51 
//   52 //==============================================================================
//   53 //  Local Include
//   54 //==============================================================================
//   55 #include "utils.h"
//   56 
//   57 //==============================================================================
//   58 //  Local defines
//   59 //==============================================================================
//   60 //! CRC generator polynomial.
//   61 #define POLYNOMIAL      0x1021 // CRC-16 CCITT standard.
//   62 #define WIDTH           (8 * 2)
//   63 #define TOPBIT          (1 << (WIDTH - 1))
//   64 //==============================================================================
//   65 // Local Macro
//   66 //==============================================================================
//   67 
//   68 //==============================================================================
//   69 // Local Types
//   70 //==============================================================================
//   71 
//   72 //==============================================================================
//   73 // Public Variables
//   74 //==============================================================================
//   75 
//   76 /**
//   77  * \brief Memory Copy
//   78  *        Copy a RAM buffer to another
//   79  *
//   80  * \param[in] lpub_dst destination buffer
//   81  * \param[in] lpub_src source buffer
//   82  * \param[in] lub_length number of bytes to copy
//   83  *
//   84  * \return void
//   85  */

        RSEG CODE:CODE:NOROOT(1)
//   86 void memory_copy(uint8_t* lpub_dst, uint8_t* lpub_src, uint8_t lub_length)
memory_copy:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function memory_copy
          CFI NoCalls
//   87 {
        RJMP    ??memory_copy_0
//   88   while (lub_length)
//   89   {
//   90     /* Copy byte by byte */
//   91     lub_length--;
??memory_copy_1:
        DEC     R20
//   92     *lpub_dst++ = *lpub_src++;
        MOVW    R31:R30, R19:R18
        LD      R21, Z+
        MOVW    R19:R18, R31:R30
        MOVW    R31:R30, R17:R16
        ST      Z+, R21
        MOVW    R17:R16, R31:R30
//   93   }
??memory_copy_0:
        TST     R20
        BRNE    ??memory_copy_1
//   94 }
        RET
          CFI EndBlock cfiBlock0
//   95 
//   96 
//   97 /**
//   98  * \brief Memory Copy const
//   99  *        Copy contetnt stored in Flash to a RAM buffer
//  100  *
//  101  * \param[in] lpub_dst destination buffer
//  102  * \param[in] lpub_src source adress in flash
//  103  * \param[in] lub_length number of bytes to copy
//  104  *
//  105  * \return void
//  106  */

        RSEG CODE:CODE:NOROOT(1)
//  107 void memory_copy_const(uint8_t* lpub_dst, const uint8_t* lpub_src, uint8_t lub_length)
memory_copy_const:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function memory_copy_const
          CFI NoCalls
//  108 {
        RJMP    ??memory_copy_const_0
//  109   while (lub_length--)
//  110   {
//  111     /* Copy byte by byte */
//  112     *lpub_dst++ = *lpub_src++;
??memory_copy_const_1:
        MOVW    R31:R30, R19:R18
        LD      R21, Z+
        MOVW    R19:R18, R31:R30
        MOVW    R31:R30, R17:R16
        ST      Z+, R21
        MOVW    R17:R16, R31:R30
//  113   }
??memory_copy_const_0:
        MOV     R21, R20
        DEC     R20
        TST     R21
        BRNE    ??memory_copy_const_1
//  114 }
        RET
          CFI EndBlock cfiBlock1
//  115 
//  116 /**
//  117  * \brief Memory Set
//  118  *        Initializa all bytes of a buffer to a desired value
//  119  *
//  120  * \param[in] lpub_dst Buffer to set
//  121  * \param[in] lub_value initialization value
//  122  * \param[in] lub_length Number of bytes to set
//  123  *
//  124  * \return void
//  125  */

        RSEG CODE:CODE:NOROOT(1)
//  126 void memory_set(uint8_t* lpub_dst, uint8_t lub_value, uint8_t lub_length)
memory_set:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function memory_set
          CFI NoCalls
//  127 {
        LDI     R21, 0
        RJMP    ??memory_set_0
//  128   while (lub_length)
//  129   {
//  130     /* Copy byte by byte */
//  131     lub_length--;
//  132     lpub_dst[lub_length] = lub_value;
??memory_set_1:
        DEC     R19
        MOVW    R31:R30, R17:R16
        ADD     R30, R19
        ADC     R31, R21
        ST      Z, R18
//  133   }
??memory_set_0:
        TST     R19
        BRNE    ??memory_set_1
//  134 }
        RET
          CFI EndBlock cfiBlock2
//  135 
//  136 
//  137 /**
//  138  * \brief Memory Compare
//  139  *        Comapre two buffers
//  140  *
//  141  * \param[in] lpub_src1  address of buffer 1
//  142  * \param[in] lpub_src2  address of buffer 2
//  143  * \param[in] lub_length number of bytes to compare
//  144  *
//  145  * \return TRUE if comapre match, FALSE otherwise
//  146  */

        RSEG CODE:CODE:NOROOT(1)
//  147 bool memory_compare(uint8_t* lpub_src1, uint8_t* lpub_src2, uint8_t lub_length)
memory_compare:
??memory_compare_0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function memory_compare
          CFI NoCalls
//  148 {
//  149   while (lub_length)
        TST     R20
        BREQ    ??memory_compare_1
//  150   {
//  151     /* Copy byte by byte */
//  152     lub_length--;
        DEC     R20
//  153     if (lpub_src1[lub_length] != lpub_src2[lub_length])
        LDI     R21, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R20
        ADC     R31, R21
        LD      R22, Z
        MOVW    R31:R30, R19:R18
        ADD     R30, R20
        ADC     R31, R21
        LD      R21, Z
        CP      R22, R21
        BREQ    ??memory_compare_0
//  154     {
//  155       return FALSE;
        RJMP    ?Subroutine1
//  156     }
//  157   }
//  158   return TRUE;
??memory_compare_1:
        RJMP    ?Subroutine0
//  159 }
          CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
        LDI     R16, 0
        RET
          CFI EndBlock cfiBlock4

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
        LDI     R16, 1
        RET
          CFI EndBlock cfiBlock5
//  160 
//  161 /**
//  162  * \brief Memory Compare const
//  163  *        Comapre a buffer to values stored in Flash
//  164  *
//  165  * \param[in] lpub_src1  address of RAM buffer
//  166  * \param[in] lpub_src2  address of Falsh data
//  167  * \param[in] lub_length number of bytes to compare
//  168  *
//  169  * \return TRUE if comapre match, FALSE otherwise
//  170  */

        RSEG CODE:CODE:NOROOT(1)
//  171 bool memory_compare_const(uint8_t* lpub_src1,
memory_compare_const:
??memory_compare_const_0:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function memory_compare_const
          CFI NoCalls
//  172                              const uint8_t* lpub_src2,                            
//  173                              uint8_t lub_length)
//  174 {
//  175   while (lub_length--)
        MOV     R21, R20
        DEC     R20
        TST     R21
        BREQ    ??memory_compare_const_1
//  176   {
//  177     /* Copy byte by byte */
//  178     if (*lpub_src1++ != (*lpub_src2++))
        MOVW    R31:R30, R17:R16
        LD      R21, Z+
        MOVW    R17:R16, R31:R30
        MOVW    R31:R30, R19:R18
        LD      R22, Z+
        MOVW    R19:R18, R31:R30
        CP      R21, R22
        BREQ    ??memory_compare_const_0
//  179     {
//  180       return FALSE;
        RJMP    ?Subroutine1
//  181     }
//  182   }
//  183   return TRUE;
??memory_compare_const_1:
        RJMP    ?Subroutine0
//  184 }
          CFI EndBlock cfiBlock6
//  185 
//  186 /**
//  187  * \brief Calculates the 16-bit CRC of the given value
//  188  *
//  189  * \param[in] data_ptr  address of the data array
//  190  * \param[in] length    number of bytes in the data array
//  191  *
//  192  * \return CRC_VALUE - 16-bit CRC value.
//  193  */

        RSEG CODE:CODE:NOROOT(1)
//  194 uint16_t calcCRC16(uint8_t const message[], uint8_t length)
calcCRC16:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function calcCRC16
          CFI NoCalls
//  195 {
//  196     uint16_t remainder = 0xFFFF;	
        LDI     R22, 255
        LDI     R23, 255
//  197     
//  198     // Perform modulo-2 division, a byte at a time.
//  199     for (uint8_t byte = 0; byte < length; ++byte)
        LDI     R20, 0
        RJMP    ??calcCRC16_0
//  200     {
//  201         // Bring the next byte into the remainder.
//  202         remainder ^= (message[byte] << (WIDTH - 8));
//  203         
//  204         // Perform modulo-2 division, a bit at a time.
//  205         for (uint8_t bit = 8; bit > 0; --bit)
//  206         {
//  207             //Try to divide the current data bit.
//  208             if (remainder & (uint16_t)TOPBIT)
//  209             {
//  210                 remainder = (remainder << 1) ^ POLYNOMIAL;
//  211             }
//  212             else
//  213             {
//  214                 remainder = (remainder << 1);
??calcCRC16_1:
        DEC     R19
        BRNE    ??calcCRC16_2
        INC     R20
??calcCRC16_0:
        CP      R20, R18
        BRCC    ??calcCRC16_3
        LDI     R21, 0
        MOVW    R31:R30, R17:R16
        ADD     R30, R20
        ADC     R31, R21
        LD      R1, Z
        EOR     R23, R1
        LDI     R19, 8
??calcCRC16_2:
        BST     R23, 7
        LSL     R22
        ROL     R23
        BRTC    ??calcCRC16_1
        LDI     R21, 33
        EOR     R22, R21
        LDI     R21, 16
        EOR     R23, R21
        RJMP    ??calcCRC16_1
//  215             }
//  216         }
//  217     }
//  218 
//  219     // The final remainder is the CRC result.
//  220     return (remainder);
??calcCRC16_3:
        MOVW    R17:R16, R23:R22
        RET
//  221 }
          CFI EndBlock cfiBlock7

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 
// 188 bytes in segment CODE
// 
// 188 bytes of CODE memory
//
//Errors: none
//Warnings: none
