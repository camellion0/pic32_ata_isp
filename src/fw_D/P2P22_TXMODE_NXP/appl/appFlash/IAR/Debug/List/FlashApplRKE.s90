///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          13/May/2020  17:03:20
// Copyright 1996-2017 IAR Systems AB.
// Network license: dvriar01.mchp-main.com (STD)
//
//    Source file  =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
//    Command line =  
//        -f C:\Users\C41045\AppData\Local\Temp\EW1110.tmp
//        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
//        -lCN
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        -lA
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
//        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 2304 --clib -Ohz)
//    Locale       =  English_USA.1252
//    List file    =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplRKE.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME FlashApplRKE

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC ATA_Flash_RKEbuttonProcessOut
        PUBWEAK _A_PCICR
        PUBWEAK _A_PCMSK1
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_SUPCR
        PUBWEAK _A_T0CR
        PUBWEAK _A_T4IMR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC bAesSecretKeySelection
        PUBLIC bUserCmd
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN ATA_globalsActivateXTO_C
        EXTERN ATA_globalsDeActivateXTO_C
        EXTERN ATA_rfTxClose_C
        EXTERN ATA_rfTxFillDFifo_C
        EXTERN ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        EXTERN ATA_rfTxInit_C
        EXTERN ATA_rfTxProcessing_C
        EXTERN ATA_rfTxStartTx_C
        EXTERN ATA_rfTxStop_C
        EXTERN ATA_rfrccGenRollCntMsg_C
        EXTERN ATA_timer4Close_C
        EXTERN gFlashApplState
        EXTERN gFlashApplVars
        EXTERN g_MsgTXbuffer
        EXTERN g_SPI_RXbuffer
        EXTERN g_sCustomerEEPromSection
        EXTERN g_sEepFlashApp_RKEPEPS
        EXTERN g_sRfTx
        EXTERN g_sRfrccComponentData
        EXTERN memset

// C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
//    1 /******************************************************************************
//    2   Use of this software is subject to Microchip's Software License Agreement.
//    3 --------------------------------------------------------------------------------
//    4   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/FlashApplRKE.c $
//    5   $LastChangedRevision: 591974 $
//    6   $LastChangedDate: 2020-03-16 09:23:12 -0600 (Mon, 16 Mar 2020) $
//    7   $LastChangedBy: grueter $
//    8 -------------------------------------------------------------------------------
//    9   Project:      ATA5700
//   10   Target MCU:   ATA5700
//   11   Compiler:     IAR C/C++ Compiler for AVR 5.51.0
//   12 -------------------------------------------------------------------------------
//   13 
//   14 ******************************************************************************
//   15 * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
//   16 *                                                                             *
//   17 * This software is owned by the Microchip Technology Incorporated.            *
//   18 * Microchip hereby grants to licensee a personal                              *
//   19 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   20 * derivative works of, and compile the Microchip Source Code and derivative   *
//   21 * works for the sole and exclusive purpose of creating custom software in     *
//   22 * support of licensee product to be used only in conjunction with a Microchip *
//   23 * integrated circuit as specified in the applicable agreement. Any            *        
//   24 * reproduction, modification, translation, compilation, or representation of  *
//   25 * this software except as specified above is prohibited without the express   *
//   26 * written permission of Microchip.                                            *
//   27 *                                                                             *
//   28 * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
//   29 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   30 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   31 * Microchip reserves the right to make changes without further notice to the  *
//   32 * materials described herein. Microchip does not assume any liability arising *
//   33 * out of the application or use of any product or circuit described herein.   *
//   34 * Microchip does not authorize its products for use as critical components in *
//   35 * life-support systems where a malfunction or failure may reasonably be       *
//   36 * expected to result in significant injury to the user. The inclusion of      *
//   37 * Microchip products in a life-support systems application implies that the   *
//   38 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   39 * Microchip against all charges.                                              *
//   40 *                                                                             *
//   41 * Use may be limited by and subject to the applicable Microchip software      *
//   42 * license agreement.                                                          *
//   43 ******************************************************************************/
//   44 
//   45 /** \file FlashApplRKE.c
//   46     this file contains an ATA5700 Flash application software
//   47 */
//   48 
//   49 /*===========================================================================*/
//   50 /*  INCLUDES                                                                 */
//   51 /*===========================================================================*/
//   52 #include <string.h>
//   53 #include "../../../firmware/init/src/init.h"

        ASEGN ABSOLUTE:DATA:NOROOT,028H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,046H
// union <unnamed> volatile __io _A_PCICR
_A_PCICR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,06dH
// union <unnamed> volatile __io _A_PCMSK1
_A_PCMSK1:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,088H
// union <unnamed> volatile __io _A_T4IMR
_A_T4IMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0ccH
// union <unnamed> volatile __io _A_SUPCR
_A_SUPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0162H
// union <unnamed> volatile __ext_io _A_T0CR
_A_T0CR:
        DS8 1
//   54 #include "../../../firmware/rftx/src/rftx.h"
//   55 #include "../../../firmware/lfrx/src/lfrx.h"
//   56 //#include "../../../firmware/rfrcc/src/rfrcc.h"
//   57 #include "../../../firmware/spi/src/ata5700_command_set.h"
//   58 
//   59 #include "../../../firmware/init/src/init_flash.h"
//   60 #include "../../../firmware/system/src/system_flash.h"
//   61 #include "../../../firmware/rftx/src/rftx.h"
//   62 #include "../../../firmware/rftx/src/rftx_flash.h"
//   63 #include "../../../firmware/timer1/src/timer1.h"
//   64 #include "../../../firmware/timer4/src/timer4_flash.h"
//   65 #include "../../../firmware/globals/src/globals.h"
//   66 
//   67 #include "../../../firmware/lfrx/src/lfrx_flash.h"
//   68 #include "../../../firmware/tp/src/tp_flash.h"
//   69 
//   70 #include "../../../firmware/extif/src/extif_flash.h"
//   71 
//   72 #include "../../../firmware/lfrssi/src/lfrssi.h"
//   73 #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
//   74 
//   75 #include "../../../firmware/calib/src/calib.h"
//   76 #include "../../../firmware/aes/src/aes.h"
//   77 
//   78 
//   79 #include "../src/FlashApplPEPS.h"
//   80 #include "../src/FlashApplLF.h" 
//   81 #include "../src/micro.h"
//   82 
//   83 #include "../src/FlashApplVars.h"
//   84 #include "../src/utils.h"
//   85 
//   86 
//   87 #include "rfrcc_flash.h"
//   88 #include "FlashApplVars.h"
//   89 #include "FlashApplMsg.h"
//   90 
//   91 /*===========================================================================*/
//   92 /*  Function Prototypes                                                      */
//   93 /*===========================================================================*/
//   94 void ATA_FlashAppMsgEncrypt(uint8_t* aesMsg, uint8_t msgLength, uint8_t bSecretKeyGroup, uint8_t bKeyId);
//   95 
//   96 /*===========================================================================*/
//   97 /*  DEFINES                                                                  */
//   98 /*===========================================================================*/
//   99 #define MSG_RX_DATA (g_MsgRXbuffer.aub_data)
//  100 
//  101 #define SPItx433 0x40
//  102 #define SPItx315 0x30
//  103 
//  104 /*===========================================================================*/
//  105 /*  Modul Globals                                                             */
//  106 /*===========================================================================*/

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//  107 eAesSecretKeySelection bAesSecretKeySelection = AES_USE_SECRET_KEY_A;
bAesSecretKeySelection:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
//  108 uint8_t bUserCmd=0xa5;
bUserCmd:
        DS8 1
        REQUIRE `?<Initializer for bUserCmd>`
//  109 extern  uint16_t g_EepRFRcc_flash;
//  110 extern uint8_t guiButton;
//  111 extern sFlashApplState gFlashApplState;
//  112 extern sFlashApplVars gFlashApplVars;
//  113 extern uint16_t wEepRfrccAddress;
//  114 
//  115 extern sCustomerEEPromSection g_sCustomerEEPromSection;
//  116 extern sEepFlashApp_AESKey g_sEepFlashApp_AESKey;
//  117 
//  118 extern RFMSG_FRAME_TS g_MsgRXbuffer;
//  119 extern RFMSG_FRAME_TS g_MsgTXbuffer;
//  120 
//  121 extern uint8_t rub_cid;
//  122 extern uint8_t rub_wuip;
//  123 extern uint8_t rub_fob_idx;
//  124 extern uint32_t rul_fob_id;
//  125 extern uint8_t rub_rf_chan;
//  126 extern uint8_t gVbat_Status;
//  127 extern sEepFlashApp_RKEPEPS g_sEepFlashApp_RKEPEPS;
//  128 extern uint8_t g_SPI_RXbuffer[10];
//  129    
//  130 /*===========================================================================*/
//  131 /*  IMPLEMENTATION                                                           */
//  132 /*===========================================================================*/
//  133 /** \brief <b>ATA_Flash_RKEsend(void)</b>
//  134     Shall configure the 3D LF receiver into LF listen mode and activate
//  135       the ID0 wake-up interrupt
//  136 
//  137     \param[in]  bLfBdrate       selects the LF baud rate
//  138                 bSense          selects the LF RX sensitivity
//  139                 pLf_Id          pointer to the LF wake-up ID
//  140                 bLf_IdLength    number of LF ID bits
//  141 
//  142     \return none
//  143 
//  144 
//  145     \Traceability None
//  146 
//  147     \image none
//  148     \n
//  149 */
//  150 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:NOROOT(1)
//  151 void ATA_Flash_RKEbuttonProcessOut (void)
ATA_Flash_RKEbuttonProcessOut:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_Flash_RKEbuttonProcessOut
//  152 {
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
//  153    uint8_t TXactvive_flag; 
//  154    uint16_t eepService;
//  155    memset(MSG_TX_DATA.rke.preamble0, 0xFF, RKE_RF_MSG_PREAMPLE_LEN);
        LDI     R20, 16
        LDI     R21, 0
        LDI     R18, 255
        LDI     R19, 0
        LDI     R16, LOW((g_MsgTXbuffer + 2))
        LDI     R17, HIGH((g_MsgTXbuffer + 2))
          CFI FunCall memset
        CALL    memset
//  156    ATA_globalsActivateXTO_C();  
          CFI FunCall ATA_globalsActivateXTO_C
        CALL    ATA_globalsActivateXTO_C
//  157    ATA_rfTxInit_C();
          CFI FunCall ATA_rfTxInit_C
        CALL    ATA_rfTxInit_C
//  158    
//  159    if ((gFlashApplState.State&BM_SPI_received_flag)==BM_SPI_received_flag){  //Process SPI requested send RF message - 1 RF message 
        LDI     R30, LOW(gFlashApplState)
        LDI     R31, (gFlashApplState) >> 8
        LDD     R16, Z+1
        SBRS    R16, 0
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_0
//  160      
//  161        bool spivalid = false;
//  162        if (g_SPI_RXbuffer[0] == SPItx433){
        LDS     R16, g_SPI_RXbuffer
        CPI     R16, 64
        BRNE    ??ATA_Flash_RKEbuttonProcessOut_1
//  163           eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
        LDI     R16, LOW((g_sCustomerEEPromSection + 110))
        LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
          CFI FunCall ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        MOVW    R25:R24, R17:R16
//  164           spivalid = true;
//  165           bit_set(LED1);
        SBI     0x08, 0x00
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_2
//  166        }
//  167        else if (g_SPI_RXbuffer[0] == SPItx315){
??ATA_Flash_RKEbuttonProcessOut_1:
        CPI     R16, 48
        BREQ    $+2+2
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_3
//  168           eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer0Ptr_l);
        LDI     R16, LOW((g_sCustomerEEPromSection + 108))
        LDI     R17, HIGH((g_sCustomerEEPromSection + 108))
          CFI FunCall ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        MOVW    R25:R24, R17:R16
//  169           spivalid = true;
//  170           bit_set(LED2);
        SBI     0x08, 0x01
//  171        }
//  172        if (spivalid == true){   
//  173     for (uint8_t index = 0; index < 13; index++)
??ATA_Flash_RKEbuttonProcessOut_2:
        LDI     R18, 0
        LDI     R16, 13
//  174             {
//  175               g_MsgTXbuffer.aub_data[(index+1)+RKE_RF_MSG_PREAMPLE_LEN] = index;
??ATA_Flash_RKEbuttonProcessOut_4:
        LDI     R31, 0
        MOV     R30, R18
        SUBI    R30, LOW((-(g_MsgTXbuffer) & 0xFFFF))
        SBCI    R31, (-(g_MsgTXbuffer) & 0xFFFF) >> 8
        STD     Z+19, R18
//  176             }          
        INC     R18
        DEC     R16
        BRNE    ??ATA_Flash_RKEbuttonProcessOut_4
//  177             g_MsgTXbuffer.aub_data[(14)+RKE_RF_MSG_PREAMPLE_LEN]=0x0D;//Force the last bayte to 0x0D 
        LDI     R16, 13
        STS     (g_MsgTXbuffer + 32), R16
//  178     ATA_rfTxInit_C();      
          CFI FunCall ATA_rfTxInit_C
        CALL    ATA_rfTxInit_C
//  179     ATA_rfTxFillDFifo_C((RKE_RFMESSAGELENGTH+2), g_MsgTXbuffer.aub_data);//Added one, CAB + Omega2 missing last byte
        LDI     R18, LOW((g_MsgTXbuffer + 2))
        LDI     R19, HIGH((g_MsgTXbuffer + 2))
        LDI     R16, 31
          CFI FunCall ATA_rfTxFillDFifo_C
        CALL    ATA_rfTxFillDFifo_C
//  180     ATA_rfTxStartTx_C( (BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|0), (uint8_t*) eepService);//
        MOVW    R19:R18, R25:R24
        LDI     R16, 72
          CFI FunCall ATA_rfTxStartTx_C
        CALL    ATA_rfTxStartTx_C
//  181     do {
//  182           ATA_rfTxProcessing_C();
??ATA_Flash_RKEbuttonProcessOut_5:
          CFI FunCall ATA_rfTxProcessing_C
        CALL    ATA_rfTxProcessing_C
//  183           
//  184         }while (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_ACTIVE);
        LDS     R16, (g_sRfTx + 2)
        SBRC    R16, 4
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_5
//  185         ATA_rfTxStop_C();
          CFI FunCall ATA_rfTxStop_C
        CALL    ATA_rfTxStop_C
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_3
//  186        }
//  187    }    
//  188    
//  189    else if ((gFlashApplState.Buttons & BM_NEWCMNDVALID)== BM_NEWCMNDVALID)  //Process SW press send RF message - 3 RF message
??ATA_Flash_RKEbuttonProcessOut_0:
        LDD     R16, Z+3
        SBRS    R16, 7
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_6
//  190    {
//  191      bit_set(LED1);
        SBI     0x08, 0x00
//  192      g_sRfrccComponentData.bFlags = RFRCC_FLAGS_RESET;
        LDI     R16, 0
        STS     g_sRfrccComponentData, R16
//  193      ATA_rfrccGenRollCntMsg_C((uint16_t)&g_sEepFlashApp_RKEPEPS.ul_rolling_code, 0x00, gFlashApplVars.RKEcommand, 0x00);  
        LDI     R20, 0
        LDS     R19, (gFlashApplVars + 1)
        LDI     R18, 0
        LDI     R16, LOW(g_sEepFlashApp_RKEPEPS)
        LDI     R17, (g_sEepFlashApp_RKEPEPS) >> 8
          CFI FunCall ATA_rfrccGenRollCntMsg_C
        CALL    ATA_rfrccGenRollCntMsg_C
//  194      for (uint8_t loopcnt=0; loopcnt<3; loopcnt++)
        LDI     R25, 0
        LDI     R24, 3
//  195        {     
//  196           for (uint8_t index = 0; index < 13; index++)
??ATA_Flash_RKEbuttonProcessOut_7:
        LDI     R18, 0
        LDI     R16, 13
//  197             {
//  198               g_MsgTXbuffer.aub_data[(index+1)+RKE_RF_MSG_PREAMPLE_LEN] = g_sRfrccComponentData.bRollCodeMsgBuffer[index];
??ATA_Flash_RKEbuttonProcessOut_8:
        MOV     R30, R18
        LDI     R31, 0
        SUBI    R30, LOW((-(g_sRfrccComponentData) & 0xFFFF))
        SBCI    R31, (-(g_sRfrccComponentData) & 0xFFFF) >> 8
        LDD     R17, Z+2
        MOV     R30, R18
        LDI     R31, 0
        SUBI    R30, LOW((-(g_MsgTXbuffer) & 0xFFFF))
        SBCI    R31, (-(g_MsgTXbuffer) & 0xFFFF) >> 8
        STD     Z+19, R17
//  199             }          
        INC     R18
        DEC     R16
        BRNE    ??ATA_Flash_RKEbuttonProcessOut_8
//  200             g_MsgTXbuffer.aub_data[(14)+RKE_RF_MSG_PREAMPLE_LEN]=0x0D;//Force the last bayte to 0x0D 
        LDI     R16, 13
        STS     (g_MsgTXbuffer + 32), R16
//  201             ATA_rfTxInit_C();      
          CFI FunCall ATA_rfTxInit_C
        CALL    ATA_rfTxInit_C
//  202             ATA_rfTxFillDFifo_C((RKE_RFMESSAGELENGTH+2), g_MsgTXbuffer.aub_data);//Added one, CAB + Omega2 missing last byte
        LDI     R18, LOW((g_MsgTXbuffer + 2))
        LDI     R19, HIGH((g_MsgTXbuffer + 2))
        LDI     R16, 31
          CFI FunCall ATA_rfTxFillDFifo_C
        CALL    ATA_rfTxFillDFifo_C
//  203             uint16_t eepService1 = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
        LDI     R16, LOW((g_sCustomerEEPromSection + 110))
        LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
          CFI FunCall ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        MOVW    R19:R18, R17:R16
//  204             ATA_rfTxStartTx_C( (BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|loopcnt), (uint8_t*) eepService1);//Need variable name for      
        MOV     R16, R25
        ORI     R16, 0x48
          CFI FunCall ATA_rfTxStartTx_C
        CALL    ATA_rfTxStartTx_C
//  205             do {
//  206             ATA_rfTxProcessing_C();          
??ATA_Flash_RKEbuttonProcessOut_9:
          CFI FunCall ATA_rfTxProcessing_C
        CALL    ATA_rfTxProcessing_C
//  207             }while (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_ACTIVE);
        LDS     R16, (g_sRfTx + 2)
        SBRC    R16, 4
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_9
//  208             ATA_rfTxStop_C();  
          CFI FunCall ATA_rfTxStop_C
        CALL    ATA_rfTxStop_C
//  209        }
        INC     R25
        DEC     R24
        BREQ    ??ATA_Flash_RKEbuttonProcessOut_3
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_7
//  210    }
//  211    //----------------------------------------
//  212    else {               //Process RF on send RF message - Trasnparent mode
//  213    eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
??ATA_Flash_RKEbuttonProcessOut_6:
        LDI     R16, LOW((g_sCustomerEEPromSection + 110))
        LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
          CFI FunCall ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        MOVW    R25:R24, R17:R16
//  214    ATA_rfTxInit_C(); 
          CFI FunCall ATA_rfTxInit_C
        CALL    ATA_rfTxInit_C
//  215    ATA_rfTxStartTx_C((BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|0|BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE), (uint8_t*)eepService);
        MOVW    R19:R18, R25:R24
        LDI     R16, 104
          CFI FunCall ATA_rfTxStartTx_C
        CALL    ATA_rfTxStartTx_C
//  216    TXactvive_flag = (PIND & 0x04);
        RJMP    ??ATA_Flash_RKEbuttonProcessOut_10
//  217    while (  (TXactvive_flag==0x04)  ){
//  218        ATA_rfTxProcessing_C();
??ATA_Flash_RKEbuttonProcessOut_11:
          CFI FunCall ATA_rfTxProcessing_C
        CALL    ATA_rfTxProcessing_C
//  219        TXactvive_flag = (PIND & 0x04); 
??ATA_Flash_RKEbuttonProcessOut_10:
        IN      R16, 0x09
        ANDI    R16, 0x04
//  220       }     
        CPI     R16, 4
        BREQ    ??ATA_Flash_RKEbuttonProcessOut_11
//  221       ATA_rfTxStop_C();      
          CFI FunCall ATA_rfTxStop_C
        CALL    ATA_rfTxStop_C
//  222       ATA_rfTxClose_C();
          CFI FunCall ATA_rfTxClose_C
        CALL    ATA_rfTxClose_C
//  223    }
//  224    ATA_globalsDeActivateXTO_C();
??ATA_Flash_RKEbuttonProcessOut_3:
          CFI FunCall ATA_globalsDeActivateXTO_C
        CALL    ATA_globalsDeActivateXTO_C
//  225    ATA_timer4Close_C(); 
          CFI FunCall ATA_timer4Close_C
        CALL    ATA_timer4Close_C
//  226    T4IMR = 0x00;
        LDI     R16, 0
        STS     _A_T4IMR, R16
//  227    bit_clear(TXACTIVE);   
        CBI     0x0B, 0x02
//  228    SUPCR &= ~BM_AVEN;
        LDS     R16, 204
        ANDI    R16, 0xEF
        STS     204, R16
//  229    bit_clear(LED1);
        CBI     0x08, 0x00
//  230    bit_clear(LED2);
        CBI     0x08, 0x01
//  231    gFlashApplState.State &= ~(BM_SPI_received_flag);
        LDI     R30, LOW(gFlashApplState)
        LDI     R31, (gFlashApplState) >> 8
        LDD     R16, Z+1
        ANDI    R16, 0xFE
        STD     Z+1, R16
//  232    gFlashApplVars.SPIcount=0x00;
        LDI     R16, 0
        STS     (gFlashApplVars + 2), R16
//  233    gFlashApplState.Buttons &= ~BM_NEWCMNDVALID;  //Clear new command available flag
        LDD     R16, Z+3
        ANDI    R16, 0x7F
        STD     Z+3, R16
//  234    gFlashApplVars.RKEcommand &= 0xfe; 
        LDI     R30, LOW(gFlashApplVars)
        LDI     R31, (gFlashApplVars) >> 8
        LDD     R16, Z+1
        ANDI    R16, 0xFE
        STD     Z+1, R16
//  235    Intr_Enable(SW1_INTR);    //Enable SW1,2,3 interrupts 
        LDS     R16, 109
        ORI     R16, 0x20
        STS     109, R16
//  236    Intr_Enable(SW2_INTR);
        LDS     R16, 109
        ORI     R16, 0x40
        STS     109, R16
//  237    Intr_Enable(SW3_INTR);
        LDS     R16, 109
        ORI     R16, 0x80
        STS     109, R16
//  238    PCICR |= (1<<PCIE1);
        IN      R16, 0x26
        ORI     R16, 0x02
        OUT     0x26, R16
//  239    T0CR = 0;  
        LDI     R16, 0
        STS     _A_T0CR, R16
//  240 }
        LD      R24, Y+
          CFI R24 SameValue
          CFI CFA_Y Y+1
        LD      R25, Y+
          CFI R25 SameValue
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_PORTC
        REQUIRE _A_PIND
        REQUIRE _A_T4IMR
        REQUIRE _A_PORTD
        REQUIRE _A_SUPCR
        REQUIRE _A_PCMSK1
        REQUIRE _A_PCICR
        REQUIRE _A_T0CR

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for bUserCmd>`:
        DC8 165

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DC16    SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        END
// 
//   8 bytes in segment ABSOLUTE
// 424 bytes in segment CODE
//  12 bytes in segment INITTAB
//   1 byte  in segment NEAR_I
//   1 byte  in segment NEAR_ID
//   1 byte  in segment NEAR_Z
// 
// 425 bytes of CODE memory (+ 12 bytes shared)
//   2 bytes of DATA memory (+  8 bytes shared)
//
//Errors: none
//Warnings: none
