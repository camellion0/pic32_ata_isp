###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           13/May/2020  17:03:20
# Copyright 1996-2017 IAR Systems AB.
# Network license: dvriar01.mchp-main.com (STD)
#
#    Source file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
#    Command line =  
#        -f C:\Users\C41045\AppData\Local\Temp\EW1110.tmp
#        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
#        -lCN
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        -lA
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 2304 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplRKE.lst
#    Object file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj\FlashApplRKE.r90
#
###############################################################################

C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplRKE.c
      1          /******************************************************************************
      2            Use of this software is subject to Microchip's Software License Agreement.
      3          --------------------------------------------------------------------------------
      4            $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/FlashApplRKE.c $
      5            $LastChangedRevision: 591974 $
      6            $LastChangedDate: 2020-03-16 09:23:12 -0600 (Mon, 16 Mar 2020) $
      7            $LastChangedBy: grueter $
      8          -------------------------------------------------------------------------------
      9            Project:      ATA5700
     10            Target MCU:   ATA5700
     11            Compiler:     IAR C/C++ Compiler for AVR 5.51.0
     12          -------------------------------------------------------------------------------
     13          
     14          ******************************************************************************
     15          * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
     16          *                                                                             *
     17          * This software is owned by the Microchip Technology Incorporated.            *
     18          * Microchip hereby grants to licensee a personal                              *
     19          * non-exclusive, non-transferable license to copy, use, modify, create        *
     20          * derivative works of, and compile the Microchip Source Code and derivative   *
     21          * works for the sole and exclusive purpose of creating custom software in     *
     22          * support of licensee product to be used only in conjunction with a Microchip *
     23          * integrated circuit as specified in the applicable agreement. Any            *        
     24          * reproduction, modification, translation, compilation, or representation of  *
     25          * this software except as specified above is prohibited without the express   *
     26          * written permission of Microchip.                                            *
     27          *                                                                             *
     28          * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
     29          * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
     30          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
     31          * Microchip reserves the right to make changes without further notice to the  *
     32          * materials described herein. Microchip does not assume any liability arising *
     33          * out of the application or use of any product or circuit described herein.   *
     34          * Microchip does not authorize its products for use as critical components in *
     35          * life-support systems where a malfunction or failure may reasonably be       *
     36          * expected to result in significant injury to the user. The inclusion of      *
     37          * Microchip products in a life-support systems application implies that the   *
     38          * manufacturer assumes all risk of such use and in doing so indemnifies       *
     39          * Microchip against all charges.                                              *
     40          *                                                                             *
     41          * Use may be limited by and subject to the applicable Microchip software      *
     42          * license agreement.                                                          *
     43          ******************************************************************************/
     44          
     45          /** \file FlashApplRKE.c
     46              this file contains an ATA5700 Flash application software
     47          */
     48          
     49          /*===========================================================================*/
     50          /*  INCLUDES                                                                 */
     51          /*===========================================================================*/
     52          #include <string.h>
     53          #include "../../../firmware/init/src/init.h"

   \                                 In  segment ABSOLUTE, at 0x28
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x46
   \   union <unnamed> volatile __io _A_PCICR
   \                     _A_PCICR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6d
   \   union <unnamed> volatile __io _A_PCMSK1
   \                     _A_PCMSK1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x88
   \   union <unnamed> volatile __io _A_T4IMR
   \                     _A_T4IMR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_SUPCR
   \                     _A_SUPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x162
   \   union <unnamed> volatile __ext_io _A_T0CR
   \                     _A_T0CR:
   \   00000000                      DS8 1
     54          #include "../../../firmware/rftx/src/rftx.h"
     55          #include "../../../firmware/lfrx/src/lfrx.h"
     56          //#include "../../../firmware/rfrcc/src/rfrcc.h"
     57          #include "../../../firmware/spi/src/ata5700_command_set.h"
     58          
     59          #include "../../../firmware/init/src/init_flash.h"
     60          #include "../../../firmware/system/src/system_flash.h"
     61          #include "../../../firmware/rftx/src/rftx.h"
     62          #include "../../../firmware/rftx/src/rftx_flash.h"
     63          #include "../../../firmware/timer1/src/timer1.h"
     64          #include "../../../firmware/timer4/src/timer4_flash.h"
     65          #include "../../../firmware/globals/src/globals.h"
     66          
     67          #include "../../../firmware/lfrx/src/lfrx_flash.h"
     68          #include "../../../firmware/tp/src/tp_flash.h"
     69          
     70          #include "../../../firmware/extif/src/extif_flash.h"
     71          
     72          #include "../../../firmware/lfrssi/src/lfrssi.h"
     73          #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
     74          
     75          #include "../../../firmware/calib/src/calib.h"
     76          #include "../../../firmware/aes/src/aes.h"
     77          
     78          
     79          #include "../src/FlashApplPEPS.h"
     80          #include "../src/FlashApplLF.h" 
     81          #include "../src/micro.h"
     82          
     83          #include "../src/FlashApplVars.h"
     84          #include "../src/utils.h"
     85          
     86          
     87          #include "rfrcc_flash.h"
     88          #include "FlashApplVars.h"
     89          #include "FlashApplMsg.h"
     90          
     91          /*===========================================================================*/
     92          /*  Function Prototypes                                                      */
     93          /*===========================================================================*/
     94          void ATA_FlashAppMsgEncrypt(uint8_t* aesMsg, uint8_t msgLength, uint8_t bSecretKeyGroup, uint8_t bKeyId);
     95          
     96          /*===========================================================================*/
     97          /*  DEFINES                                                                  */
     98          /*===========================================================================*/
     99          #define MSG_RX_DATA (g_MsgRXbuffer.aub_data)
    100          
    101          #define SPItx433 0x40
    102          #define SPItx315 0x30
    103          
    104          /*===========================================================================*/
    105          /*  Modul Globals                                                             */
    106          /*===========================================================================*/

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    107          eAesSecretKeySelection bAesSecretKeySelection = AES_USE_SECRET_KEY_A;
   \                     bAesSecretKeySelection:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
    108          uint8_t bUserCmd=0xa5;
   \                     bUserCmd:
   \   00000000                      DS8 1
   \   00000001                      REQUIRE `?<Initializer for bUserCmd>`
    109          extern  uint16_t g_EepRFRcc_flash;
    110          extern uint8_t guiButton;
    111          extern sFlashApplState gFlashApplState;
    112          extern sFlashApplVars gFlashApplVars;
    113          extern uint16_t wEepRfrccAddress;
    114          
    115          extern sCustomerEEPromSection g_sCustomerEEPromSection;
    116          extern sEepFlashApp_AESKey g_sEepFlashApp_AESKey;
    117          
    118          extern RFMSG_FRAME_TS g_MsgRXbuffer;
    119          extern RFMSG_FRAME_TS g_MsgTXbuffer;
    120          
    121          extern uint8_t rub_cid;
    122          extern uint8_t rub_wuip;
    123          extern uint8_t rub_fob_idx;
    124          extern uint32_t rul_fob_id;
    125          extern uint8_t rub_rf_chan;
    126          extern uint8_t gVbat_Status;
    127          extern sEepFlashApp_RKEPEPS g_sEepFlashApp_RKEPEPS;
    128          extern uint8_t g_SPI_RXbuffer[10];
    129             
    130          /*===========================================================================*/
    131          /*  IMPLEMENTATION                                                           */
    132          /*===========================================================================*/
    133          /** \brief <b>ATA_Flash_RKEsend(void)</b>
    134              Shall configure the 3D LF receiver into LF listen mode and activate
    135                the ID0 wake-up interrupt
    136          
    137              \param[in]  bLfBdrate       selects the LF baud rate
    138                          bSense          selects the LF RX sensitivity
    139                          pLf_Id          pointer to the LF wake-up ID
    140                          bLf_IdLength    number of LF ID bits
    141          
    142              \return none
    143          
    144          
    145              \Traceability None
    146          
    147              \image none
    148              \n
    149          */
    150          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    151          void ATA_Flash_RKEbuttonProcessOut (void)
   \                     ATA_Flash_RKEbuttonProcessOut:
    152          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
    153             uint8_t TXactvive_flag; 
    154             uint16_t eepService;
    155             memset(MSG_TX_DATA.rke.preamble0, 0xFF, RKE_RF_MSG_PREAMPLE_LEN);
   \   00000004   E140               LDI     R20, 16
   \   00000006   E050               LDI     R21, 0
   \   00000008   EF2F               LDI     R18, 255
   \   0000000A   E030               LDI     R19, 0
   \   0000000C   ....               LDI     R16, LOW((g_MsgTXbuffer + 2))
   \   0000000E   ....               LDI     R17, HIGH((g_MsgTXbuffer + 2))
   \   00000010   ........           CALL    memset
    156             ATA_globalsActivateXTO_C();  
   \   00000014   ........           CALL    ATA_globalsActivateXTO_C
    157             ATA_rfTxInit_C();
   \   00000018   ........           CALL    ATA_rfTxInit_C
    158             
    159             if ((gFlashApplState.State&BM_SPI_received_flag)==BM_SPI_received_flag){  //Process SPI requested send RF message - 1 RF message 
   \   0000001C   ....               LDI     R30, LOW(gFlashApplState)
   \   0000001E   ....               LDI     R31, (gFlashApplState) >> 8
   \   00000020   8101               LDD     R16, Z+1
   \   00000022   FF00               SBRS    R16, 0
   \   00000024   C035               RJMP    ??ATA_Flash_RKEbuttonProcessOut_0
    160               
    161                 bool spivalid = false;
    162                 if (g_SPI_RXbuffer[0] == SPItx433){
   \   00000026   9100....           LDS     R16, g_SPI_RXbuffer
   \   0000002A   3400               CPI     R16, 64
   \   0000002C   F439               BRNE    ??ATA_Flash_RKEbuttonProcessOut_1
    163                    eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
   \   0000002E   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 110))
   \   00000030   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
   \   00000032   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
   \   00000036   01C8               MOVW    R25:R24, R17:R16
    164                    spivalid = true;
    165                    bit_set(LED1);
   \   00000038   9A40               SBI     0x08, 0x00
   \   0000003A   C009               RJMP    ??ATA_Flash_RKEbuttonProcessOut_2
    166                 }
    167                 else if (g_SPI_RXbuffer[0] == SPItx315){
   \                     ??ATA_Flash_RKEbuttonProcessOut_1:
   \   0000003C   3300               CPI     R16, 48
   \   0000003E   F009               BREQ    $+2+2
   \   00000040   C07C               RJMP    ??ATA_Flash_RKEbuttonProcessOut_3
    168                    eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer0Ptr_l);
   \   00000042   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 108))
   \   00000044   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 108))
   \   00000046   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
   \   0000004A   01C8               MOVW    R25:R24, R17:R16
    169                    spivalid = true;
    170                    bit_set(LED2);
   \   0000004C   9A41               SBI     0x08, 0x01
    171                 }
    172                 if (spivalid == true){   
    173              for (uint8_t index = 0; index < 13; index++)
   \                     ??ATA_Flash_RKEbuttonProcessOut_2:
   \   0000004E   E020               LDI     R18, 0
   \   00000050   E00D               LDI     R16, 13
    174                      {
    175                        g_MsgTXbuffer.aub_data[(index+1)+RKE_RF_MSG_PREAMPLE_LEN] = index;
   \                     ??ATA_Flash_RKEbuttonProcessOut_4:
   \   00000052   E0F0               LDI     R31, 0
   \   00000054   2FE2               MOV     R30, R18
   \   00000056   ....               SUBI    R30, LOW((-(g_MsgTXbuffer) & 0xFFFF))
   \   00000058   ....               SBCI    R31, (-(g_MsgTXbuffer) & 0xFFFF) >> 8
   \   0000005A   8B23               STD     Z+19, R18
    176                      }          
   \   0000005C   9523               INC     R18
   \   0000005E   950A               DEC     R16
   \   00000060   F7C1               BRNE    ??ATA_Flash_RKEbuttonProcessOut_4
    177                      g_MsgTXbuffer.aub_data[(14)+RKE_RF_MSG_PREAMPLE_LEN]=0x0D;//Force the last bayte to 0x0D 
   \   00000062   E00D               LDI     R16, 13
   \   00000064   9300....           STS     (g_MsgTXbuffer + 32), R16
    178              ATA_rfTxInit_C();      
   \   00000068   ........           CALL    ATA_rfTxInit_C
    179              ATA_rfTxFillDFifo_C((RKE_RFMESSAGELENGTH+2), g_MsgTXbuffer.aub_data);//Added one, CAB + Omega2 missing last byte
   \   0000006C   ....               LDI     R18, LOW((g_MsgTXbuffer + 2))
   \   0000006E   ....               LDI     R19, HIGH((g_MsgTXbuffer + 2))
   \   00000070   E10F               LDI     R16, 31
   \   00000072   ........           CALL    ATA_rfTxFillDFifo_C
    180              ATA_rfTxStartTx_C( (BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|0), (uint8_t*) eepService);//
   \   00000076   019C               MOVW    R19:R18, R25:R24
   \   00000078   E408               LDI     R16, 72
   \   0000007A   ........           CALL    ATA_rfTxStartTx_C
    181              do {
    182                    ATA_rfTxProcessing_C();
   \                     ??ATA_Flash_RKEbuttonProcessOut_5:
   \   0000007E   ........           CALL    ATA_rfTxProcessing_C
    183                    
    184                  }while (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_ACTIVE);
   \   00000082   9100....           LDS     R16, (g_sRfTx + 2)
   \   00000086   FD04               SBRC    R16, 4
   \   00000088   CFFA               RJMP    ??ATA_Flash_RKEbuttonProcessOut_5
    185                  ATA_rfTxStop_C();
   \   0000008A   ........           CALL    ATA_rfTxStop_C
   \   0000008E   C055               RJMP    ??ATA_Flash_RKEbuttonProcessOut_3
    186                 }
    187             }    
    188             
    189             else if ((gFlashApplState.Buttons & BM_NEWCMNDVALID)== BM_NEWCMNDVALID)  //Process SW press send RF message - 3 RF message
   \                     ??ATA_Flash_RKEbuttonProcessOut_0:
   \   00000090   8103               LDD     R16, Z+3
   \   00000092   FF07               SBRS    R16, 7
   \   00000094   C03C               RJMP    ??ATA_Flash_RKEbuttonProcessOut_6
    190             {
    191               bit_set(LED1);
   \   00000096   9A40               SBI     0x08, 0x00
    192               g_sRfrccComponentData.bFlags = RFRCC_FLAGS_RESET;
   \   00000098   E000               LDI     R16, 0
   \   0000009A   9300....           STS     g_sRfrccComponentData, R16
    193               ATA_rfrccGenRollCntMsg_C((uint16_t)&g_sEepFlashApp_RKEPEPS.ul_rolling_code, 0x00, gFlashApplVars.RKEcommand, 0x00);  
   \   0000009E   E040               LDI     R20, 0
   \   000000A0   9130....           LDS     R19, (gFlashApplVars + 1)
   \   000000A4   E020               LDI     R18, 0
   \   000000A6   ....               LDI     R16, LOW(g_sEepFlashApp_RKEPEPS)
   \   000000A8   ....               LDI     R17, (g_sEepFlashApp_RKEPEPS) >> 8
   \   000000AA   ........           CALL    ATA_rfrccGenRollCntMsg_C
    194               for (uint8_t loopcnt=0; loopcnt<3; loopcnt++)
   \   000000AE   E090               LDI     R25, 0
   \   000000B0   E083               LDI     R24, 3
    195                 {     
    196                    for (uint8_t index = 0; index < 13; index++)
   \                     ??ATA_Flash_RKEbuttonProcessOut_7:
   \   000000B2   E020               LDI     R18, 0
   \   000000B4   E00D               LDI     R16, 13
    197                      {
    198                        g_MsgTXbuffer.aub_data[(index+1)+RKE_RF_MSG_PREAMPLE_LEN] = g_sRfrccComponentData.bRollCodeMsgBuffer[index];
   \                     ??ATA_Flash_RKEbuttonProcessOut_8:
   \   000000B6   2FE2               MOV     R30, R18
   \   000000B8   E0F0               LDI     R31, 0
   \   000000BA   ....               SUBI    R30, LOW((-(g_sRfrccComponentData) & 0xFFFF))
   \   000000BC   ....               SBCI    R31, (-(g_sRfrccComponentData) & 0xFFFF) >> 8
   \   000000BE   8112               LDD     R17, Z+2
   \   000000C0   2FE2               MOV     R30, R18
   \   000000C2   E0F0               LDI     R31, 0
   \   000000C4   ....               SUBI    R30, LOW((-(g_MsgTXbuffer) & 0xFFFF))
   \   000000C6   ....               SBCI    R31, (-(g_MsgTXbuffer) & 0xFFFF) >> 8
   \   000000C8   8B13               STD     Z+19, R17
    199                      }          
   \   000000CA   9523               INC     R18
   \   000000CC   950A               DEC     R16
   \   000000CE   F799               BRNE    ??ATA_Flash_RKEbuttonProcessOut_8
    200                      g_MsgTXbuffer.aub_data[(14)+RKE_RF_MSG_PREAMPLE_LEN]=0x0D;//Force the last bayte to 0x0D 
   \   000000D0   E00D               LDI     R16, 13
   \   000000D2   9300....           STS     (g_MsgTXbuffer + 32), R16
    201                      ATA_rfTxInit_C();      
   \   000000D6   ........           CALL    ATA_rfTxInit_C
    202                      ATA_rfTxFillDFifo_C((RKE_RFMESSAGELENGTH+2), g_MsgTXbuffer.aub_data);//Added one, CAB + Omega2 missing last byte
   \   000000DA   ....               LDI     R18, LOW((g_MsgTXbuffer + 2))
   \   000000DC   ....               LDI     R19, HIGH((g_MsgTXbuffer + 2))
   \   000000DE   E10F               LDI     R16, 31
   \   000000E0   ........           CALL    ATA_rfTxFillDFifo_C
    203                      uint16_t eepService1 = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
   \   000000E4   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 110))
   \   000000E6   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
   \   000000E8   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
   \   000000EC   0198               MOVW    R19:R18, R17:R16
    204                      ATA_rfTxStartTx_C( (BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|loopcnt), (uint8_t*) eepService1);//Need variable name for      
   \   000000EE   2F09               MOV     R16, R25
   \   000000F0   6408               ORI     R16, 0x48
   \   000000F2   ........           CALL    ATA_rfTxStartTx_C
    205                      do {
    206                      ATA_rfTxProcessing_C();          
   \                     ??ATA_Flash_RKEbuttonProcessOut_9:
   \   000000F6   ........           CALL    ATA_rfTxProcessing_C
    207                      }while (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_ACTIVE);
   \   000000FA   9100....           LDS     R16, (g_sRfTx + 2)
   \   000000FE   FD04               SBRC    R16, 4
   \   00000100   CFFA               RJMP    ??ATA_Flash_RKEbuttonProcessOut_9
    208                      ATA_rfTxStop_C();  
   \   00000102   ........           CALL    ATA_rfTxStop_C
    209                 }
   \   00000106   9593               INC     R25
   \   00000108   958A               DEC     R24
   \   0000010A   F0B9               BREQ    ??ATA_Flash_RKEbuttonProcessOut_3
   \   0000010C   CFD2               RJMP    ??ATA_Flash_RKEbuttonProcessOut_7
    210             }
    211             //----------------------------------------
    212             else {               //Process RF on send RF message - Trasnparent mode
    213             eepService = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
   \                     ??ATA_Flash_RKEbuttonProcessOut_6:
   \   0000010E   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 110))
   \   00000110   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
   \   00000112   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
   \   00000116   01C8               MOVW    R25:R24, R17:R16
    214             ATA_rfTxInit_C(); 
   \   00000118   ........           CALL    ATA_rfTxInit_C
    215             ATA_rfTxStartTx_C((BM_RFTXCONFIG_BCONFIG_SVC_LOCATION|BM_RFTXCONFIG_BCONFIG_VCO_TUNING|0|BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE), (uint8_t*)eepService);
   \   0000011C   019C               MOVW    R19:R18, R25:R24
   \   0000011E   E608               LDI     R16, 104
   \   00000120   ........           CALL    ATA_rfTxStartTx_C
    216             TXactvive_flag = (PIND & 0x04);
   \   00000124   C002               RJMP    ??ATA_Flash_RKEbuttonProcessOut_10
    217             while (  (TXactvive_flag==0x04)  ){
    218                 ATA_rfTxProcessing_C();
   \                     ??ATA_Flash_RKEbuttonProcessOut_11:
   \   00000126   ........           CALL    ATA_rfTxProcessing_C
    219                 TXactvive_flag = (PIND & 0x04); 
   \                     ??ATA_Flash_RKEbuttonProcessOut_10:
   \   0000012A   B109               IN      R16, 0x09
   \   0000012C   7004               ANDI    R16, 0x04
    220                }     
   \   0000012E   3004               CPI     R16, 4
   \   00000130   F3D1               BREQ    ??ATA_Flash_RKEbuttonProcessOut_11
    221                ATA_rfTxStop_C();      
   \   00000132   ........           CALL    ATA_rfTxStop_C
    222                ATA_rfTxClose_C();
   \   00000136   ........           CALL    ATA_rfTxClose_C
    223             }
    224             ATA_globalsDeActivateXTO_C();
   \                     ??ATA_Flash_RKEbuttonProcessOut_3:
   \   0000013A   ........           CALL    ATA_globalsDeActivateXTO_C
    225             ATA_timer4Close_C(); 
   \   0000013E   ........           CALL    ATA_timer4Close_C
    226             T4IMR = 0x00;
   \   00000142   E000               LDI     R16, 0
   \   00000144   9300....           STS     _A_T4IMR, R16
    227             bit_clear(TXACTIVE);   
   \   00000148   985A               CBI     0x0B, 0x02
    228             SUPCR &= ~BM_AVEN;
   \   0000014A   910000CC           LDS     R16, 204
   \   0000014E   7E0F               ANDI    R16, 0xEF
   \   00000150   930000CC           STS     204, R16
    229             bit_clear(LED1);
   \   00000154   9840               CBI     0x08, 0x00
    230             bit_clear(LED2);
   \   00000156   9841               CBI     0x08, 0x01
    231             gFlashApplState.State &= ~(BM_SPI_received_flag);
   \   00000158   ....               LDI     R30, LOW(gFlashApplState)
   \   0000015A   ....               LDI     R31, (gFlashApplState) >> 8
   \   0000015C   8101               LDD     R16, Z+1
   \   0000015E   7F0E               ANDI    R16, 0xFE
   \   00000160   8301               STD     Z+1, R16
    232             gFlashApplVars.SPIcount=0x00;
   \   00000162   E000               LDI     R16, 0
   \   00000164   9300....           STS     (gFlashApplVars + 2), R16
    233             gFlashApplState.Buttons &= ~BM_NEWCMNDVALID;  //Clear new command available flag
   \   00000168   8103               LDD     R16, Z+3
   \   0000016A   770F               ANDI    R16, 0x7F
   \   0000016C   8303               STD     Z+3, R16
    234             gFlashApplVars.RKEcommand &= 0xfe; 
   \   0000016E   ....               LDI     R30, LOW(gFlashApplVars)
   \   00000170   ....               LDI     R31, (gFlashApplVars) >> 8
   \   00000172   8101               LDD     R16, Z+1
   \   00000174   7F0E               ANDI    R16, 0xFE
   \   00000176   8301               STD     Z+1, R16
    235             Intr_Enable(SW1_INTR);    //Enable SW1,2,3 interrupts 
   \   00000178   9100006D           LDS     R16, 109
   \   0000017C   6200               ORI     R16, 0x20
   \   0000017E   9300006D           STS     109, R16
    236             Intr_Enable(SW2_INTR);
   \   00000182   9100006D           LDS     R16, 109
   \   00000186   6400               ORI     R16, 0x40
   \   00000188   9300006D           STS     109, R16
    237             Intr_Enable(SW3_INTR);
   \   0000018C   9100006D           LDS     R16, 109
   \   00000190   6800               ORI     R16, 0x80
   \   00000192   9300006D           STS     109, R16
    238             PCICR |= (1<<PCIE1);
   \   00000196   B506               IN      R16, 0x26
   \   00000198   6002               ORI     R16, 0x02
   \   0000019A   BD06               OUT     0x26, R16
    239             T0CR = 0;  
   \   0000019C   E000               LDI     R16, 0
   \   0000019E   9300....           STS     _A_T0CR, R16
    240          }
   \   000001A2   9189               LD      R24, Y+
   \   000001A4   9199               LD      R25, Y+
   \   000001A6   9508               RET
   \   000001A8                      REQUIRE _A_PORTC
   \   000001A8                      REQUIRE _A_PIND
   \   000001A8                      REQUIRE _A_T4IMR
   \   000001A8                      REQUIRE _A_PORTD
   \   000001A8                      REQUIRE _A_SUPCR
   \   000001A8                      REQUIRE _A_PCMSK1
   \   000001A8                      REQUIRE _A_PCICR
   \   000001A8                      REQUIRE _A_T0CR

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for bUserCmd>`:
   \   00000000   A5                 DC8 165

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      2      2   ATA_Flash_RKEbuttonProcessOut
        2      2   -> ATA_globalsActivateXTO_C
        2      2   -> ATA_globalsDeActivateXTO_C
        2      2   -> ATA_rfTxClose_C
        2      2   -> ATA_rfTxFillDFifo_C
        2      2   -> ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        2      2   -> ATA_rfTxInit_C
        2      2   -> ATA_rfTxProcessing_C
        2      2   -> ATA_rfTxStartTx_C
        2      2   -> ATA_rfTxStop_C
        2      2   -> ATA_rfrccGenRollCntMsg_C
        2      2   -> ATA_timer4Close_C
        2      2   -> memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for bUserCmd>
     424  ATA_Flash_RKEbuttonProcessOut
       1  _A_PCICR
       1  _A_PCMSK1
       1  _A_PIND
       1  _A_PORTC
       1  _A_PORTD
       1  _A_SUPCR
       1  _A_T0CR
       1  _A_T4IMR
       1  bAesSecretKeySelection
       1  bUserCmd
      12  -- Other

 
   8 bytes in segment ABSOLUTE
 424 bytes in segment CODE
  12 bytes in segment INITTAB
   1 byte  in segment NEAR_I
   1 byte  in segment NEAR_ID
   1 byte  in segment NEAR_Z
 
 425 bytes of CODE memory (+ 12 bytes shared)
   2 bytes of DATA memory (+  8 bytes shared)

Errors: none
Warnings: none
