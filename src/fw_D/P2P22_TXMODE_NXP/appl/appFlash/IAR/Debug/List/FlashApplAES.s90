///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          13/May/2020  17:03:18
// Copyright 1996-2017 IAR Systems AB.
// Network license: dvriar01.mchp-main.com (STD)
//
//    Source file  =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
//    Command line =  
//        -f C:\Users\C41045\AppData\Local\Temp\EW802.tmp
//        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
//        -lCN
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        -lA
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
//        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 2304 --clib -Ohz)
//    Locale       =  English_USA.1252
//    List file    =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplAES.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME FlashApplAES

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09

        PUBLIC ATA_FlashAppMsgEncrypt
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN ATA_aesEncryptData_C
        EXTERN ATA_aesSetConfig_C
        EXTERN ATA_globalsInitSramSpace_C
        EXTERN g_sAesComponentData
        EXTERN memcpy

// C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
//    1 /******************************************************************************
//    2   Use of this software is subject to Microchip's Software License Agreement.
//    3 --------------------------------------------------------------------------------
//    4   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/GR_inwork/appl/appFlash/src/FlashIrq.c $
//    5   $LastChangedRevision: 328482 $
//    6   $LastChangedDate: 2015-07-22 13:17:23 -0600 (Wed, 22 Jul 2015) $
//    7   $LastChangedBy: grueter $
//    8 -------------------------------------------------------------------------------
//    9   Project:      ATA5700
//   10   Target MCU:   ATA5700
//   11   Compiler:     IAR C/C++ Compiler for AVR 5.51.0
//   12 -------------------------------------------------------------------------------
//   13 
//   14 ******************************************************************************
//   15 * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
//   16 *                                                                             *
//   17 * This software is owned by the Microchip Technology Incorporated.            *
//   18 * Microchip hereby grants to licensee a personal                              *
//   19 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   20 * derivative works of, and compile the Microchip Source Code and derivative   *
//   21 * works for the sole and exclusive purpose of creating custom software in     *
//   22 * support of licensee product to be used only in conjunction with a Microchip *
//   23 * integrated circuit as specified in the applicable agreement. Any            *        
//   24 * reproduction, modification, translation, compilation, or representation of  *
//   25 * this software except as specified above is prohibited without the express   *
//   26 * written permission of Microchip.                                            *
//   27 *                                                                             *
//   28 * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
//   29 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   30 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   31 * Microchip reserves the right to make changes without further notice to the  *
//   32 * materials described herein. Microchip does not assume any liability arising *
//   33 * out of the application or use of any product or circuit described herein.   *
//   34 * Microchip does not authorize its products for use as critical components in *
//   35 * life-support systems where a malfunction or failure may reasonably be       *
//   36 * expected to result in significant injury to the user. The inclusion of      *
//   37 * Microchip products in a life-support systems application implies that the   *
//   38 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   39 * Microchip against all charges.                                              *
//   40 *                                                                             *
//   41 * Use may be limited by and subject to the applicable Microchip software      *
//   42 * license agreement.                                                          *
//   43 ******************************************************************************/
//   44 
//   45 /** \file FlashApplAES.c
//   46     this file contains an ATA5700 Flash application software
//   47 */
//   48 
//   49 /*===========================================================================*/
//   50 /*  INCLUDES                                                                 */
//   51 /*===========================================================================*/
//   52 
//   53 #include <string.h>
//   54 #include "../../../firmware/init/src/init.h"
//   55 #include "../../../firmware/rftx/src/rftx.h"
//   56 #include "../../../firmware/lfrx/src/lfrx.h"
//   57 #include "../../../firmware/spi/src/ata5700_command_set.h"
//   58 #include "../../../firmware/stdc/src/ioATA5700.h"
//   59 #include "../../../firmware/aes/src/aes.h"
//   60 #include "../../../firmware/init/src/init_flash.h"
//   61 #include "../../../firmware/system/src/system_flash.h"
//   62 #include "../../../firmware/timer1/src/timer1.h"
//   63 #include "../../../firmware/timer5/src/timer5_flash.h"
//   64 #include "../../../firmware/globals/src/globals.h"
//   65 #include "../../../firmware/lfrx/src/lfrx_flash.h"
//   66 #include "../../../firmware/tp/src/tp_flash.h"
//   67 #include "../../../firmware/extif/src/extif_flash.h"
//   68 #include "../../../firmware/lfrssi/src/lfrssi.h"
//   69 #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
//   70 #include "../../../firmware/calib/src/calib.h"
//   71 #include "../../../firmware/aes/src/aes.h"
//   72 #include "FlashApplVars.h"
//   73 
//   74 /*===========================================================================*/
//   75 /*  DEFINES                                                                  */
//   76 /*===========================================================================*/
//   77 
//   78 #define ATA_DEFAULT_CONFIG_VAL            (AES_CONFIG_BM_CRYPTO_MODULE_RESET)
//   79 
//   80 #define DATABLOCK_4_AES_MAX_LEN_BITS      0x80U   /* maximum length of data block to encrypt is 128 bits */
//   81 #define DATABLOCK_4_AES_MAX_LEN_BYTES     0x10U   /* maximum length of data block to encrypt is 16 bytes */
//   82 #define DATABLOCK_4_AES_PAD_INFO          0x80U   /* padding information */
//   83 #define DATABLOCK_4_AES_PAD_INFO_OFFSET   0x09U   /* offset to the beginning of padding information */
//   84 #define DATABLOCK_4_AES_PAD_INFO_LENGTH   0x01U   /* length of padding information in bytes */
//   85 #define DATABLOCK_4_AES_PAD_ZERO_OFFSET   (DATABLOCK_4_AES_PAD_OFFSET + DATABLOCK_4_AES_PAD_INFO_LENGTH)    /* offset to the beginning with zero(s) */
//   86 #define DATABLOCK_4_AES_PAD_ZERO_LENGTH   (DATABLOCK_4_AES_MAX_LEN_BYTES - DATABLOCK_4_AES_PAD_ZERO_OFFSET) /* length of padding info */
//   87 #define DATABLOCK_4_AES_PAD_OFFSET        0x09U   /* offset to the beginning of byte padding within data block to encrypt including padding information byte */
//   88 #define DATABLOCK_4_AES_PAD_LENGTH        (DATABLOCK_4_AES_MAX_LEN_BYTES - DATABLOCK_4_AES_PAD_OFFSET)      /* number of padding bytes within data block to encrypt */
//   89 /*===========================================================================*/
//   90 /*  Modul Globals                                                             */
//   91 /*===========================================================================*/
//   92 
//   93 extern sFlashApplState gFlashApplState;
//   94 extern sFlashApplVars gFlashApplVars;
//   95 
//   96 /*===========================================================================*/
//   97 /*  IMPLEMENTATION                                                           */
//   98 /*===========================================================================*/
//   99 
//  100 /*--------------------------------------------------------------------------- */
//  101 /*brief <b>ToDo AES function*/
//  102             
//  103 /*    The function contains ---                                               */
//  104  
//  105 /*----------------------------------------------------------------------------*/

        RSEG CODE:CODE:NOROOT(1)
//  106 void ATA_FlashAppMsgEncrypt(uint8_t* aesMsg, uint8_t msgLength, uint8_t bSecretKeyGroup, uint8_t bKeyId)
ATA_FlashAppMsgEncrypt:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_FlashAppMsgEncrypt
//  107 {
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOVW    R25:R24, R17:R16
        MOV     R26, R18
        MOV     R18, R20
//  108   
//  109   if (msgLength > DATABLOCK_4_AES_MAX_LEN_BYTES) {
        CPI     R26, 17
        BRCC    ??ATA_FlashAppMsgEncrypt_0
//  110     // Error invalid length
//  111     return;
//  112   }
//  113   
//  114   ATA_aesSetConfig_C(bSecretKeyGroup, ATA_DEFAULT_CONFIG_VAL , bKeyId);
        LDI     R17, 32
        MOV     R16, R19
          CFI FunCall ATA_aesSetConfig_C
        CALL    ATA_aesSetConfig_C
//  115   
//  116   memcpy(g_sAesComponentData.bDataBuffer, aesMsg, msgLength);
        MOV     R20, R26
        LDI     R21, 0
        MOVW    R19:R18, R25:R24
        LDI     R16, LOW((g_sAesComponentData + 4))
        LDI     R17, HIGH((g_sAesComponentData + 4))
          CFI FunCall memcpy
        CALL    memcpy
//  117      
//  118   if (msgLength < DATABLOCK_4_AES_MAX_LEN_BYTES) {
        CPI     R26, 16
        BRCC    ??ATA_FlashAppMsgEncrypt_1
//  119     // Pad with Zeroes
//  120     ATA_globalsInitSramSpace_C( &g_sAesComponentData.bDataBuffer[msgLength], DATABLOCK_4_AES_MAX_LEN_BYTES - msgLength);
        LDI     R18, 16
        SUB     R18, R26
        LDI     R16, LOW((g_sAesComponentData + 4))
        LDI     R17, HIGH((g_sAesComponentData + 4))
        LDI     R27, 0
        ADD     R16, R26
        ADC     R17, R27
          CFI FunCall ATA_globalsInitSramSpace_C
        CALL    ATA_globalsInitSramSpace_C
//  121   }
//  122   
//  123   //g_sAesComponentData.bConfig &= ~AES_CONFIG_BM_CRYPTO_MODULE_RESET;
//  124   //g_sAesComponentData.bConfig |= AES_CONFIG_BM_XOR_STATE_MEMORY;
//  125      
//  126   ATA_aesEncryptData_C();
??ATA_FlashAppMsgEncrypt_1:
          CFI FunCall ATA_aesEncryptData_C
        CALL    ATA_aesEncryptData_C
//  127   
//  128   if( !(g_sAesComponentData.bFlags & AES_FLAGS_BM_ERROR_FLAG) )
        LDS     R16, g_sAesComponentData
        SBRC    R16, 7
        RJMP    ??ATA_FlashAppMsgEncrypt_0
//  129   {
//  130     memcpy(aesMsg, g_sAesComponentData.bDataBuffer, msgLength);
        MOV     R20, R26
        LDI     R21, 0
        LDI     R18, LOW((g_sAesComponentData + 4))
        LDI     R19, HIGH((g_sAesComponentData + 4))
        MOVW    R17:R16, R25:R24
          CFI FunCall memcpy
        CALL    memcpy
//  131   }
//  132 }
??ATA_FlashAppMsgEncrypt_0:
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
          CFI EndBlock cfiBlock0

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//  133 /*----------------------------------------------------------------------------*/
// 
// 90 bytes in segment CODE
// 
// 90 bytes of CODE memory
//
//Errors: none
//Warnings: none
