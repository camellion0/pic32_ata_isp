###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           13/May/2020  17:03:20
# Copyright 1996-2017 IAR Systems AB.
# Network license: dvriar01.mchp-main.com (STD)
#
#    Source file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
#    Command line =  
#        -f C:\Users\C41045\AppData\Local\Temp\EW1305.tmp
#        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
#        -lCN
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        -lA
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 2304 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplSPI.lst
#    Object file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj\FlashApplSPI.r90
#
###############################################################################

C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
      1          /******************************************************************************
      2            Use of this software is subject to Microchip's Software License Agreement.
      3          --------------------------------------------------------------------------------
      4            $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/FlashApplSPI.c $
      5            $LastChangedRevision: 591974 $
      6            $LastChangedDate: 2020-03-16 09:23:12 -0600 (Mon, 16 Mar 2020) $
      7            $LastChangedBy: grueter $
      8          -------------------------------------------------------------------------------
      9            Project:      ATA5700
     10            Target MCU:   ATA5700
     11            Compiler:     IAR C/C++ Compiler for AVR 5.51.0
     12          -------------------------------------------------------------------------------
     13          
     14          ******************************************************************************
     15          * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
     16          *                                                                             *
     17          * This software is owned by the Microchip Technology Incorporated.            *
     18          * Microchip hereby grants to licensee a personal                              *
     19          * non-exclusive, non-transferable license to copy, use, modify, create        *
     20          * derivative works of, and compile the Microchip Source Code and derivative   *
     21          * works for the sole and exclusive purpose of creating custom software in     *
     22          * support of licensee product to be used only in conjunction with a Microchip *
     23          * integrated circuit as specified in the applicable agreement. Any            *        
     24          * reproduction, modification, translation, compilation, or representation of  *
     25          * this software except as specified above is prohibited without the express   *
     26          * written permission of Microchip.                                            *
     27          *                                                                             *
     28          * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
     29          * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
     30          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
     31          * Microchip reserves the right to make changes without further notice to the  *
     32          * materials described herein. Microchip does not assume any liability arising *
     33          * out of the application or use of any product or circuit described herein.   *
     34          * Microchip does not authorize its products for use as critical components in *
     35          * life-support systems where a malfunction or failure may reasonably be       *
     36          * expected to result in significant injury to the user. The inclusion of      *
     37          * Microchip products in a life-support systems application implies that the   *
     38          * manufacturer assumes all risk of such use and in doing so indemnifies       *
     39          * Microchip against all charges.                                              *
     40          *                                                                             *
     41          * Use may be limited by and subject to the applicable Microchip software      *
     42          * license agreement.                                                          *
     43          ******************************************************************************/
     44          
     45          /** \file FlashSPI.c
     46              this file contains an ATA5700 SPI application software
     47          */
     48          
     49          /*===========================================================================*/
     50          /*  INCLUDES                                                                 */
     51          /*===========================================================================*/
     52          #include "../../../firmware/init/src/init.h"

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_PRR0
   \                     _A_PRR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x47
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x48
   \   union <unnamed> volatile __io _A_EIFR
   \                     _A_EIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4d
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x158
   \   union <unnamed> volatile __ext_io _A_SFIR
   \                     _A_SFIR:
   \   00000000                      DS8 1
     53          #include "../../../firmware/rftx/src/rftx.h"
     54          #include "../../../firmware/lfrx/src/lfrx.h"
     55          #include "../../../firmware/spi/src/ata5700_command_set_flash.h"
     56          #include "../../../firmware/init/src/init_flash.h"
     57          #include "../../../firmware/system/src/system_flash.h"
     58          #include "../../../firmware/timer1/src/timer1.h"
     59          #include "../../../firmware/timer5/src/timer5_flash.h"
     60          #include "../../../firmware/timer4/src/timer4_flash.h"
     61          #include "../../../firmware/globals/src/globals.h"
     62          #include "../../../firmware/lfrx/src/lfrx_flash.h"
     63          #include "../../../firmware/tp/src/tp_flash.h"
     64          #include "../../../firmware/extif/src/extif_flash.h"
     65          #include "../../../firmware/lfrssi/src/lfrssi.h"
     66          #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
     67          #include "../../../firmware/calib/src/calib.h"
     68          #include "../../../firmware/aes/src/aes.h"
     69          #include "../../../firmware/spi/src/spi.h"
     70          #include "../src/micro.h"
     71          #include "rfrcc_flash.h"
     72          #include "FlashApplVars.h"
     73          #include "../src/FlashApplPEPS.h"
     74          #include "FlashApplMSG.h"
     75          #include "../src/FlashApplLF.h" 
     76          
     77          
     78          /*===========================================================================*/
     79          /*  DEFINES                                                                  */
     80          /*===========================================================================*/
     81          /*===========================================================================*/
     82          /*  Modul Globals                                                            */
     83          /*===========================================================================*/
     84          extern sFlashApplState gFlashApplState;
     85          extern sFlashApplVars gFlashApplVars;
     86          extern tTimer5Status gTimer5Status;
     87          //uint8_t m_bTempArray_flash[10];
     88          //extern m_bTempArray_flash[10];
     89          #pragma location = ".sram_SPI_RXbuffer"

   \                                 In  segment .sram_SPI_RXbuffer, align 1, keep-with-next
     90          __no_init uint8_t g_SPI_RXbuffer[10];
   \                     g_SPI_RXbuffer:
   \   00000000                      DS8 10
     91          
     92          
     93          //uint8_t *pTxData = &g_bModuleTestBuffer_flash[0];
     94          //uint8_t *pRxData = &g_bModuleTestBuffer_flash[BASIC_SPI_FUNCTION_TELEGRAM_LENGTH];
     95          
     96          /*===========================================================================*/
     97          /*  Modul Prototypes                                                         */
     98          /*===========================================================================*/
     99          //void SendShortCommand(void);
    100          //void ATA_Flash_IOinit(void);
    101          /*===========================================================================*/
    102          /*  IMPLEMENTATION                                                           */
    103          /*===========================================================================*/
    104          /*---------------------------------------------------------------------------*/
    105          /** \brief <b>ATA_spiOpenSlaveFlash_C</b>
    106              shall setup a SPI master interface. The PRR0.PRSPI clock domain remains 
    107              active after functions is left.
    108          
    109              \param[in]  bSpcr           SPCR register setting
    110              \param[in]  bSpsr           SPSR register setting
    111              \return     FAIL if SPI is already opened, otherwise OK
    112          
    113              Variable Usage:
    114              \li [out] ::g_sSpiConfig  Global SPI component data
    115              \li [out] ::g_sDebug      Global Debug component data
    116              
    117              \image html ATA_spiOpen_C.png
    118          
    119              \internal
    120              \li 005: Power up SPI interface via PRR0.PRSPI=0
    121              \li 010: IF the SPI interface is already in use as indicated by bit SPE in
    122                       register SPCR being set to 1, THEN
    123                         Set ::g_sDebug .bErrorCode to DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED\n
    124                       ELSE
    125                         Disable INT0 via register EIMSK
    126          
    127              \li 020:   Configure the ports as follows
    128                          - PD1/NSS  - SPI Not Slave Select    (input) + Pull up
    129                          - PB5/MISO - SPI Master In Slave Out (output)
    130                          - PB6/MOSI - SPI Master Out Slave In (input)
    131                          - PB7/SCK  - SPI Clock               (input)
    132          
    133              \li 040:   Configure SPCR register setting according to function parameters
    134                          - SPSR = spsr
    135                          - SPCR = spcr
    136          
    137              \li 050:   Set SPI status to "INITIALIZED" in ::g_sSpiConfig .bStatus\n
    138                       ENDIF
    139          
    140              \Derived{No}
    141          
    142              \Rationale{N/A}
    143          
    144              \Traceability{Primus2P-788}
    145              \endinternal
    146          \n
    147          */
    148          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    149          UINT8FUNC ATA_spiOpenSlaveFlash_C(uint8_t bSpcr, uint8_t bSpsr)
   \                     ATA_spiOpenSlaveFlash_C:
    150          {
    151              int fRetVal = FAIL;
   \   00000000   E021               LDI     R18, 1
    152          
    153              /* LLR-Ref: 005 */
    154              ATA_POWERON_C(PRR0, PRSPI)
   \   00000002   98D0               CBI     0x1A, 0x00
    155              
    156              /* LLR-Ref: 010 */
    157              if (SPCR & BM_SPE)
   \   00000004   B53C               IN      R19, 0x2C
   \   00000006   FF36               SBRS    R19, 6
   \   00000008   C004               RJMP    ??ATA_spiOpenSlaveFlash_C_0
    158              {
    159                  g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_ALREADY_OPENED;
   \   0000000A   E10D               LDI     R16, 29
   \   0000000C   9300....           STS     g_sDebug, R16
   \   00000010   C014               RJMP    ??ATA_spiOpenSlaveFlash_C_1
    160              }
    161              else
    162              {
    163                  EIMSK |= BM_INT0;  //Enable PD1 NSS interrupt
   \                     ??ATA_spiOpenSlaveFlash_C_0:
   \   00000012   B527               IN      R18, 0x27
   \   00000014   6021               ORI     R18, 0x01
   \   00000016   BD27               OUT     0x27, R18
    164                    
    165                  /* LLR-Ref: 020 */
    166                  DDRB &= ~(BM_SPI_MOSI_PIN | BM_SPI_SCK_PIN);
   \   00000018   B124               IN      R18, 0x04
   \   0000001A   732F               ANDI    R18, 0x3F
   \   0000001C   B924               OUT     0x04, R18
    167                  DDRB |= (uint8_t)BM_SPI_MISO_PIN;
   \   0000001E   9A25               SBI     0x04, 0x05
    168                  DDRD &= (uint8_t)~BM_SPI_NSS_PIN;
   \   00000020   9851               CBI     0x0A, 0x01
    169                  PORTD|= BM_SPI_NSS_PIN;  //pull up active
   \   00000022   9A59               SBI     0x0B, 0x01
    170          
    171                  SFIR |= (1<<RIL0);
   \   00000024   91200158           LDS     R18, 344
   \   00000028   6021               ORI     R18, 0x01
   \   0000002A   93200158           STS     344, R18
    172          
    173                  /* LLR-Ref: 040 */
    174                  SPSR  = bSpsr;
   \   0000002E   BD1D               OUT     0x2D, R17
    175                  SPCR  = bSpcr;
   \   00000030   BD0C               OUT     0x2C, R16
    176          
    177                  /* LLR-Ref: 050 */
    178                  g_sSpiConfig.bStatus = BM_SPICONFIG_STATUS_INITIALIZATION_STATUS;
   \   00000032   E800               LDI     R16, 128
   \   00000034   9300....           STS     g_sSpiConfig, R16
    179                  fRetVal = OK;
   \   00000038   E020               LDI     R18, 0
    180              }
    181              return fRetVal;
   \                     ??ATA_spiOpenSlaveFlash_C_1:
   \   0000003A   2F02               MOV     R16, R18
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_PRR0
   \   0000003E                      REQUIRE _A_SPCR
   \   0000003E                      REQUIRE _A_EIMSK
   \   0000003E                      REQUIRE _A_DDRB
   \   0000003E                      REQUIRE _A_DDRD
   \   0000003E                      REQUIRE _A_PORTD
   \   0000003E                      REQUIRE _A_SFIR
   \   0000003E                      REQUIRE _A_SPSR
    182          }
    183          /*---------------------------------------------------------------------------*/
    184          /** \brief <b>ATA_spiCloseSlaveFlash_C</b>
    185              shall disable the SPI interface.
    186          
    187              Variable Usage:
    188              \li [out] ::g_sSpiConfig Global SPI component data
    189          
    190              \image html ATA_spiClose_C.png
    191          
    192              \internal
    193              \li 010: Reset SPCR register setting
    194          
    195              \li 020: Power down SPI interface via PRR0.PRSPI=1
    196          
    197              \li 030: Set output back pins to input
    198          
    199              \li 040: Set SPI status to "NOT INITIALIZED" in ::g_sSpiConfig .bStatus
    200          
    201              \Derived{No}
    202          
    203              \Rationale{N/A}
    204          
    205              \Traceability{Primus2P-958}
    206              \endinternal
    207          \n
    208          */
    209          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    210          VOIDFUNC ATA_spiCloseSlaveFlash_C(void)
   \                     ATA_spiCloseSlaveFlash_C:
    211          {
    212              /* LLR-Ref: 010 */
    213              SPCR = 0U;
   \   00000000   E000               LDI     R16, 0
   \   00000002   BD0C               OUT     0x2C, R16
    214          
    215              /* LLR-Ref: 020 */
    216              ATA_POWEROFF_C(PRR0, PRSPI)
   \   00000004   9AD0               SBI     0x1A, 0x00
    217          
    218              /* LLR-Ref: 030 */
    219              DDRB &= (uint8_t)~(BM_SPI_MOSI_PIN | BM_SPI_MISO_PIN | BM_SPI_SCK_PIN);
   \   00000006   B104               IN      R16, 0x04
   \   00000008   710F               ANDI    R16, 0x1F
   \   0000000A   B904               OUT     0x04, R16
    220              DDRD &= (uint8_t)~(BM_SPI_NSS_PIN);
   \   0000000C   9851               CBI     0x0A, 0x01
    221              
    222              /* LLR-Ref: 040 */
    223              g_sSpiConfig.bStatus &= (uint8_t)~BM_SPICONFIG_STATUS_INITIALIZATION_STATUS;
   \   0000000E   ....               LDI     R30, LOW(g_sSpiConfig)
   \   00000010   ....               LDI     R31, (g_sSpiConfig) >> 8
   \   00000012   8100               LD      R16, Z
   \   00000014   770F               ANDI    R16, 0x7F
   \   00000016   8300               ST      Z, R16
    224          }
   \   00000018   9508               RET
   \   0000001A                      REQUIRE _A_SPCR
   \   0000001A                      REQUIRE _A_PRR0
   \   0000001A                      REQUIRE _A_DDRB
   \   0000001A                      REQUIRE _A_DDRD
    225          /*----------------------------------------------------------------------------- */
    226          /*brief <b>PCINTO Interrupt handler</b>*/
    227                      
    228          /*    The function contains the interrupt vector for the Pin Change interrupts 0-7.
    229              This routine determins the specefic pin that generated the interupt and sets
    230              variables to alert the main loop that a new button press has been detected.*/
    231          #pragma vector=INT0_vect 

   \                                 In  segment CODE, align 2, keep-with-next, root
    232          __interrupt VOIDFUNC ATA_Int0Handler_ISR_flash_C(void)
   \                     ATA_Int0Handler_ISR_flash_C:
    233          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B73F               IN      R19, 0x3F
    234           // ATA_globalsClkSwitchFrc_C();
    235            MCUCR |= (1<<SPIIO); //Disable all but SPI interrupts
   \   0000000E   9A72               SBI     0x0E, 0x02
    236            EIMSK &= ~(BM_INT0); //Disable PD1 NSS interrupt
   \   00000010   B507               IN      R16, 0x27
   \   00000012   7F0E               ANDI    R16, 0xFE
   \   00000014   BD07               OUT     0x27, R16
    237            ATA_spiReceveDataFlash_C();
   \   00000016   ....               RCALL   ATA_spiReceveDataFlash_C
    238            
    239            EIFR = 0x01; //Clear INT0 flag
   \   00000018   E001               LDI     R16, 1
   \   0000001A   BD08               OUT     0x28, R16
    240            MCUCR &= ~(1<<SPIIO); //Disable all but SPI interrupts
   \   0000001C   9872               CBI     0x0E, 0x02
    241            EIMSK |= BM_INT0;  //Enable PD1 NSS interrupt
   \   0000001E   B507               IN      R16, 0x27
   \   00000020   6001               ORI     R16, 0x01
   \   00000022   BD07               OUT     0x27, R16
    242          }
   \   00000024   BF3F               OUT     0x3F, R19
   \   00000026   9109               LD      R16, Y+
   \   00000028   9119               LD      R17, Y+
   \   0000002A   9129               LD      R18, Y+
   \   0000002C   9139               LD      R19, Y+
   \   0000002E   91E9               LD      R30, Y+
   \   00000030   91F9               LD      R31, Y+
   \   00000032   9518               RETI
   \   00000034                      REQUIRE _A_MCUCR
   \   00000034                      REQUIRE _A_EIMSK
   \   00000034                      REQUIRE _A_EIFR

   \                                 In  segment CODE, align 2, keep-with-next, root
    243          VOIDFUNC ATA_spiReceveDataFlash_C(void)
   \                     ATA_spiReceveDataFlash_C:
    244          {
    245            //bit_set(LED1);
    246            uint8_t SpiByteCounter = 0;
   \   00000000   C00C               RJMP    ??ATA_spiReceveDataFlash_C_0
    247            
    248          while (  (PIND & BM_SPI_NSS_PIN) != BM_SPI_NSS_PIN )
    249               {  
    250                  if (  (SPSR & (1<<SPIF))== (1<<SPIF)   ){
   \                     ??ATA_spiReceveDataFlash_C_1:
   \   00000002   B51D               IN      R17, 0x2D
   \   00000004   FF17               SBRS    R17, 7
   \   00000006   C00A               RJMP    ??ATA_spiReceveDataFlash_C_2
    251                  g_SPI_RXbuffer[SpiByteCounter] = SPDR;
   \   00000008   B52E               IN      R18, 0x2E
   \   0000000A   E0F0               LDI     R31, 0
   \   0000000C   2FE0               MOV     R30, R16
   \   0000000E   ....               SUBI    R30, LOW((-(g_SPI_RXbuffer) & 0xFFFF))
   \   00000010   ....               SBCI    R31, (-(g_SPI_RXbuffer) & 0xFFFF) >> 8
   \   00000012   8320               ST      Z, R18
    252                  SpiByteCounter++;
    253                  if (SpiByteCounter>8) SpiByteCounter=0;
   \   00000014   9503               INC     R16
   \   00000016   3009               CPI     R16, 9
   \   00000018   F008               BRCS    ??ATA_spiReceveDataFlash_C_2
   \                     ??ATA_spiReceveDataFlash_C_0:
   \   0000001A   E000               LDI     R16, 0
    254                  }
    255               }
   \                     ??ATA_spiReceveDataFlash_C_2:
   \   0000001C   9B49               SBIS    0x09, 0x01
   \   0000001E   CFF1               RJMP    ??ATA_spiReceveDataFlash_C_1
    256          gFlashApplState.State |= BM_SPI_received_flag;
   \   00000020   ....               LDI     R30, LOW(gFlashApplState)
   \   00000022   ....               LDI     R31, (gFlashApplState) >> 8
   \   00000024   8111               LDD     R17, Z+1
   \   00000026   6011               ORI     R17, 0x01
   \   00000028   8311               STD     Z+1, R17
    257          gFlashApplVars.SPIcount = SpiByteCounter;
   \   0000002A   9300....           STS     (gFlashApplVars + 2), R16
    258          return;  
   \   0000002E   9508               RET
   \   00000030                      REQUIRE _A_SPSR
   \   00000030                      REQUIRE _A_SPDR
   \   00000030                      REQUIRE _A_PIND
    259          }

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??ATA_Int0Handler_ISR_flash_C::??INTVEC 4`:
   \   00000004   ........           JMP     ATA_Int0Handler_ISR_flash_C
    260          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      6      2   ATA_Int0Handler_ISR_flash_C
        6      2   -> ATA_spiReceveDataFlash_C
      0      2   ATA_spiCloseSlaveFlash_C
      0      2   ATA_spiOpenSlaveFlash_C
      0      2   ATA_spiReceveDataFlash_C


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      52  ATA_Int0Handler_ISR_flash_C
       4  ATA_Int0Handler_ISR_flash_C::??INTVEC 4
      26  ATA_spiCloseSlaveFlash_C
      62  ATA_spiOpenSlaveFlash_C
      48  ATA_spiReceveDataFlash_C
       1  _A_DDRB
       1  _A_DDRD
       1  _A_EIFR
       1  _A_EIMSK
       1  _A_MCUCR
       1  _A_PIND
       1  _A_PORTD
       1  _A_PRR0
       1  _A_SFIR
       1  _A_SPCR
       1  _A_SPDR
       1  _A_SPSR
      10  g_SPI_RXbuffer

 
  10 bytes in segment .sram_SPI_RXbuffer
  12 bytes in segment ABSOLUTE
 188 bytes in segment CODE
   4 bytes in segment INTVEC
 
 188 bytes of CODE memory (+  4 bytes shared)
  10 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
