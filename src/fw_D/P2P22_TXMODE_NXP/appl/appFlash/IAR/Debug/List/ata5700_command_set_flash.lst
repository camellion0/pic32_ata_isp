###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           13/May/2020  17:03:17
# Copyright 1996-2017 IAR Systems AB.
# Network license: dvriar01.mchp-main.com (STD)
#
#    Source file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\spi\src\ata5700_command_set_flash.c
#    Command line =  
#        -f C:\Users\C41045\AppData\Local\Temp\EW408.tmp
#        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\spi\src\ata5700_command_set_flash.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
#        -lCN
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        -lA
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 2304 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\ata5700_command_set_flash.lst
#    Object file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj\ata5700_command_set_flash.r90
#
###############################################################################

C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\spi\src\ata5700_command_set_flash.c
      1          //lint -e9059
      2          /******************************************************************************
      3            Use of this software is subject to Microchip's Software License Agreement.
      4          --------------------------------------------------------------------------------
      5            $URL: http://svnservulm.corp.atmel.com/svn/CDB/02_AutoRF/Primus2pSW/Branches/VB_PRIMUS2P_ROM_2.0/firmware/spi/src/ata5700_command_set_flash.c $
      6            $LastChangedRevision: 284056 $
      7            $LastChangedDate: 2014-10-27 15:33:50 +0100 (Mo, 27 Okt 2014) $
      8            $LastChangedBy: florian.schweidler $
      9          -------------------------------------------------------------------------------
     10            Project:      ATA5700
     11            Target MCU:   ATA5700
     12            Compiler:     IAR C/C++ Compiler for AVR 6.30.1
     13          -------------------------------------------------------------------------------
     14          
     15          ******************************************************************************
     16          * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
     17          *                                                                             *
     18          * This software is owned by the Microchip Technology Incorporated.            *
     19          * Microchip hereby grants to licensee a personal                              *
     20          * non-exclusive, non-transferable license to copy, use, modify, create        *
     21          * derivative works of, and compile the Microchip Source Code and derivative   *
     22          * works for the sole and exclusive purpose of creating custom software in     *
     23          * support of licensee product to be used only in conjunction with a Microchip *
     24          * integrated circuit as specified in the applicable agreement. Any            *        
     25          * reproduction, modification, translation, compilation, or representation of  *
     26          * this software except as specified above is prohibited without the express   *
     27          * written permission of Microchip.                                            *
     28          *                                                                             *
     29          * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
     30          * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
     31          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
     32          * Microchip reserves the right to make changes without further notice to the  *
     33          * materials described herein. Microchip does not assume any liability arising *
     34          * out of the application or use of any product or circuit described herein.   *
     35          * Microchip does not authorize its products for use as critical components in *
     36          * life-support systems where a malfunction or failure may reasonably be       *
     37          * expected to result in significant injury to the user. The inclusion of      *
     38          * Microchip products in a life-support systems application implies that the   *
     39          * manufacturer assumes all risk of such use and in doing so indemnifies       *
     40          * Microchip against all charges.                                              *
     41          *                                                                             *
     42          * Use may be limited by and subject to the applicable Microchip software      *
     43          * license agreement.                                                          *
     44          ******************************************************************************/
     45          /** \file ata5700_command_set.c
     46          */
     47          
     48          //lint -restore
     49          
     50          /*===========================================================================*/
     51          /*  INCLUDES (Flash Application)                                             */
     52          /*===========================================================================*/
     53          #include "ata5700_command_set_flash.h"
     54          #include "../../init/src/init_flash.h"
     55          #include "../../lfrx/src/lfrx_flash.h"
     56          #include "../../system/src/system_flash.h"
     57          #include "../../rftx/src/rftx_flash.h"
     58          #include "../../tp/src/tp_flash.h"
     59          
     60          /*===========================================================================*/
     61          /*  INCLUDES (ROM firmware)                                                  */
     62          /*===========================================================================*/
     63          #include "../../calib/src/calib.h"
     64          #include "../../rftx/src/rftx.h"
     65          #include "../../rftx/src/rftx_ant.h"
     66          #include "../../rftx/src/rftx_vco.h"
     67          #include "../../globals/src/globals.h"
     68          #include "../../lfrssi/src/lfrssi.h"
     69          
     70          /*===========================================================================*/
     71          /*  INCLUDES (Flash Module Deliverable)                                      */
     72          /*===========================================================================*/
     73          //#include "../../../appl/appFlash_simTest/src/rfrcc/src/rfrcc_flash.h"
     74          #include "../../../appl/appFlash/src/rfrcc_flash.h"
     75          
     76          /*---------------------------------------------------------------------------*/
     77          /*  DEFINES                                                                  */
     78          /*---------------------------------------------------------------------------*/
     79          
     80          /*---------------------------------------------------------------------------*/
     81          /*  Modul Globals                                                            */
     82          /*---------------------------------------------------------------------------*/
     83          
     84          /* Must be located at SRAM address 0x100 (global 0x300) */
     85          
     86          #pragma location = ".sram_FlashApp_Ata5700CommandSet"

   \                                 In  segment .sram_FlashApp_Ata5700CommandSet, align 1, keep-with-next
     87          __no_init sAta5700 g_sAta5700_flash;
   \                     g_sAta5700_flash:
   \   00000000                      DS8 14
     88          
     89          /** \brief <b>patchSpi</b>
     90              contains a function pointer for a patched SPI command.
     91          */
     92          #pragma location = ".sram_FlashApp_Ata5700CommandSet"

   \                                 In  segment .sram_FlashApp_Ata5700CommandSet, align 1, keep-with-next
     93          __no_init patchSpiFuncPtr patchSpi;
   \                     patchSpi:
   \   00000000                      DS8 2
     94          
     95          /** \brief <b>extReq</b>
     96              contains information for controlling external commands/requests.
     97          */
     98          #pragma location = ".sram_FlashApp_Ata5700CommandSet"

   \                                 In  segment .sram_FlashApp_Ata5700CommandSet, align 1, keep-with-next
     99          __no_init sExtReq extReq;
   \                     extReq:
   \   00000000                      DS8 8
    100          
    101          /** \brief <b>trxConf</b>
    102              contains the transceiver configuration information/setting.
    103          */
    104          #pragma location = ".sram_FlashApp_Ata5700CommandSet"

   \                                 In  segment .sram_FlashApp_Ata5700CommandSet, align 1, keep-with-next
    105          __no_init sTrxConfig trxConf;
   \                     trxConf:
   \   00000000                      DS8 3
    106          
    107          /** \brief <b>g_sRfRemoteKeylessEntryConf</b>
    108              contains the Remote Keyless Entry configuration
    109          */
    110          #pragma location = ".sram_FlashApp_Ata5700CommandSet"

   \                                 In  segment .sram_FlashApp_Ata5700CommandSet, align 1, keep-with-next
    111          __no_init sRfRemoteKeylessEntryConf g_sRfRemoteKeylessEntryConf;
   \                     g_sRfRemoteKeylessEntryConf:
   \   00000000                      DS8 2
    112          
    113          
    114          static VOIDFUNC  ATA_5700systemModeSwitching_flash_C(void);
    115          static VOIDFUNC  ATA_5700rfTxCalibrationRequest_flash_C(void);
    116          static UINT8FUNC ATA_5700convertTrxConf2rfTxConfig_flash_C(void);
    117          static uint8_t* ATA_5700convertTrxConf2rfTxService_flash_C(void);
    118          
    119          /**/
    120          static VOIDFUNC ATA_triggerFrcCalibration_flash_C(void);
    121          static VOIDFUNC ATA_triggerSrcCalibration_flash_C(void);
    122          
    123          
    124          /*---------------------------------------------------------------------------*/
    125          /*  IMPLEMENTATION                                                           */
    126          /*---------------------------------------------------------------------------*/
    127          
    128          /*---------------------------------------------------------------------------*/
    129          /** \brief <b>ATA_5700InitCommandSet_C</b>
    130              does the initialization for ATA5700 SPI
    131          
    132              \Derived no
    133          
    134              \Rationale none
    135          
    136              \Traceability Primus2P-xxx
    137          
    138              \StackUsage SU_XXX bytes
    139          
    140              \image html ATA_5700InitCommandSet_C.png
    141              \image rtf ATA_5700InitCommandSet_C.png
    142              \n
    143          */
    144          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    145          VOIDFUNC ATA_5700InitCommandSet_flash_C()
   \                     ATA_5700InitCommandSet_flash_C:
    146          {
    147              patchSpi = (patchSpiFuncPtr)0x0000;
   \   00000000   E000               LDI     R16, LOW(0)
   \   00000002   ....               LDI     R30, LOW(patchSpi)
   \   00000004   ....               LDI     R31, (patchSpi) >> 8
   \   00000006   8300               ST      Z, R16
   \   00000008   8301               STD     Z+1, R16
    148          
    149              g_sAta5700_flash.events_system           = 0x00U;
   \   0000000A   9300....           STS     g_sAta5700_flash, R16
    150              g_sAta5700_flash.events_wakeup           = 0x00U;
   \   0000000E   9300....           STS     (g_sAta5700_flash + 1), R16
    151              g_sAta5700_flash.events_rf_flags_0       = 0x00U;
   \   00000012   9300....           STS     (g_sAta5700_flash + 2), R16
    152              g_sAta5700_flash.events_rf_flags_1       = 0x00U;
   \   00000016   9300....           STS     (g_sAta5700_flash + 3), R16
    153              g_sAta5700_flash.events_ph_flags_0       = 0x00U;
   \   0000001A   9300....           STS     (g_sAta5700_flash + 4), R16
    154              g_sAta5700_flash.events_ph_flags_1       = 0x00U;
   \   0000001E   9300....           STS     (g_sAta5700_flash + 5), R16
    155              g_sAta5700_flash.events_lf_flags         = 0x00U;
   \   00000022   9300....           STS     (g_sAta5700_flash + 6), R16
    156              g_sAta5700_flash.events_tp_flags         = 0x00U;
   \   00000026   9300....           STS     (g_sAta5700_flash + 7), R16
    157              g_sAta5700_flash.events_components       = 0x00U;
   \   0000002A   9300....           STS     (g_sAta5700_flash + 8), R16
    158              g_sAta5700_flash.events_config           = 0x00U;
   \   0000002E   9300....           STS     (g_sAta5700_flash + 9), R16
    159              g_sAta5700_flash.events_reset            = 0x00U;
   \   00000032   9300....           STS     (g_sAta5700_flash + 10), R16
    160              g_sAta5700_flash.events_pinChangePortB   = 0x00U;
   \   00000036   9300....           STS     (g_sAta5700_flash + 11), R16
    161              g_sAta5700_flash.events_pinChangePortD   = 0x00U;
   \   0000003A   9300....           STS     (g_sAta5700_flash + 12), R16
    162              g_sAta5700_flash.status                  = 0x00U;
   \   0000003E   9300....           STS     (g_sAta5700_flash + 13), R16
    163          
    164              extReq.tuneCheckConfig              = 0U;
   \   00000042   9300....           STS     extReq, R16
    165              extReq.systemModeConfig             = 0U;
   \   00000046   9300....           STS     (extReq + 1), R16
    166              extReq.serviceChannelConfig         = 0U;
   \   0000004A   9300....           STS     (extReq + 2), R16
    167              extReq.serviceInitConfig            = 0U;
   \   0000004E   9300....           STS     (extReq + 3), R16
    168              extReq.miscTrigger                  = 0U;
   \   00000052   9300....           STS     (extReq + 4), R16
    169              extReq.lfrxRftxConfig               = 0U;
   \   00000056   9300....           STS     (extReq + 5), R16
    170              extReq.tpEmModeConfig               = 0U;
   \   0000005A   9300....           STS     (extReq + 6), R16
    171              extReq.rfRemoteKeylessEntryConfig   = 0U;
   \   0000005E   9300....           STS     (extReq + 7), R16
    172          
    173              trxConf.systemModeConfig        = 0x00U;
   \   00000062   9300....           STS     (trxConf + 1), R16
    174              trxConf.serviceChannelConfig    = 0x00U;
   \   00000066   9300....           STS     (trxConf + 2), R16
    175          
    176              g_sRfRemoteKeylessEntryConf.bSecretKeyIdx   = 0x00U;
   \   0000006A   9300....           STS     g_sRfRemoteKeylessEntryConf, R16
    177              g_sRfRemoteKeylessEntryConf.bCmdId          = 0x00U;
   \   0000006E   9300....           STS     (g_sRfRemoteKeylessEntryConf + 1), R16
    178          }
   \   00000072   9508               RET
    179          
    180          /*----------------------------------------------------------------------------- */
    181          /**\brief  <b>ATA_5700CommandRequest_C</b>
    182           */
    183          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next, root
    184          VOIDFUNC ATA_5700CommandRequest_flash_C(void)
   \                     ATA_5700CommandRequest_flash_C:
    185          {
   \   00000000   938A               ST      -Y, R24
    186              // check for command request (internal or external)
    187              if(g_sAta5700_flash.status & BM_ATA5700_STATUS_UPDATE_FLAG)
   \   00000002   9100....           LDS     R16, (g_sAta5700_flash + 13)
   \   00000006   FD07               SBRC    R16, 7
    188              {
    189                  ATA_5700systemModeSwitching_flash_C();
   \   00000008   ....               RCALL   ATA_5700systemModeSwitching_flash_C
    190              }
    191          
    192              if (extReq.tuneCheckConfig)
   \                     ??ATA_5700CommandRequest_flash_C_0:
   \   0000000A   9100....           LDS     R16, extReq
   \   0000000E   2300               TST     R16
   \   00000010   F009               BREQ    ??ATA_5700CommandRequest_flash_C_1
    193              {
    194                  ATA_5700rfTxCalibrationRequest_flash_C();
   \   00000012   ....               RCALL   ATA_5700rfTxCalibrationRequest_flash_C
    195              }
    196          
    197              if (extReq.serviceInitConfig) {
   \                     ??ATA_5700CommandRequest_flash_C_1:
   \   00000014   9100....           LDS     R16, (extReq + 3)
   \   00000018   2300               TST     R16
   \   0000001A   F0E1               BREQ    ??ATA_5700CommandRequest_flash_C_2
    198          
    199                  __disable_interrupt();
   \   0000001C   94F8               CLI
    200                  uint8_t serviceInitConfig = extReq.serviceInitConfig & (~BM_EXT_REQ_SERVICE_INIT_CONFIG_UPDATE_FLAG);
   \   0000001E   9180....           LDS     R24, (extReq + 3)
   \   00000022   778F               ANDI    R24, 0x7F
    201                  extReq.serviceInitConfig = 0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   9300....           STS     (extReq + 3), R16
    202                  __enable_interrupt();
   \   0000002A   9478               SEI
    203          
    204                  /* Get service 0 by default */
    205                  uint16_t eepService  = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer0Ptr_l);
   \   0000002C   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 108))
   \   0000002E   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 108))
   \   00000030   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
    206          
    207                  if (serviceInitConfig >> 1)
   \   00000034   7F8E               ANDI    R24, 0xFE
   \   00000036   F021               BREQ    ??ATA_5700CommandRequest_flash_C_3
    208                  {
    209                      eepService  = ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C((uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l);
   \   00000038   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 110))
   \   0000003A   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
   \   0000003C   ........           CALL    ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
    210                  }
    211          
    212                  if (ATA_eepReadBytes_C((uint8_t *)&g_sSramRfTxServiceConfig,eepService,sizeof(sRfTxServiceChannelConfig)) != EEC_NO_ERROR) {
   \                     ??ATA_5700CommandRequest_flash_C_3:
   \   00000040   E24B               LDI     R20, 43
   \   00000042   0198               MOVW    R19:R18, R17:R16
   \   00000044   ....               LDI     R16, LOW(g_sSramRfTxServiceConfig)
   \   00000046   ....               LDI     R17, (g_sSramRfTxServiceConfig) >> 8
   \   00000048   ........           CALL    ATA_eepReadBytes_C
   \   0000004C   2300               TST     R16
   \   0000004E   F011               BREQ    ??ATA_5700CommandRequest_flash_C_2
    213                      // --GW-TODO-- g_sDebug.bErrorCode    = DEBUG_ERROR_MODULE_TEST + g_sModuleTest_flash.bId;
    214                      // --GW-TODO-- g_sDebug.bSsmErrorCode = g_sModuleTest_flash.bSubId;
    215                      ATA_systemSetSystemError_flash_ASM();
   \   00000050   ........           CALL    ATA_systemSetSystemError_flash_ASM
    216                  }
    217          
    218              }
    219          }
   \                     ??ATA_5700CommandRequest_flash_C_2:
   \   00000054   ....               RJMP    ?Subroutine0
    220          
    221          /*----------------------------------------------------------------------------- */
    222          /**\brief  <b>ATA_5700systemModeSwitching_flash_C</b>
    223           */
    224          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
    225          VOIDFUNC ATA_5700systemModeSwitching_flash_C(void)
   \                     ATA_5700systemModeSwitching_flash_C:
    226          {
   \   00000000   938A               ST      -Y, R24
    227              /* Request is being processed, clear status flag */
    228              g_sAta5700_flash.status &= (uint8_t)~BM_ATA5700_STATUS_UPDATE_FLAG;
   \   00000002   ....               LDI     R30, LOW(g_sAta5700_flash)
   \   00000004   ....               LDI     R31, (g_sAta5700_flash) >> 8
   \   00000006   8505               LDD     R16, Z+13
   \   00000008   770F               ANDI    R16, 0x7F
   \   0000000A   8705               STD     Z+13, R16
    229          
    230              __disable_interrupt();
   \   0000000C   94F8               CLI
    231              trxConf.systemModeConfig     = extReq.systemModeConfig;
   \   0000000E   9100....           LDS     R16, (extReq + 1)
   \   00000012   9300....           STS     (trxConf + 1), R16
    232              extReq.systemModeConfig      = 0U;
   \   00000016   E000               LDI     R16, 0
   \   00000018   9300....           STS     (extReq + 1), R16
    233              trxConf.serviceChannelConfig = (extReq.serviceChannelConfig & 0x3FU);
   \   0000001C   9100....           LDS     R16, (extReq + 2)
   \   00000020   730F               ANDI    R16, 0x3F
   \   00000022   9300....           STS     (trxConf + 2), R16
    234              extReq.serviceChannelConfig  = 0U;
   \   00000026   E000               LDI     R16, 0
   \   00000028   9300....           STS     (extReq + 2), R16
    235              __enable_interrupt();
   \   0000002C   9478               SEI
    236          
    237              uint8_t opm = trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_OPM;
    238          
    239              if (opm == OPM_IDLE)
   \   0000002E   9100....           LDS     R16, (trxConf + 1)
   \   00000032   7003               ANDI    R16, 0x03
   \   00000034   F4A9               BRNE    ??ATA_5700systemModeSwitching_flash_C_0
    240              {
    241                  /* set module RFTX to IDLEMode */
    242                  if (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_ACTIVE) {
   \   00000036   9100....           LDS     R16, (g_sRfTx + 2)
   \   0000003A   FF04               SBRS    R16, 4
   \   0000003C   C002               RJMP    ??ATA_5700systemModeSwitching_flash_C_1
    243                      ATA_rfTxStop_C();
   \   0000003E   ........           CALL    ATA_rfTxStop_C
    244                  }
    245          
    246                  /* Check IdleModeSelector */
    247                  if ( (trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_IDLE_MODE_SELECTOR) >> 3 )
   \                     ??ATA_5700systemModeSwitching_flash_C_1:
   \   00000042   9100....           LDS     R16, (trxConf + 1)
   \   00000046   FF04               SBRS    R16, 4
   \   00000048   C006               RJMP    ??ATA_5700systemModeSwitching_flash_C_2
    248                  {
    249                      /* Select XTO/4 as system clock */
    250                      ATA_globalsActivateXTO_C();
   \   0000004A   ........           CALL    ATA_globalsActivateXTO_C
    251                      ATA_globalsClkSwitchXTO_C(0x07U);
   \   0000004E   E007               LDI     R16, 7
   \   00000050   ........           CALL    ATA_globalsClkSwitchXTO_C
   \   00000054   C00C               RJMP    ??ATA_5700systemModeSwitching_flash_C_3
    252                  }
    253                  else
    254                  {
    255                      /* Clock switch to FRC */
    256                      ATA_globalsClkSwitchFrc_C();
   \                     ??ATA_5700systemModeSwitching_flash_C_2:
   \   00000056   ........           CALL    ATA_globalsClkSwitchFrc_C
    257                      /* disable XTO */
    258                      ATA_globalsDeActivateXTO_C();
   \   0000005A   ........           CALL    ATA_globalsDeActivateXTO_C
   \   0000005E   C007               RJMP    ??ATA_5700systemModeSwitching_flash_C_3
    259                  }
    260              }
    261              else {
    262          
    263                  /**/
    264                  uint8_t config    = ATA_5700convertTrxConf2rfTxConfig_flash_C();
   \                     ??ATA_5700systemModeSwitching_flash_C_0:
   \   00000060   ....               RCALL   ATA_5700convertTrxConf2rfTxConfig_flash_C
   \   00000062   2F80               MOV     R24, R16
    265                  uint8_t *pService = ATA_5700convertTrxConf2rfTxService_flash_C();
   \   00000064   ....               RCALL   ATA_5700convertTrxConf2rfTxService_flash_C
   \   00000066   0198               MOVW    R19:R18, R17:R16
    266          
    267                  /* set module RFTX to TXMode(buffered/transparent) */
    268                  ATA_rfTxStartTx_C(config, pService);
   \   00000068   2F08               MOV     R16, R24
   \   0000006A   ........           CALL    ATA_rfTxStartTx_C
    269              }
    270          }
   \                     ??ATA_5700systemModeSwitching_flash_C_3:
   \   0000006E   ....               RJMP    ?Subroutine0
    271          
    272          /*----------------------------------------------------------------------------- */
    273          /**\brief  <b>ATA_5700rfTxCalibrationRequest_flash_C</b>
    274           */
    275          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
    276          VOIDFUNC ATA_5700rfTxCalibrationRequest_flash_C(void)
   \                     ATA_5700rfTxCalibrationRequest_flash_C:
    277          {
   \   00000000   938A               ST      -Y, R24
    278              __disable_interrupt();
   \   00000002   94F8               CLI
    279              trxConf.tuneCheckConfig = extReq.tuneCheckConfig;
   \   00000004   9100....           LDS     R16, extReq
   \   00000008   9300....           STS     trxConf, R16
    280              extReq.tuneCheckConfig  = 0U;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     extReq, R16
    281              trxConf.serviceChannelConfig = (extReq.serviceChannelConfig & 0x3FU);
   \   00000012   9100....           LDS     R16, (extReq + 2)
   \   00000016   730F               ANDI    R16, 0x3F
   \   00000018   9300....           STS     (trxConf + 2), R16
    282              extReq.serviceChannelConfig  = 0U;
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   9300....           STS     (extReq + 2), R16
    283              __enable_interrupt();
   \   00000022   9478               SEI
    284          
    285              trxConf.systemModeConfig = 0U;
   \   00000024   9300....           STS     (trxConf + 1), R16
    286              uint8_t config    = ATA_5700convertTrxConf2rfTxConfig_flash_C();
   \   00000028   ....               RCALL   ATA_5700convertTrxConf2rfTxConfig_flash_C
   \   0000002A   2F80               MOV     R24, R16
    287              uint8_t *pService = ATA_5700convertTrxConf2rfTxService_flash_C();
   \   0000002C   ....               RCALL   ATA_5700convertTrxConf2rfTxService_flash_C
   \   0000002E   0198               MOVW    R19:R18, R17:R16
    288          
    289              if( trxConf.tuneCheckConfig & BM_TUNE_CHECK_CONFIG_ANTENNA_TUNING )
   \   00000030   9100....           LDS     R16, trxConf
   \   00000034   FF07               SBRS    R16, 7
   \   00000036   C004               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_0
    290              {
    291                  // Antenna tuning
    292                  ATA_rfTxStartAnt_C(config, pService);
   \   00000038   2F08               MOV     R16, R24
   \   0000003A   ........           CALL    ATA_rfTxStartAnt_C
   \   0000003E   C00D               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_1
    293              }
    294              else if (trxConf.tuneCheckConfig & BM_TUNE_CHECK_CONFIG_SRC_CALIB)
   \                     ??ATA_5700rfTxCalibrationRequest_flash_C_0:
   \   00000040   FF05               SBRS    R16, 5
   \   00000042   C002               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_2
    295              {
    296                  // SRC calibration
    297                  ATA_triggerSrcCalibration_flash_C();
   \   00000044   ....               RCALL   ATA_triggerSrcCalibration_flash_C
   \   00000046   C009               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_1
    298          
    299              }
    300              else if (trxConf.tuneCheckConfig & BM_TUNE_CHECK_CONFIG_FRC_CALIB)
   \                     ??ATA_5700rfTxCalibrationRequest_flash_C_2:
   \   00000048   FF04               SBRS    R16, 4
   \   0000004A   C002               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_3
    301              {
    302                  // FRC calibration
    303                  ATA_triggerFrcCalibration_flash_C();
   \   0000004C   ....               RCALL   ATA_triggerFrcCalibration_flash_C
   \   0000004E   C005               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_1
    304              }
    305              else if (trxConf.tuneCheckConfig & BM_TUNE_CHECK_CONFIG_VCO_CALIB)
   \                     ??ATA_5700rfTxCalibrationRequest_flash_C_3:
   \   00000050   FF03               SBRS    R16, 3
   \   00000052   C003               RJMP    ??ATA_5700rfTxCalibrationRequest_flash_C_1
    306              {
    307                  // VCO tuning
    308                  ATA_rfTxStartVco_C(config, pService);
   \   00000054   2F08               MOV     R16, R24
   \   00000056   ........           CALL    ATA_rfTxStartVco_C
    309              }
    310              else {}
    311          }
   \                     ??ATA_5700rfTxCalibrationRequest_flash_C_1:
   \   0000005A                      REQUIRE ?Subroutine0
   \   0000005A                      ;               // Fall through to label ?Subroutine0
    312          
    313          /*----------------------------------------------------------------------------- */
    314          /**\brief  <b>ATA_5700rfTxCalibrationRequest_C</b>
    315              used for conversion from sigmax syntax to primus2p syntax
    316           */
    317          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
    318          UINT8FUNC ATA_5700convertTrxConf2rfTxConfig_flash_C(void)
   \                     ATA_5700convertTrxConf2rfTxConfig_flash_C:
    319          {
    320              uint8_t config = 0x00;
   \   00000000   E000               LDI     R16, 0
    321          
    322              // convert configuration from SIX to P2P
    323              if (trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_ANTENNA_TUNING) {
   \   00000002   9110....           LDS     R17, (trxConf + 1)
   \   00000006   FD16               SBRC    R17, 6
    324                  config |=  BM_RFTXCONFIG_BCONFIG_ANT_TUNING;
   \   00000008   E800               LDI     R16, 128
    325              }
    326          
    327              if (trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_VCO_TUNING) {
   \                     ??ATA_5700convertTrxConf2rfTxConfig_flash_C_0:
   \   0000000A   FD15               SBRC    R17, 5
    328                  config |= BM_RFTXCONFIG_BCONFIG_VCO_TUNING;
   \   0000000C   6400               ORI     R16, 0x40
    329              }
    330          
    331              if (trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_TRANSPARENT_MODE) {
   \                     ??ATA_5700convertTrxConf2rfTxConfig_flash_C_1:
   \   0000000E   FD12               SBRC    R17, 2
    332                  config |=  BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE;
   \   00000010   6200               ORI     R16, 0x20
    333              }
    334          
    335              if (trxConf.systemModeConfig & BM_SYS_MODE_CONFIG_IDLE_MODE_SELECTOR) {
   \                     ??ATA_5700convertTrxConf2rfTxConfig_flash_C_2:
   \   00000012   FD14               SBRC    R17, 4
    336                  config |= BM_RFTXCONFIG_BCONFIG_SHUTDOWN_MODE;
   \   00000014   6100               ORI     R16, 0x10
    337              }
    338          
    339              config |= ((trxConf.serviceChannelConfig & BM_SVC_CH_CONFIG_CH ) >> 4U);
    340          
    341              config |= BM_RFTXCONFIG_BCONFIG_SVC_LOCATION;
    342          
    343              return config;
   \                     ??ATA_5700convertTrxConf2rfTxConfig_flash_C_3:
   \   00000016   9110....           LDS     R17, (trxConf + 2)
   \   0000001A   9512               SWAP    R17
   \   0000001C   7013               ANDI    R17, 0x03
   \   0000001E   2B01               OR      R16, R17
   \   00000020   6008               ORI     R16, 0x08
   \   00000022   9508               RET
    344          
    345          }
    346          
    347          /*----------------------------------------------------------------------------- */
    348          /**\brief  <b>ATA_5700convertTrxConf2rfTxService_C</b>
    349              used for conversion from sigmax syntax to primus2p syntax
    350           */
    351          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next
    352          uint8_t* ATA_5700convertTrxConf2rfTxService_flash_C(void)
   \                     ATA_5700convertTrxConf2rfTxService_flash_C:
    353          {
    354              uint8_t service = trxConf.serviceChannelConfig & BM_SVC_CH_CONFIG_SER;
    355              uint16_t wAddress = 0U;
    356              
    357              if (service == 1)
   \   00000000   9100....           LDS     R16, (trxConf + 2)
   \   00000004   7007               ANDI    R16, 0x07
   \   00000006   3001               CPI     R16, 1
   \   00000008   F419               BRNE    ??ATA_5700convertTrxConf2rfTxService_flash_C_0
    358              {
    359                  /* Get indirect address for RF Tx EEPROM configuration Service 1 */
    360                  wAddress = (uint16_t)&g_sCustomerEEPromSection.eepRfTxSer1Ptr_l;
   \   0000000A   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 110))
   \   0000000C   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 110))
   \   0000000E   C002               RJMP    ??ATA_5700convertTrxConf2rfTxService_flash_C_1
    361              }
    362              else
    363              {
    364                  /* Get indirect address for RF Tx EEPROM configuration Service 0 */
    365                  wAddress = (uint16_t)&g_sCustomerEEPromSection.eepRfTxSer0Ptr_l;
   \                     ??ATA_5700convertTrxConf2rfTxService_flash_C_0:
   \   00000010   ....               LDI     R16, LOW((g_sCustomerEEPromSection + 108))
   \   00000012   ....               LDI     R17, HIGH((g_sCustomerEEPromSection + 108))
    366              }
    367              
    368              uint8_t *pService = (uint8_t*)ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C(wAddress);
    369          
    370              return pService;
   \                     ??ATA_5700convertTrxConf2rfTxService_flash_C_1:
   \   00000014   ........           JMP     ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
    371          }
    372          
    373          
    374          /*----------------------------------------------------------------------------- */
    375          /** \brief <b>ATA_triggerFrcCalibration_C</b>
    376              triggers FRC calibration feature.
    377          
    378              \return none
    379          
    380              \image html ATA_triggerFrcCalibration_C.png
    381              \image rtf ATA_triggerFrcCalibration_C.png
    382              \n
    383          */
    384          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
    385          static VOIDFUNC ATA_triggerFrcCalibration_flash_C(void)
   \                     ATA_triggerFrcCalibration_flash_C:
    386          {
    387              /* indicates a calibration process is ongoing */
    388              g_sAta5700_flash.status |= BM_ATA5700_STATUS_FRC_CALIB_IN_PROGRESS_FLAG;
   \   00000000   ....               LDI     R30, LOW(g_sAta5700_flash)
   \   00000002   ....               LDI     R31, (g_sAta5700_flash) >> 8
   \   00000004   8505               LDD     R16, Z+13
   \   00000006   6100               ORI     R16, 0x10
   \   00000008   8705               STD     Z+13, R16
    389          
    390              /* Do FRC calibration */
    391              ATA_calibInit_C();
   \   0000000A   ........           CALL    ATA_calibInit_C
    392          
    393              if ((g_sCalibConfig.bFlags & BM_CALIB_CONFIG_FLAGS_ERROR) == 0x00U)
   \   0000000E   9100....           LDS     R16, g_sCalibConfig
   \   00000012   FD07               SBRC    R16, 7
   \   00000014   C010               RJMP    ??ATA_triggerFrcCalibration_flash_C_0
    394              {
    395                  ATA_calibStartCalibration_C(BM_CALIB_CONFIG_SRC_FRC_CALIBRATION_ENABLE_FRC);
   \   00000016   E800               LDI     R16, 128
   \   00000018   ........           CALL    ATA_calibStartCalibration_C
    396          
    397                  /* Shutdown XTO and AVCC and switch to FRC as default clock. */
    398                  // ATA_shutDownFe_C();
    399          
    400                  trxConf.tuneCheckConfig &= (uint8_t)~BM_TUNE_CHECK_CONFIG_FRC_CALIB;
   \   0000001C   ....               LDI     R30, LOW(trxConf)
   \   0000001E   ....               LDI     R31, (trxConf) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   7E0F               ANDI    R16, 0xEF
   \   00000024   8300               ST      Z, R16
    401                  g_sAta5700_flash.status &= (uint8_t)~BM_ATA5700_STATUS_FRC_CALIB_IN_PROGRESS_FLAG;
   \   00000026   ....               LDI     R30, LOW(g_sAta5700_flash)
   \   00000028   ....               LDI     R31, (g_sAta5700_flash) >> 8
   \   0000002A   8505               LDD     R16, Z+13
   \   0000002C   7E0F               ANDI    R16, 0xEF
   \   0000002E   8705               STD     Z+13, R16
    402          
    403                  g_sAta5700_flash.events_rf_flags_1 |= BM_ATA5700_EVENTS_RFFLAGS_FRC_CALIB_RDY;
   \   00000030   8103               LDD     R16, Z+3
   \   00000032   6200               ORI     R16, 0x20
   \   00000034   8303               STD     Z+3, R16
    404              }
    405          }
   \                     ??ATA_triggerFrcCalibration_flash_C_0:
   \   00000036   9508               RET
    406          
    407          
    408          /*----------------------------------------------------------------------------- */
    409          /** \brief <b>ATA_triggerSrcCalibration_C</b>
    410              triggers SRC calibration feature.
    411          
    412              \return none
    413          
    414              \image html ATA_triggerSrcCalibration_C.png
    415              \image rtf ATA_triggerSrcCalibration_C.png
    416              \n
    417          */
    418          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
    419          static VOIDFUNC ATA_triggerSrcCalibration_flash_C(void)
   \                     ATA_triggerSrcCalibration_flash_C:
    420          {
    421              /* indicates a calibration process is ongoing */
    422              g_sAta5700_flash.status |= BM_ATA5700_STATUS_SRC_CALIB_IN_PROGRESS_FLAG;
   \   00000000   ....               LDI     R30, LOW(g_sAta5700_flash)
   \   00000002   ....               LDI     R31, (g_sAta5700_flash) >> 8
   \   00000004   8505               LDD     R16, Z+13
   \   00000006   6008               ORI     R16, 0x08
   \   00000008   8705               STD     Z+13, R16
    423          
    424              /* Do SRC calibration */
    425              ATA_calibInit_C();
   \   0000000A   ........           CALL    ATA_calibInit_C
    426          
    427              if ((g_sCalibConfig.bFlags & BM_CALIB_CONFIG_FLAGS_ERROR) == 0x00U)
   \   0000000E   9100....           LDS     R16, g_sCalibConfig
   \   00000012   FD07               SBRC    R16, 7
   \   00000014   C010               RJMP    ??ATA_triggerSrcCalibration_flash_C_0
    428              {
    429                  ATA_calibStartCalibration_C(BM_CALIB_CONFIG_SRC_FRC_CALIBRATION_ENABLE_SRC);
   \   00000016   E400               LDI     R16, 64
   \   00000018   ........           CALL    ATA_calibStartCalibration_C
    430          
    431                  /* Shutdown XTO and AVCC and switch to FRC as default clock. */
    432                  // ATA_shutDownFe_C();
    433          
    434                  trxConf.tuneCheckConfig &= (uint8_t)~BM_TUNE_CHECK_CONFIG_SRC_CALIB;
   \   0000001C   ....               LDI     R30, LOW(trxConf)
   \   0000001E   ....               LDI     R31, (trxConf) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   7D0F               ANDI    R16, 0xDF
   \   00000024   8300               ST      Z, R16
    435                  g_sAta5700_flash.status &= (uint8_t)~BM_ATA5700_STATUS_SRC_CALIB_IN_PROGRESS_FLAG;
   \   00000026   ....               LDI     R30, LOW(g_sAta5700_flash)
   \   00000028   ....               LDI     R31, (g_sAta5700_flash) >> 8
   \   0000002A   8505               LDD     R16, Z+13
   \   0000002C   7F07               ANDI    R16, 0xF7
   \   0000002E   8705               STD     Z+13, R16
    436          
    437                  g_sAta5700_flash.events_rf_flags_1 |= BM_ATA5700_EVENTS_RFFLAGS_SRC_CALIB_RDY;
   \   00000030   8103               LDD     R16, Z+3
   \   00000032   6100               ORI     R16, 0x10
   \   00000034   8303               STD     Z+3, R16
    438              }
    439          }
   \                     ??ATA_triggerSrcCalibration_flash_C_0:
   \   00000036   9508               RET
    440          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      1      2   ATA_5700CommandRequest_flash_C
        1      2   -> ATA_5700rfTxCalibrationRequest_flash_C
        1      2   -> ATA_5700systemModeSwitching_flash_C
        1      2   -> ATA_eepReadBytes_C
        1      2   -> ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
        1      2   -> ATA_systemSetSystemError_flash_ASM
      0      2   ATA_5700InitCommandSet_flash_C
      0      2   ATA_5700convertTrxConf2rfTxConfig_flash_C
      0      2   ATA_5700convertTrxConf2rfTxService_flash_C
        0      2   -> ATA_rfTxGetIndirectEEPromServiceConfigAddr_flash_C
      1      2   ATA_5700rfTxCalibrationRequest_flash_C
        1      2   -> ATA_5700convertTrxConf2rfTxConfig_flash_C
        1      2   -> ATA_5700convertTrxConf2rfTxService_flash_C
        1      2   -> ATA_rfTxStartAnt_C
        1      2   -> ATA_rfTxStartVco_C
        1      2   -> ATA_triggerFrcCalibration_flash_C
        1      2   -> ATA_triggerSrcCalibration_flash_C
      1      2   ATA_5700systemModeSwitching_flash_C
        1      2   -> ATA_5700convertTrxConf2rfTxConfig_flash_C
        1      2   -> ATA_5700convertTrxConf2rfTxService_flash_C
        1      2   -> ATA_globalsActivateXTO_C
        1      2   -> ATA_globalsClkSwitchFrc_C
        1      2   -> ATA_globalsClkSwitchXTO_C
        1      2   -> ATA_globalsDeActivateXTO_C
        1      2   -> ATA_rfTxStartTx_C
        1      2   -> ATA_rfTxStop_C
      0      2   ATA_triggerFrcCalibration_flash_C
        0      2   -> ATA_calibInit_C
        0      2   -> ATA_calibStartCalibration_C
      0      2   ATA_triggerSrcCalibration_flash_C
        0      2   -> ATA_calibInit_C
        0      2   -> ATA_calibStartCalibration_C


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?Subroutine0
      86  ATA_5700CommandRequest_flash_C
     116  ATA_5700InitCommandSet_flash_C
      36  ATA_5700convertTrxConf2rfTxConfig_flash_C
      24  ATA_5700convertTrxConf2rfTxService_flash_C
      90  ATA_5700rfTxCalibrationRequest_flash_C
     112  ATA_5700systemModeSwitching_flash_C
      56  ATA_triggerFrcCalibration_flash_C
      56  ATA_triggerSrcCalibration_flash_C
       8  extReq
      14  g_sAta5700_flash
       2  g_sRfRemoteKeylessEntryConf
       2  patchSpi
       3  trxConf

 
  29 bytes in segment .sram_FlashApp_Ata5700CommandSet
 580 bytes in segment CODE
 
 580 bytes of CODE memory
  29 bytes of DATA memory

Errors: none
Warnings: none
