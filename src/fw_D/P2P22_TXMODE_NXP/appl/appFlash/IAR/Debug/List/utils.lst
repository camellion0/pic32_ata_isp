###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           13/May/2020  17:03:25
# Copyright 1996-2017 IAR Systems AB.
# Network license: dvriar01.mchp-main.com (STD)
#
#    Source file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
#    Command line =  
#        -f C:\Users\C41045\AppData\Local\Temp\EW23BC.tmp
#        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
#        -lCN
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        -lA
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 2304 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\utils.lst
#    Object file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj\utils.r90
#
###############################################################################

C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\utils.c
      1          //==============================================================================
      2          // Function Implementation
      3          //==============================================================================
      4          
      5          
      6          /*******************************************************************************
      7          * Copyright (c) 2013 Atmel Corporation. All rights reserved.
      8          *
      9          * Redistribution and use in source and binary forms, with or without
     10          * modification, are permitted provided that the following conditions are met:
     11          *
     12          * 1. Redistributions of source code must retain the above copyright notice,
     13          *    this list of conditions and the following disclaimer.
     14          *
     15          * 2. Redistributions in binary form must reproduce the above copyright notice,
     16          *    this list of conditions and the following disclaimer in the documentation
     17          *    and/or other materials provided with the distribution.
     18          *
     19          * 3. The name of Atmel may not be used to endorse or promote products derived
     20          *    from this software without specific prior written permission.
     21          *
     22          * 4. This software may only be redistributed and used in connection with an
     23          *    Atmel microcontroller product.
     24          *
     25          * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
     26          * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     27          * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     28          * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
     29          * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     30          * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
     31          * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
     32          * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
     33          * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
     34          * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     35          * POSSIBILITY OF SUCH DAMAGE.
     36          *
     37          *******************************************************************************/
     38          /*******************************************************************************
     39          * File Name    : (utils.c)
     40          * Version      : (2.0)
     41          * Device(s)    : 
     42          * OS           : (if applicable)
     43          * H/W Platform : (if applicable)
     44          * Description  : (brief description of what is in the file)
     45          *
     46          * $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/utils.c $
     47          * $LastChangedRevision: 443672 $
     48          * $LastChangedDate: 2017-01-23 01:58:06 -0700 (Mon, 23 Jan 2017) $
     49          * $LastChangedBy: krishna.balan $
     50          *******************************************************************************/
     51          
     52          //==============================================================================
     53          //  Local Include
     54          //==============================================================================
     55          #include "utils.h"
     56          
     57          //==============================================================================
     58          //  Local defines
     59          //==============================================================================
     60          //! CRC generator polynomial.
     61          #define POLYNOMIAL      0x1021 // CRC-16 CCITT standard.
     62          #define WIDTH           (8 * 2)
     63          #define TOPBIT          (1 << (WIDTH - 1))
     64          //==============================================================================
     65          // Local Macro
     66          //==============================================================================
     67          
     68          //==============================================================================
     69          // Local Types
     70          //==============================================================================
     71          
     72          //==============================================================================
     73          // Public Variables
     74          //==============================================================================
     75          
     76          /**
     77           * \brief Memory Copy
     78           *        Copy a RAM buffer to another
     79           *
     80           * \param[in] lpub_dst destination buffer
     81           * \param[in] lpub_src source buffer
     82           * \param[in] lub_length number of bytes to copy
     83           *
     84           * \return void
     85           */

   \                                 In  segment CODE, align 2, keep-with-next
     86          void memory_copy(uint8_t* lpub_dst, uint8_t* lpub_src, uint8_t lub_length)
   \                     memory_copy:
     87          {
   \   00000000   C007               RJMP    ??memory_copy_0
     88            while (lub_length)
     89            {
     90              /* Copy byte by byte */
     91              lub_length--;
   \                     ??memory_copy_1:
   \   00000002   954A               DEC     R20
     92              *lpub_dst++ = *lpub_src++;
   \   00000004   01F9               MOVW    R31:R30, R19:R18
   \   00000006   9151               LD      R21, Z+
   \   00000008   019F               MOVW    R19:R18, R31:R30
   \   0000000A   01F8               MOVW    R31:R30, R17:R16
   \   0000000C   9351               ST      Z+, R21
   \   0000000E   018F               MOVW    R17:R16, R31:R30
     93            }
   \                     ??memory_copy_0:
   \   00000010   2344               TST     R20
   \   00000012   F7B9               BRNE    ??memory_copy_1
     94          }
   \   00000014   9508               RET
     95          
     96          
     97          /**
     98           * \brief Memory Copy const
     99           *        Copy contetnt stored in Flash to a RAM buffer
    100           *
    101           * \param[in] lpub_dst destination buffer
    102           * \param[in] lpub_src source adress in flash
    103           * \param[in] lub_length number of bytes to copy
    104           *
    105           * \return void
    106           */

   \                                 In  segment CODE, align 2, keep-with-next
    107          void memory_copy_const(uint8_t* lpub_dst, const uint8_t* lpub_src, uint8_t lub_length)
   \                     memory_copy_const:
    108          {
   \   00000000   C006               RJMP    ??memory_copy_const_0
    109            while (lub_length--)
    110            {
    111              /* Copy byte by byte */
    112              *lpub_dst++ = *lpub_src++;
   \                     ??memory_copy_const_1:
   \   00000002   01F9               MOVW    R31:R30, R19:R18
   \   00000004   9151               LD      R21, Z+
   \   00000006   019F               MOVW    R19:R18, R31:R30
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   9351               ST      Z+, R21
   \   0000000C   018F               MOVW    R17:R16, R31:R30
    113            }
   \                     ??memory_copy_const_0:
   \   0000000E   2F54               MOV     R21, R20
   \   00000010   954A               DEC     R20
   \   00000012   2355               TST     R21
   \   00000014   F7B1               BRNE    ??memory_copy_const_1
    114          }
   \   00000016   9508               RET
    115          
    116          /**
    117           * \brief Memory Set
    118           *        Initializa all bytes of a buffer to a desired value
    119           *
    120           * \param[in] lpub_dst Buffer to set
    121           * \param[in] lub_value initialization value
    122           * \param[in] lub_length Number of bytes to set
    123           *
    124           * \return void
    125           */

   \                                 In  segment CODE, align 2, keep-with-next
    126          void memory_set(uint8_t* lpub_dst, uint8_t lub_value, uint8_t lub_length)
   \                     memory_set:
    127          {
   \   00000000   E050               LDI     R21, 0
   \   00000002   C005               RJMP    ??memory_set_0
    128            while (lub_length)
    129            {
    130              /* Copy byte by byte */
    131              lub_length--;
    132              lpub_dst[lub_length] = lub_value;
   \                     ??memory_set_1:
   \   00000004   953A               DEC     R19
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   0FE3               ADD     R30, R19
   \   0000000A   1FF5               ADC     R31, R21
   \   0000000C   8320               ST      Z, R18
    133            }
   \                     ??memory_set_0:
   \   0000000E   2333               TST     R19
   \   00000010   F7C9               BRNE    ??memory_set_1
    134          }
   \   00000012   9508               RET
    135          
    136          
    137          /**
    138           * \brief Memory Compare
    139           *        Comapre two buffers
    140           *
    141           * \param[in] lpub_src1  address of buffer 1
    142           * \param[in] lpub_src2  address of buffer 2
    143           * \param[in] lub_length number of bytes to compare
    144           *
    145           * \return TRUE if comapre match, FALSE otherwise
    146           */

   \                                 In  segment CODE, align 2, keep-with-next
    147          bool memory_compare(uint8_t* lpub_src1, uint8_t* lpub_src2, uint8_t lub_length)
   \                     memory_compare:
   \                     ??memory_compare_0:
    148          {
    149            while (lub_length)
   \   00000000   2344               TST     R20
   \   00000002   F069               BREQ    ??memory_compare_1
    150            {
    151              /* Copy byte by byte */
    152              lub_length--;
   \   00000004   954A               DEC     R20
    153              if (lpub_src1[lub_length] != lpub_src2[lub_length])
   \   00000006   E050               LDI     R21, 0
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   0FE4               ADD     R30, R20
   \   0000000C   1FF5               ADC     R31, R21
   \   0000000E   8160               LD      R22, Z
   \   00000010   01F9               MOVW    R31:R30, R19:R18
   \   00000012   0FE4               ADD     R30, R20
   \   00000014   1FF5               ADC     R31, R21
   \   00000016   8150               LD      R21, Z
   \   00000018   1765               CP      R22, R21
   \   0000001A   F391               BREQ    ??memory_compare_0
    154              {
    155                return FALSE;
   \   0000001C   ....               RJMP    ?Subroutine1
    156              }
    157            }
    158            return TRUE;
   \                     ??memory_compare_1:
   \   0000001E   ....               RJMP    ?Subroutine0
    159          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E001               LDI     R16, 1
   \   00000002   9508               RET
    160          
    161          /**
    162           * \brief Memory Compare const
    163           *        Comapre a buffer to values stored in Flash
    164           *
    165           * \param[in] lpub_src1  address of RAM buffer
    166           * \param[in] lpub_src2  address of Falsh data
    167           * \param[in] lub_length number of bytes to compare
    168           *
    169           * \return TRUE if comapre match, FALSE otherwise
    170           */

   \                                 In  segment CODE, align 2, keep-with-next
    171          bool memory_compare_const(uint8_t* lpub_src1,
   \                     memory_compare_const:
   \                     ??memory_compare_const_0:
    172                                       const uint8_t* lpub_src2,                            
    173                                       uint8_t lub_length)
    174          {
    175            while (lub_length--)
   \   00000000   2F54               MOV     R21, R20
   \   00000002   954A               DEC     R20
   \   00000004   2355               TST     R21
   \   00000006   F049               BREQ    ??memory_compare_const_1
    176            {
    177              /* Copy byte by byte */
    178              if (*lpub_src1++ != (*lpub_src2++))
   \   00000008   01F8               MOVW    R31:R30, R17:R16
   \   0000000A   9151               LD      R21, Z+
   \   0000000C   018F               MOVW    R17:R16, R31:R30
   \   0000000E   01F9               MOVW    R31:R30, R19:R18
   \   00000010   9161               LD      R22, Z+
   \   00000012   019F               MOVW    R19:R18, R31:R30
   \   00000014   1756               CP      R21, R22
   \   00000016   F3A1               BREQ    ??memory_compare_const_0
    179              {
    180                return FALSE;
   \   00000018   ....               RJMP    ?Subroutine1
    181              }
    182            }
    183            return TRUE;
   \                     ??memory_compare_const_1:
   \   0000001A   ....               RJMP    ?Subroutine0
    184          }
    185          
    186          /**
    187           * \brief Calculates the 16-bit CRC of the given value
    188           *
    189           * \param[in] data_ptr  address of the data array
    190           * \param[in] length    number of bytes in the data array
    191           *
    192           * \return CRC_VALUE - 16-bit CRC value.
    193           */

   \                                 In  segment CODE, align 2, keep-with-next
    194          uint16_t calcCRC16(uint8_t const message[], uint8_t length)
   \                     calcCRC16:
    195          {
    196              uint16_t remainder = 0xFFFF;	
   \   00000000   EF6F               LDI     R22, 255
   \   00000002   EF7F               LDI     R23, 255
    197              
    198              // Perform modulo-2 division, a byte at a time.
    199              for (uint8_t byte = 0; byte < length; ++byte)
   \   00000004   E040               LDI     R20, 0
   \   00000006   C003               RJMP    ??calcCRC16_0
    200              {
    201                  // Bring the next byte into the remainder.
    202                  remainder ^= (message[byte] << (WIDTH - 8));
    203                  
    204                  // Perform modulo-2 division, a bit at a time.
    205                  for (uint8_t bit = 8; bit > 0; --bit)
    206                  {
    207                      //Try to divide the current data bit.
    208                      if (remainder & (uint16_t)TOPBIT)
    209                      {
    210                          remainder = (remainder << 1) ^ POLYNOMIAL;
    211                      }
    212                      else
    213                      {
    214                          remainder = (remainder << 1);
   \                     ??calcCRC16_1:
   \   00000008   953A               DEC     R19
   \   0000000A   F451               BRNE    ??calcCRC16_2
   \   0000000C   9543               INC     R20
   \                     ??calcCRC16_0:
   \   0000000E   1742               CP      R20, R18
   \   00000010   F480               BRCC    ??calcCRC16_3
   \   00000012   E050               LDI     R21, 0
   \   00000014   01F8               MOVW    R31:R30, R17:R16
   \   00000016   0FE4               ADD     R30, R20
   \   00000018   1FF5               ADC     R31, R21
   \   0000001A   8010               LD      R1, Z
   \   0000001C   2571               EOR     R23, R1
   \   0000001E   E038               LDI     R19, 8
   \                     ??calcCRC16_2:
   \   00000020   FB77               BST     R23, 7
   \   00000022   0F66               LSL     R22
   \   00000024   1F77               ROL     R23
   \   00000026   F786               BRTC    ??calcCRC16_1
   \   00000028   E251               LDI     R21, 33
   \   0000002A   2765               EOR     R22, R21
   \   0000002C   E150               LDI     R21, 16
   \   0000002E   2775               EOR     R23, R21
   \   00000030   CFEB               RJMP    ??calcCRC16_1
    215                      }
    216                  }
    217              }
    218          
    219              // The final remainder is the CRC result.
    220              return (remainder);
   \                     ??calcCRC16_3:
   \   00000032   018B               MOVW    R17:R16, R23:R22
   \   00000034   9508               RET
    221          }

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   calcCRC16
      2   memory_compare
      2   memory_compare_const
      2   memory_copy
      2   memory_copy_const
      2   memory_set


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?Subroutine0
       4  ?Subroutine1
      54  calcCRC16
      32  memory_compare
      28  memory_compare_const
      22  memory_copy
      24  memory_copy_const
      20  memory_set

 
 188 bytes in segment CODE
 
 188 bytes of CODE memory

Errors: none
Warnings: none
