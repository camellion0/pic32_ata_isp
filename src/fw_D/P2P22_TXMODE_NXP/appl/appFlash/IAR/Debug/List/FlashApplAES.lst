###############################################################################
#
# IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR           13/May/2020  17:03:18
# Copyright 1996-2017 IAR Systems AB.
# Network license: dvriar01.mchp-main.com (STD)
#
#    Source file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
#    Command line =  
#        -f C:\Users\C41045\AppData\Local\Temp\EW802.tmp
#        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
#        -lCN
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        -lA
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
#        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
#        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
#        --eeprom_size 2304 --clib -Ohz)
#    Locale       =  English_USA.1252
#    List file    =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplAES.lst
#    Object file  =  
#        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj\FlashApplAES.r90
#
###############################################################################

C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplAES.c
      1          /******************************************************************************
      2            Use of this software is subject to Microchip's Software License Agreement.
      3          --------------------------------------------------------------------------------
      4            $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/GR_inwork/appl/appFlash/src/FlashIrq.c $
      5            $LastChangedRevision: 328482 $
      6            $LastChangedDate: 2015-07-22 13:17:23 -0600 (Wed, 22 Jul 2015) $
      7            $LastChangedBy: grueter $
      8          -------------------------------------------------------------------------------
      9            Project:      ATA5700
     10            Target MCU:   ATA5700
     11            Compiler:     IAR C/C++ Compiler for AVR 5.51.0
     12          -------------------------------------------------------------------------------
     13          
     14          ******************************************************************************
     15          * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
     16          *                                                                             *
     17          * This software is owned by the Microchip Technology Incorporated.            *
     18          * Microchip hereby grants to licensee a personal                              *
     19          * non-exclusive, non-transferable license to copy, use, modify, create        *
     20          * derivative works of, and compile the Microchip Source Code and derivative   *
     21          * works for the sole and exclusive purpose of creating custom software in     *
     22          * support of licensee product to be used only in conjunction with a Microchip *
     23          * integrated circuit as specified in the applicable agreement. Any            *        
     24          * reproduction, modification, translation, compilation, or representation of  *
     25          * this software except as specified above is prohibited without the express   *
     26          * written permission of Microchip.                                            *
     27          *                                                                             *
     28          * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
     29          * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
     30          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
     31          * Microchip reserves the right to make changes without further notice to the  *
     32          * materials described herein. Microchip does not assume any liability arising *
     33          * out of the application or use of any product or circuit described herein.   *
     34          * Microchip does not authorize its products for use as critical components in *
     35          * life-support systems where a malfunction or failure may reasonably be       *
     36          * expected to result in significant injury to the user. The inclusion of      *
     37          * Microchip products in a life-support systems application implies that the   *
     38          * manufacturer assumes all risk of such use and in doing so indemnifies       *
     39          * Microchip against all charges.                                              *
     40          *                                                                             *
     41          * Use may be limited by and subject to the applicable Microchip software      *
     42          * license agreement.                                                          *
     43          ******************************************************************************/
     44          
     45          /** \file FlashApplAES.c
     46              this file contains an ATA5700 Flash application software
     47          */
     48          
     49          /*===========================================================================*/
     50          /*  INCLUDES                                                                 */
     51          /*===========================================================================*/
     52          
     53          #include <string.h>
     54          #include "../../../firmware/init/src/init.h"
     55          #include "../../../firmware/rftx/src/rftx.h"
     56          #include "../../../firmware/lfrx/src/lfrx.h"
     57          #include "../../../firmware/spi/src/ata5700_command_set.h"
     58          #include "../../../firmware/stdc/src/ioATA5700.h"
     59          #include "../../../firmware/aes/src/aes.h"
     60          #include "../../../firmware/init/src/init_flash.h"
     61          #include "../../../firmware/system/src/system_flash.h"
     62          #include "../../../firmware/timer1/src/timer1.h"
     63          #include "../../../firmware/timer5/src/timer5_flash.h"
     64          #include "../../../firmware/globals/src/globals.h"
     65          #include "../../../firmware/lfrx/src/lfrx_flash.h"
     66          #include "../../../firmware/tp/src/tp_flash.h"
     67          #include "../../../firmware/extif/src/extif_flash.h"
     68          #include "../../../firmware/lfrssi/src/lfrssi.h"
     69          #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
     70          #include "../../../firmware/calib/src/calib.h"
     71          #include "../../../firmware/aes/src/aes.h"
     72          #include "FlashApplVars.h"
     73          
     74          /*===========================================================================*/
     75          /*  DEFINES                                                                  */
     76          /*===========================================================================*/
     77          
     78          #define ATA_DEFAULT_CONFIG_VAL            (AES_CONFIG_BM_CRYPTO_MODULE_RESET)
     79          
     80          #define DATABLOCK_4_AES_MAX_LEN_BITS      0x80U   /* maximum length of data block to encrypt is 128 bits */
     81          #define DATABLOCK_4_AES_MAX_LEN_BYTES     0x10U   /* maximum length of data block to encrypt is 16 bytes */
     82          #define DATABLOCK_4_AES_PAD_INFO          0x80U   /* padding information */
     83          #define DATABLOCK_4_AES_PAD_INFO_OFFSET   0x09U   /* offset to the beginning of padding information */
     84          #define DATABLOCK_4_AES_PAD_INFO_LENGTH   0x01U   /* length of padding information in bytes */
     85          #define DATABLOCK_4_AES_PAD_ZERO_OFFSET   (DATABLOCK_4_AES_PAD_OFFSET + DATABLOCK_4_AES_PAD_INFO_LENGTH)    /* offset to the beginning with zero(s) */
     86          #define DATABLOCK_4_AES_PAD_ZERO_LENGTH   (DATABLOCK_4_AES_MAX_LEN_BYTES - DATABLOCK_4_AES_PAD_ZERO_OFFSET) /* length of padding info */
     87          #define DATABLOCK_4_AES_PAD_OFFSET        0x09U   /* offset to the beginning of byte padding within data block to encrypt including padding information byte */
     88          #define DATABLOCK_4_AES_PAD_LENGTH        (DATABLOCK_4_AES_MAX_LEN_BYTES - DATABLOCK_4_AES_PAD_OFFSET)      /* number of padding bytes within data block to encrypt */
     89          /*===========================================================================*/
     90          /*  Modul Globals                                                             */
     91          /*===========================================================================*/
     92          
     93          extern sFlashApplState gFlashApplState;
     94          extern sFlashApplVars gFlashApplVars;
     95          
     96          /*===========================================================================*/
     97          /*  IMPLEMENTATION                                                           */
     98          /*===========================================================================*/
     99          
    100          /*--------------------------------------------------------------------------- */
    101          /*brief <b>ToDo AES function*/
    102                      
    103          /*    The function contains ---                                               */
    104           
    105          /*----------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
    106          void ATA_FlashAppMsgEncrypt(uint8_t* aesMsg, uint8_t msgLength, uint8_t bSecretKeyGroup, uint8_t bKeyId)
   \                     ATA_FlashAppMsgEncrypt:
    107          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   2FA2               MOV     R26, R18
   \   00000008   2F24               MOV     R18, R20
    108            
    109            if (msgLength > DATABLOCK_4_AES_MAX_LEN_BYTES) {
   \   0000000A   31A1               CPI     R26, 17
   \   0000000C   F518               BRCC    ??ATA_FlashAppMsgEncrypt_0
    110              // Error invalid length
    111              return;
    112            }
    113            
    114            ATA_aesSetConfig_C(bSecretKeyGroup, ATA_DEFAULT_CONFIG_VAL , bKeyId);
   \   0000000E   E210               LDI     R17, 32
   \   00000010   2F03               MOV     R16, R19
   \   00000012   ........           CALL    ATA_aesSetConfig_C
    115            
    116            memcpy(g_sAesComponentData.bDataBuffer, aesMsg, msgLength);
   \   00000016   2F4A               MOV     R20, R26
   \   00000018   E050               LDI     R21, 0
   \   0000001A   019C               MOVW    R19:R18, R25:R24
   \   0000001C   ....               LDI     R16, LOW((g_sAesComponentData + 4))
   \   0000001E   ....               LDI     R17, HIGH((g_sAesComponentData + 4))
   \   00000020   ........           CALL    memcpy
    117               
    118            if (msgLength < DATABLOCK_4_AES_MAX_LEN_BYTES) {
   \   00000024   31A0               CPI     R26, 16
   \   00000026   F448               BRCC    ??ATA_FlashAppMsgEncrypt_1
    119              // Pad with Zeroes
    120              ATA_globalsInitSramSpace_C( &g_sAesComponentData.bDataBuffer[msgLength], DATABLOCK_4_AES_MAX_LEN_BYTES - msgLength);
   \   00000028   E120               LDI     R18, 16
   \   0000002A   1B2A               SUB     R18, R26
   \   0000002C   ....               LDI     R16, LOW((g_sAesComponentData + 4))
   \   0000002E   ....               LDI     R17, HIGH((g_sAesComponentData + 4))
   \   00000030   E0B0               LDI     R27, 0
   \   00000032   0F0A               ADD     R16, R26
   \   00000034   1F1B               ADC     R17, R27
   \   00000036   ........           CALL    ATA_globalsInitSramSpace_C
    121            }
    122            
    123            //g_sAesComponentData.bConfig &= ~AES_CONFIG_BM_CRYPTO_MODULE_RESET;
    124            //g_sAesComponentData.bConfig |= AES_CONFIG_BM_XOR_STATE_MEMORY;
    125               
    126            ATA_aesEncryptData_C();
   \                     ??ATA_FlashAppMsgEncrypt_1:
   \   0000003A   ........           CALL    ATA_aesEncryptData_C
    127            
    128            if( !(g_sAesComponentData.bFlags & AES_FLAGS_BM_ERROR_FLAG) )
   \   0000003E   9100....           LDS     R16, g_sAesComponentData
   \   00000042   FD07               SBRC    R16, 7
   \   00000044   C007               RJMP    ??ATA_FlashAppMsgEncrypt_0
    129            {
    130              memcpy(aesMsg, g_sAesComponentData.bDataBuffer, msgLength);
   \   00000046   2F4A               MOV     R20, R26
   \   00000048   E050               LDI     R21, 0
   \   0000004A   ....               LDI     R18, LOW((g_sAesComponentData + 4))
   \   0000004C   ....               LDI     R19, HIGH((g_sAesComponentData + 4))
   \   0000004E   018C               MOVW    R17:R16, R25:R24
   \   00000050   ........           CALL    memcpy
    131            }
    132          }
   \                     ??ATA_FlashAppMsgEncrypt_0:
   \   00000054   E0E4               LDI     R30, 4
   \   00000056   ........           JMP     ?EPILOGUE_B4_L09
    133          /*----------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   ATA_FlashAppMsgEncrypt
        4      2   -> ATA_aesEncryptData_C
        4      2   -> ATA_aesSetConfig_C
        4      2   -> ATA_globalsInitSramSpace_C
        4      2   -> memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      90  ATA_FlashAppMsgEncrypt

 
 90 bytes in segment CODE
 
 90 bytes of CODE memory

Errors: none
Warnings: none
