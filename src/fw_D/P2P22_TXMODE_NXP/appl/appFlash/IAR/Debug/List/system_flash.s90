///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          13/May/2020  17:03:24
// Copyright 1996-2017 IAR Systems AB.
// Network license: dvriar01.mchp-main.com (STD)
//
//    Source file  =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\system\src\system_flash.c
//    Command line =  
//        -f C:\Users\C41045\AppData\Local\Temp\EW200F.tmp
//        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\system\src\system_flash.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
//        -lCN
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        -lA
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
//        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 2304 --clib -Ohz)
//    Locale       =  English_USA.1252
//    List file    =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\system_flash.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME system_flash

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK `??ATA_systemAvccLow_ISR_flash_C::??INTVEC 28`
        PUBWEAK `??ATA_systemAvccReset_ISR_flash_C::??INTVEC 24`
        PUBWEAK `??ATA_systemLowBatt_ISR_flash_C::??INTVEC 20`
        PUBLIC ATA_systemAvccLow_ISR_flash_C
        PUBLIC ATA_systemAvccReset_ISR_flash_C
        PUBLIC ATA_systemErrorLoop_flash_C
        PUBLIC ATA_systemLowBatt_ISR_flash_C
        PUBWEAK _A_SUPCR
        PUBWEAK _A_VMCR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
ATA_systemAvccLow_ISR_flash_C SYMBOL "ATA_systemAvccLow_ISR_flash_C"
`??ATA_systemAvccLow_ISR_flash_C::??INTVEC 28` SYMBOL "??INTVEC 28", ATA_systemAvccLow_ISR_flash_C
ATA_systemAvccReset_ISR_flash_C SYMBOL "ATA_systemAvccReset_ISR_flash_C"
`??ATA_systemAvccReset_ISR_flash_C::??INTVEC 24` SYMBOL "??INTVEC 24", ATA_systemAvccReset_ISR_flash_C
ATA_systemLowBatt_ISR_flash_C SYMBOL "ATA_systemLowBatt_ISR_flash_C"
`??ATA_systemLowBatt_ISR_flash_C::??INTVEC 20` SYMBOL "??INTVEC 20", ATA_systemLowBatt_ISR_flash_C

        EXTERN ATA_globalsWdtDisable_C
        EXTERN ATA_systemSetEventPin_flash_ASM
        EXTERN g_sAta5700_flash
        EXTERN g_sEventHandling_flash

// C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\firmware\system\src\system_flash.c
//    1 //lint -e9059
//    2 /******************************************************************************
//    3   Use of this software is subject to Microchip's Software License Agreement.
//    4 --------------------------------------------------------------------------------
//    5   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/firmware/system/src/system_flash.c $
//    6   $LastChangedRevision: 458065 $
//    7   $LastChangedDate: 2017-05-02 04:55:50 -0600 (Tue, 02 May 2017) $
//    8   $LastChangedBy: krishna.balan $
//    9 -------------------------------------------------------------------------------
//   10   Project:      ATA5700
//   11   Target MCU:   ATA5700
//   12   Compiler:     IAR C/C++ Compiler for AVR 6.30.1
//   13 -------------------------------------------------------------------------------
//   14 
//   15 ******************************************************************************
//   16 * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
//   17 *                                                                             *
//   18 * This software is owned by the Microchip Technology Incorporated.            *
//   19 * Microchip hereby grants to licensee a personal                              *
//   20 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   21 * derivative works of, and compile the Microchip Source Code and derivative   *
//   22 * works for the sole and exclusive purpose of creating custom software in     *
//   23 * support of licensee product to be used only in conjunction with a Microchip *
//   24 * integrated circuit as specified in the applicable agreement. Any            *        
//   25 * reproduction, modification, translation, compilation, or representation of  *
//   26 * this software except as specified above is prohibited without the express   *
//   27 * written permission of Microchip.                                            *
//   28 *                                                                             *
//   29 * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
//   30 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   31 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   32 * Microchip reserves the right to make changes without further notice to the  *
//   33 * materials described herein. Microchip does not assume any liability arising *
//   34 * out of the application or use of any product or circuit described herein.   *
//   35 * Microchip does not authorize its products for use as critical components in *
//   36 * life-support systems where a malfunction or failure may reasonably be       *
//   37 * expected to result in significant injury to the user. The inclusion of      *
//   38 * Microchip products in a life-support systems application implies that the   *
//   39 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   40 * Microchip against all charges.                                              *
//   41 *                                                                             *
//   42 * Use may be limited by and subject to the applicable Microchip software      *
//   43 * license agreement.                                                          *
//   44 ******************************************************************************/
//   45 /** \file system.c
//   46 */
//   47 
//   48 //lint -restore
//   49 
//   50 /*---------------------------------------------------------------------------*/
//   51 /*  INCLUDES                                                                 */
//   52 /*---------------------------------------------------------------------------*/
//   53 #include "system_flash.h"

        ASEGN ABSOLUTE:DATA:NOROOT,0ccH
// union <unnamed> volatile __io _A_SUPCR
_A_SUPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,01e6H
// union <unnamed> volatile __ext_io _A_VMCR
_A_VMCR:
        DS8 1
//   54 #include "../../globals/src/globals.h"
//   55 #include "../../timer2/src/timer2.h"
//   56 #include "../../spi/src/ata5700_command_set_flash.h"
//   57 #include "../../init/src/init_flash.h"
//   58 
//   59 /*---------------------------------------------------------------------------*/
//   60 /*  DEFINES                                                                  */
//   61 /*---------------------------------------------------------------------------*/
//   62 /*---------------------------------------------------------------------------*/
//   63 /*  Modul Globals                                                            */
//   64 /*---------------------------------------------------------------------------*/
//   65 /*---------------------------------------------------------------------------*/
//   66 /*  IMPLEMENTATION                                                           */
//   67 /*---------------------------------------------------------------------------*/
//   68 
//   69 /*----------------------------------------------------------------------------- */
//   70 /** \brief <b>ATA_systemErrorLoop_flash_C</b>
//   71 */
//   72 /*----------------------------------------------------------------------------- */

        RSEG CODE:CODE:ROOT(1)
//   73 VOIDFUNC ATA_systemErrorLoop_flash_C(void)
ATA_systemErrorLoop_flash_C:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_systemErrorLoop_flash_C
//   74 {
//   75     ATA_globalsWdtDisable_C();
          CFI FunCall ATA_globalsWdtDisable_C
        CALL    ATA_globalsWdtDisable_C
//   76     for(;;)
??ATA_systemErrorLoop_flash_C_0:
        RJMP    ??ATA_systemErrorLoop_flash_C_0
//   77     {}
//   78 }
          CFI EndBlock cfiBlock0
//   79 
//   80 /*----------------------------------------------------------------------------- */
//   81 /** \brief <b>ATA_systemLowBatt_ISR_flash_C</b>
//   82     is used as interrupt handler for voltage monitor. If interrupt occurs the
//   83     LOWBATT event in events_system is set and if configured the event pin is
//   84     set as configured. To avoid multiple signalizations the interrupt is disabled.
//   85 
//   86     \return none
//   87 
//   88     \image html ATA_systemLowBatt_ISR_flash_C.png
//   89     \image rtf ATA_systemLowBatt_ISR_flash_C.png
//   90     \n
//   91 */
//   92 /*----------------------------------------------------------------------------- */
//   93 #pragma vector=VMON_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT ATA_systemLowBatt_ISR_flash_C, "interrupt"
//   94 __interrupt void ATA_systemLowBatt_ISR_flash_C(void)
ATA_systemLowBatt_ISR_flash_C:
          CFI Block cfiBlock1 Using cfiCommon1
          CFI Function ATA_systemLowBatt_ISR_flash_C
//   95 {   /*lint !e957 GeWi (30jun11) ISR needs no prototype therefore Note 957 is disabled */
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        IN      R24, 0x3F
//   96     VMCR &= (uint8_t)~BM_VMIM;
        LDS     R16, 486
        ANDI    R16, 0xEF
        STS     486, R16
//   97     g_sAta5700_flash.events_system |= BM_ATA5700_EVENTS_SYSTEM_LOWBATT;
        LDI     R30, LOW(g_sAta5700_flash)
        LDI     R31, (g_sAta5700_flash) >> 8
        LD      R16, Z
        ORI     R16, 0x10
        ST      Z, R16
//   98     
//   99     if (g_sEventHandling_flash.bSystem & BIT_MASK_4) {
        LDS     R16, (g_sEventHandling_flash + 1)
        SBRS    R16, 4
        RJMP    ??ATA_systemLowBatt_ISR_flash_C_0
//  100         ATA_systemSetEventPin_flash_ASM();
          CFI FunCall ATA_systemSetEventPin_flash_ASM
        CALL    ATA_systemSetEventPin_flash_ASM
//  101     }
//  102 }
??ATA_systemLowBatt_ISR_flash_C_0:
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE _A_VMCR
        ;               // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon1
          CFI NoFunction
          CFI CFA_Y Y+15
          CFI R0 Frame(CFA_Y, -7)
          CFI R1 Frame(CFA_Y, -6)
          CFI R2 Frame(CFA_Y, -5)
          CFI R3 Frame(CFA_Y, -4)
          CFI R16 Frame(CFA_Y, -15)
          CFI R17 Frame(CFA_Y, -14)
          CFI R18 Frame(CFA_Y, -13)
          CFI R19 Frame(CFA_Y, -12)
          CFI R20 Frame(CFA_Y, -11)
          CFI R21 Frame(CFA_Y, -10)
          CFI R22 Frame(CFA_Y, -9)
          CFI R23 Frame(CFA_Y, -8)
          CFI R24 Frame(CFA_Y, -1)
          CFI R30 Frame(CFA_Y, -3)
          CFI R31 Frame(CFA_Y, -2)
        OUT     0x3F, R24
        LD      R16, Y+
          CFI CFA_Y Y+14
          CFI R16 SameValue
        LD      R17, Y+
          CFI CFA_Y Y+13
          CFI R17 SameValue
        LD      R18, Y+
          CFI CFA_Y Y+12
          CFI R18 SameValue
        LD      R19, Y+
          CFI CFA_Y Y+11
          CFI R19 SameValue
        LD      R20, Y+
          CFI CFA_Y Y+10
          CFI R20 SameValue
        LD      R21, Y+
          CFI CFA_Y Y+9
          CFI R21 SameValue
        LD      R22, Y+
          CFI CFA_Y Y+8
          CFI R22 SameValue
        LD      R23, Y+
          CFI CFA_Y Y+7
          CFI R23 SameValue
        LD      R0, Y+
          CFI CFA_Y Y+6
          CFI R0 SameValue
        LD      R1, Y+
          CFI CFA_Y Y+5
          CFI R1 SameValue
        LD      R2, Y+
          CFI CFA_Y Y+4
          CFI R2 SameValue
        LD      R3, Y+
          CFI CFA_Y Y+3
          CFI R3 SameValue
        LD      R30, Y+
          CFI CFA_Y Y+2
          CFI R30 SameValue
        LD      R31, Y+
          CFI CFA_Y Y+1
          CFI R31 SameValue
        LD      R24, Y+
          CFI CFA_Y Y+0
          CFI R24 SameValue
        RETI
          CFI EndBlock cfiBlock2
//  103 
//  104 /*----------------------------------------------------------------------------- */
//  105 /** \brief <b>ATA_systemAvccLow_ISR_flash_C</b>
//  106     interrupt handler for AVCCLOW. If interrupt occurs the AVCCLOW event in
//  107     events_system is set and if configured the event pin is set as configured.
//  108     To avoid multiple signalizations the interrupt is disabled.
//  109 
//  110     \return none
//  111 
//  112     \image html ATA_systemAvccLow_ISR_flash_C.png
//  113     \image rtf ATA_systemAvccLow_ISR_flash_C.png
//  114     \n
//  115 */
//  116 /*----------------------------------------------------------------------------- */
//  117 #pragma vector=AVCCL_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT ATA_systemAvccLow_ISR_flash_C, "interrupt"
//  118 __interrupt void ATA_systemAvccLow_ISR_flash_C(void)
ATA_systemAvccLow_ISR_flash_C:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function ATA_systemAvccLow_ISR_flash_C
//  119 {   /*lint !e957 GeWi (30jun11) ISR needs no prototype therefore Note 957 is disabled */
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R3
          CFI R3 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R2
          CFI R2 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R1
          CFI R1 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        ST      -Y, R0
          CFI R0 Frame(CFA_Y, -7)
          CFI CFA_Y Y+7
        ST      -Y, R23
          CFI R23 Frame(CFA_Y, -8)
          CFI CFA_Y Y+8
        ST      -Y, R22
          CFI R22 Frame(CFA_Y, -9)
          CFI CFA_Y Y+9
        ST      -Y, R21
          CFI R21 Frame(CFA_Y, -10)
          CFI CFA_Y Y+10
        ST      -Y, R20
          CFI R20 Frame(CFA_Y, -11)
          CFI CFA_Y Y+11
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -12)
          CFI CFA_Y Y+12
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -13)
          CFI CFA_Y Y+13
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -14)
          CFI CFA_Y Y+14
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -15)
          CFI CFA_Y Y+15
        IN      R24, 0x3F
//  120     SUPCR &= (uint8_t)~BM_AVCCLM;
        LDS     R16, 204
        ANDI    R16, 0xFD
        STS     204, R16
//  121     g_sAta5700_flash.events_system |= BM_ATA5700_EVENTS_SYSTEM_AVCCLOW;
        LDI     R30, LOW(g_sAta5700_flash)
        LDI     R31, (g_sAta5700_flash) >> 8
        LD      R16, Z
        ORI     R16, 0x20
        ST      Z, R16
//  122     
//  123     /*  */
//  124     if (g_sEventHandling_flash.bSystem & BIT_MASK_5) {
        LDS     R16, (g_sEventHandling_flash + 1)
        SBRS    R16, 5
        RJMP    ??ATA_systemAvccLow_ISR_flash_C_0
//  125         ATA_systemSetEventPin_flash_ASM();
          CFI FunCall ATA_systemSetEventPin_flash_ASM
        CALL    ATA_systemSetEventPin_flash_ASM
//  126     }
//  127 }
??ATA_systemAvccLow_ISR_flash_C_0:
        RJMP    ?Subroutine0
          CFI EndBlock cfiBlock3
        REQUIRE _A_SUPCR
//  128 
//  129 /*----------------------------------------------------------------------------- */
//  130 /** \brief <b>ATA_systemAvccReset_ISR_flash_C</b>
//  131     interrupt handler for AVCCRESET. There is no signalization for this interrupt
//  132     source available in the event bytes. To avoid multiple signalization the
//  133     interrupt is disabled.
//  134 
//  135     \return none
//  136 */
//  137 /*----------------------------------------------------------------------------- */
//  138 #pragma vector=AVCCR_vect

        RSEG CODE:CODE:NOROOT(1)
        CALL_GRAPH_ROOT ATA_systemAvccReset_ISR_flash_C, "interrupt"
//  139 __interrupt void ATA_systemAvccReset_ISR_flash_C(void)
ATA_systemAvccReset_ISR_flash_C:
          CFI Block cfiBlock4 Using cfiCommon1
          CFI Function ATA_systemAvccReset_ISR_flash_C
          CFI NoCalls
//  140 {   /*lint !e957 GeWi (30oct11) ISR needs no prototype therefore Note 957 is disabled */
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        IN      R17, 0x3F
//  141     SUPCR &= (uint8_t)~BM_AVCCRM;
        LDS     R16, 204
        ANDI    R16, 0xFE
        STS     204, R16
//  142 }
        OUT     0x3F, R17
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+1
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock4
        REQUIRE _A_SUPCR

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 20
`??ATA_systemLowBatt_ISR_flash_C::??INTVEC 20`:
        JMP     ATA_systemLowBatt_ISR_flash_C

        COMMON INTVEC:CODE:ROOT(1)
        ORG 24
`??ATA_systemAvccReset_ISR_flash_C::??INTVEC 24`:
        JMP     ATA_systemAvccReset_ISR_flash_C

        COMMON INTVEC:CODE:ROOT(1)
        ORG 28
`??ATA_systemAvccLow_ISR_flash_C::??INTVEC 28`:
        JMP     ATA_systemAvccLow_ISR_flash_C

        END
//  143 
// 
//   2 bytes in segment ABSOLUTE
// 194 bytes in segment CODE
//  12 bytes in segment INTVEC
// 
// 194 bytes of CODE memory (+ 12 bytes shared)
//   0 bytes of DATA memory (+  2 bytes shared)
//
//Errors: none
//Warnings: none
