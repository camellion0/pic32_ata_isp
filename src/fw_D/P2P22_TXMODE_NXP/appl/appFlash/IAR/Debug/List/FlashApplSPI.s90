///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V7.10.1.1197 for Atmel AVR          13/May/2020  17:03:20
// Copyright 1996-2017 IAR Systems AB.
// Network license: dvriar01.mchp-main.com (STD)
//
//    Source file  =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
//    Command line =  
//        -f C:\Users\C41045\AppData\Local\Temp\EW1305.tmp
//        (C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\Obj
//        -lCN
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        -lA
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List
//        --no_cse --no_inline --no_code_motion --no_cross_call --no_clustering
//        --no_tbaa --debug --64k_flash -DENABLE_BIT_DEFINITIONS -e
//        --eeprom_size 2304 --clib -Ohz)
//    Locale       =  English_USA.1252
//    List file    =  
//        C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\IAR\Debug\List\FlashApplSPI.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME FlashApplSPI

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"
        RTMODEL "__vtable_memory", "__nearflash"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK `??ATA_Int0Handler_ISR_flash_C::??INTVEC 4`
        PUBLIC ATA_Int0Handler_ISR_flash_C
        PUBLIC ATA_spiCloseSlaveFlash_C
        PUBLIC ATA_spiOpenSlaveFlash_C
        PUBLIC ATA_spiReceveDataFlash_C
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRD
        PUBWEAK _A_EIFR
        PUBWEAK _A_EIMSK
        PUBWEAK _A_MCUCR
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTD
        PUBWEAK _A_PRR0
        PUBWEAK _A_SFIR
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPSR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC g_SPI_RXbuffer
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon1
        
ATA_Int0Handler_ISR_flash_C SYMBOL "ATA_Int0Handler_ISR_flash_C"
`??ATA_Int0Handler_ISR_flash_C::??INTVEC 4` SYMBOL "??INTVEC 4", ATA_Int0Handler_ISR_flash_C

        EXTERN gFlashApplState
        EXTERN gFlashApplVars
        EXTERN g_sDebug
        EXTERN g_sSpiConfig

// C:\Users\C41045\Documents\CDB\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2P22_TXMODE_NXP\appl\appFlash\src\FlashApplSPI.c
//    1 /******************************************************************************
//    2   Use of this software is subject to Microchip's Software License Agreement.
//    3 --------------------------------------------------------------------------------
//    4   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2P22_TXMODE_NXP/appl/appFlash/src/FlashApplSPI.c $
//    5   $LastChangedRevision: 591974 $
//    6   $LastChangedDate: 2020-03-16 09:23:12 -0600 (Mon, 16 Mar 2020) $
//    7   $LastChangedBy: grueter $
//    8 -------------------------------------------------------------------------------
//    9   Project:      ATA5700
//   10   Target MCU:   ATA5700
//   11   Compiler:     IAR C/C++ Compiler for AVR 5.51.0
//   12 -------------------------------------------------------------------------------
//   13 
//   14 ******************************************************************************
//   15 * Copyright 2017, Microchip Technology Incorporated and its subsidiaries.     *
//   16 *                                                                             *
//   17 * This software is owned by the Microchip Technology Incorporated.            *
//   18 * Microchip hereby grants to licensee a personal                              *
//   19 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   20 * derivative works of, and compile the Microchip Source Code and derivative   *
//   21 * works for the sole and exclusive purpose of creating custom software in     *
//   22 * support of licensee product to be used only in conjunction with a Microchip *
//   23 * integrated circuit as specified in the applicable agreement. Any            *        
//   24 * reproduction, modification, translation, compilation, or representation of  *
//   25 * this software except as specified above is prohibited without the express   *
//   26 * written permission of Microchip.                                            *
//   27 *                                                                             *
//   28 * Disclaimer: MICROCHIP MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,    *
//   29 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   30 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   31 * Microchip reserves the right to make changes without further notice to the  *
//   32 * materials described herein. Microchip does not assume any liability arising *
//   33 * out of the application or use of any product or circuit described herein.   *
//   34 * Microchip does not authorize its products for use as critical components in *
//   35 * life-support systems where a malfunction or failure may reasonably be       *
//   36 * expected to result in significant injury to the user. The inclusion of      *
//   37 * Microchip products in a life-support systems application implies that the   *
//   38 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   39 * Microchip against all charges.                                              *
//   40 *                                                                             *
//   41 * Use may be limited by and subject to the applicable Microchip software      *
//   42 * license agreement.                                                          *
//   43 ******************************************************************************/
//   44 
//   45 /** \file FlashSPI.c
//   46     this file contains an ATA5700 SPI application software
//   47 */
//   48 
//   49 /*===========================================================================*/
//   50 /*  INCLUDES                                                                 */
//   51 /*===========================================================================*/
//   52 #include "../../../firmware/init/src/init.h"

        ASEGN ABSOLUTE:DATA:NOROOT,024H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,029H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02aH
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02eH
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,03aH
// union <unnamed> volatile __io _A_PRR0
_A_PRR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,047H
// union <unnamed> volatile __io _A_EIMSK
_A_EIMSK:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,048H
// union <unnamed> volatile __io _A_EIFR
_A_EIFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0158H
// union <unnamed> volatile __ext_io _A_SFIR
_A_SFIR:
        DS8 1
//   53 #include "../../../firmware/rftx/src/rftx.h"
//   54 #include "../../../firmware/lfrx/src/lfrx.h"
//   55 #include "../../../firmware/spi/src/ata5700_command_set_flash.h"
//   56 #include "../../../firmware/init/src/init_flash.h"
//   57 #include "../../../firmware/system/src/system_flash.h"
//   58 #include "../../../firmware/timer1/src/timer1.h"
//   59 #include "../../../firmware/timer5/src/timer5_flash.h"
//   60 #include "../../../firmware/timer4/src/timer4_flash.h"
//   61 #include "../../../firmware/globals/src/globals.h"
//   62 #include "../../../firmware/lfrx/src/lfrx_flash.h"
//   63 #include "../../../firmware/tp/src/tp_flash.h"
//   64 #include "../../../firmware/extif/src/extif_flash.h"
//   65 #include "../../../firmware/lfrssi/src/lfrssi.h"
//   66 #include "../../../firmware/lfrssi/src/lfrssi_flash.h"
//   67 #include "../../../firmware/calib/src/calib.h"
//   68 #include "../../../firmware/aes/src/aes.h"
//   69 #include "../../../firmware/spi/src/spi.h"
//   70 #include "../src/micro.h"
//   71 #include "rfrcc_flash.h"
//   72 #include "FlashApplVars.h"
//   73 #include "../src/FlashApplPEPS.h"
//   74 #include "FlashApplMSG.h"
//   75 #include "../src/FlashApplLF.h" 
//   76 
//   77 
//   78 /*===========================================================================*/
//   79 /*  DEFINES                                                                  */
//   80 /*===========================================================================*/
//   81 /*===========================================================================*/
//   82 /*  Modul Globals                                                            */
//   83 /*===========================================================================*/
//   84 extern sFlashApplState gFlashApplState;
//   85 extern sFlashApplVars gFlashApplVars;
//   86 extern tTimer5Status gTimer5Status;
//   87 //uint8_t m_bTempArray_flash[10];
//   88 //extern m_bTempArray_flash[10];
//   89 #pragma location = ".sram_SPI_RXbuffer"

        RSEG `.sram_SPI_RXbuffer`:DATA:NOROOT(0)
//   90 __no_init uint8_t g_SPI_RXbuffer[10];
g_SPI_RXbuffer:
        DS8 10
//   91 
//   92 
//   93 //uint8_t *pTxData = &g_bModuleTestBuffer_flash[0];
//   94 //uint8_t *pRxData = &g_bModuleTestBuffer_flash[BASIC_SPI_FUNCTION_TELEGRAM_LENGTH];
//   95 
//   96 /*===========================================================================*/
//   97 /*  Modul Prototypes                                                         */
//   98 /*===========================================================================*/
//   99 //void SendShortCommand(void);
//  100 //void ATA_Flash_IOinit(void);
//  101 /*===========================================================================*/
//  102 /*  IMPLEMENTATION                                                           */
//  103 /*===========================================================================*/
//  104 /*---------------------------------------------------------------------------*/
//  105 /** \brief <b>ATA_spiOpenSlaveFlash_C</b>
//  106     shall setup a SPI master interface. The PRR0.PRSPI clock domain remains 
//  107     active after functions is left.
//  108 
//  109     \param[in]  bSpcr           SPCR register setting
//  110     \param[in]  bSpsr           SPSR register setting
//  111     \return     FAIL if SPI is already opened, otherwise OK
//  112 
//  113     Variable Usage:
//  114     \li [out] ::g_sSpiConfig  Global SPI component data
//  115     \li [out] ::g_sDebug      Global Debug component data
//  116     
//  117     \image html ATA_spiOpen_C.png
//  118 
//  119     \internal
//  120     \li 005: Power up SPI interface via PRR0.PRSPI=0
//  121     \li 010: IF the SPI interface is already in use as indicated by bit SPE in
//  122              register SPCR being set to 1, THEN
//  123                Set ::g_sDebug .bErrorCode to DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED\n
//  124              ELSE
//  125                Disable INT0 via register EIMSK
//  126 
//  127     \li 020:   Configure the ports as follows
//  128                 - PD1/NSS  - SPI Not Slave Select    (input) + Pull up
//  129                 - PB5/MISO - SPI Master In Slave Out (output)
//  130                 - PB6/MOSI - SPI Master Out Slave In (input)
//  131                 - PB7/SCK  - SPI Clock               (input)
//  132 
//  133     \li 040:   Configure SPCR register setting according to function parameters
//  134                 - SPSR = spsr
//  135                 - SPCR = spcr
//  136 
//  137     \li 050:   Set SPI status to "INITIALIZED" in ::g_sSpiConfig .bStatus\n
//  138              ENDIF
//  139 
//  140     \Derived{No}
//  141 
//  142     \Rationale{N/A}
//  143 
//  144     \Traceability{Primus2P-788}
//  145     \endinternal
//  146 \n
//  147 */
//  148 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
//  149 UINT8FUNC ATA_spiOpenSlaveFlash_C(uint8_t bSpcr, uint8_t bSpsr)
ATA_spiOpenSlaveFlash_C:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_spiOpenSlaveFlash_C
          CFI NoCalls
//  150 {
//  151     int fRetVal = FAIL;
        LDI     R18, 1
//  152 
//  153     /* LLR-Ref: 005 */
//  154     ATA_POWERON_C(PRR0, PRSPI)
        CBI     0x1A, 0x00
//  155     
//  156     /* LLR-Ref: 010 */
//  157     if (SPCR & BM_SPE)
        IN      R19, 0x2C
        SBRS    R19, 6
        RJMP    ??ATA_spiOpenSlaveFlash_C_0
//  158     {
//  159         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_ALREADY_OPENED;
        LDI     R16, 29
        STS     g_sDebug, R16
        RJMP    ??ATA_spiOpenSlaveFlash_C_1
//  160     }
//  161     else
//  162     {
//  163         EIMSK |= BM_INT0;  //Enable PD1 NSS interrupt
??ATA_spiOpenSlaveFlash_C_0:
        IN      R18, 0x27
        ORI     R18, 0x01
        OUT     0x27, R18
//  164           
//  165         /* LLR-Ref: 020 */
//  166         DDRB &= ~(BM_SPI_MOSI_PIN | BM_SPI_SCK_PIN);
        IN      R18, 0x04
        ANDI    R18, 0x3F
        OUT     0x04, R18
//  167         DDRB |= (uint8_t)BM_SPI_MISO_PIN;
        SBI     0x04, 0x05
//  168         DDRD &= (uint8_t)~BM_SPI_NSS_PIN;
        CBI     0x0A, 0x01
//  169         PORTD|= BM_SPI_NSS_PIN;  //pull up active
        SBI     0x0B, 0x01
//  170 
//  171         SFIR |= (1<<RIL0);
        LDS     R18, 344
        ORI     R18, 0x01
        STS     344, R18
//  172 
//  173         /* LLR-Ref: 040 */
//  174         SPSR  = bSpsr;
        OUT     0x2D, R17
//  175         SPCR  = bSpcr;
        OUT     0x2C, R16
//  176 
//  177         /* LLR-Ref: 050 */
//  178         g_sSpiConfig.bStatus = BM_SPICONFIG_STATUS_INITIALIZATION_STATUS;
        LDI     R16, 128
        STS     g_sSpiConfig, R16
//  179         fRetVal = OK;
        LDI     R18, 0
//  180     }
//  181     return fRetVal;
??ATA_spiOpenSlaveFlash_C_1:
        MOV     R16, R18
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_PRR0
        REQUIRE _A_SPCR
        REQUIRE _A_EIMSK
        REQUIRE _A_DDRB
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_SFIR
        REQUIRE _A_SPSR
//  182 }
//  183 /*---------------------------------------------------------------------------*/
//  184 /** \brief <b>ATA_spiCloseSlaveFlash_C</b>
//  185     shall disable the SPI interface.
//  186 
//  187     Variable Usage:
//  188     \li [out] ::g_sSpiConfig Global SPI component data
//  189 
//  190     \image html ATA_spiClose_C.png
//  191 
//  192     \internal
//  193     \li 010: Reset SPCR register setting
//  194 
//  195     \li 020: Power down SPI interface via PRR0.PRSPI=1
//  196 
//  197     \li 030: Set output back pins to input
//  198 
//  199     \li 040: Set SPI status to "NOT INITIALIZED" in ::g_sSpiConfig .bStatus
//  200 
//  201     \Derived{No}
//  202 
//  203     \Rationale{N/A}
//  204 
//  205     \Traceability{Primus2P-958}
//  206     \endinternal
//  207 \n
//  208 */
//  209 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
//  210 VOIDFUNC ATA_spiCloseSlaveFlash_C(void)
ATA_spiCloseSlaveFlash_C:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ATA_spiCloseSlaveFlash_C
          CFI NoCalls
//  211 {
//  212     /* LLR-Ref: 010 */
//  213     SPCR = 0U;
        LDI     R16, 0
        OUT     0x2C, R16
//  214 
//  215     /* LLR-Ref: 020 */
//  216     ATA_POWEROFF_C(PRR0, PRSPI)
        SBI     0x1A, 0x00
//  217 
//  218     /* LLR-Ref: 030 */
//  219     DDRB &= (uint8_t)~(BM_SPI_MOSI_PIN | BM_SPI_MISO_PIN | BM_SPI_SCK_PIN);
        IN      R16, 0x04
        ANDI    R16, 0x1F
        OUT     0x04, R16
//  220     DDRD &= (uint8_t)~(BM_SPI_NSS_PIN);
        CBI     0x0A, 0x01
//  221     
//  222     /* LLR-Ref: 040 */
//  223     g_sSpiConfig.bStatus &= (uint8_t)~BM_SPICONFIG_STATUS_INITIALIZATION_STATUS;
        LDI     R30, LOW(g_sSpiConfig)
        LDI     R31, (g_sSpiConfig) >> 8
        LD      R16, Z
        ANDI    R16, 0x7F
        ST      Z, R16
//  224 }
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_SPCR
        REQUIRE _A_PRR0
        REQUIRE _A_DDRB
        REQUIRE _A_DDRD

        RSEG CODE:CODE:ROOT(1)
ATA_spiReceveDataFlash_C:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ATA_spiReceveDataFlash_C
          CFI NoCalls
        RJMP    ??ATA_spiReceveDataFlash_C_0
??ATA_spiReceveDataFlash_C_1:
        IN      R17, 0x2D
        SBRS    R17, 7
        RJMP    ??ATA_spiReceveDataFlash_C_2
        IN      R18, 0x2E
        LDI     R31, 0
        MOV     R30, R16
        SUBI    R30, LOW((-(g_SPI_RXbuffer) & 0xFFFF))
        SBCI    R31, (-(g_SPI_RXbuffer) & 0xFFFF) >> 8
        ST      Z, R18
        INC     R16
        CPI     R16, 9
        BRCS    ??ATA_spiReceveDataFlash_C_2
??ATA_spiReceveDataFlash_C_0:
        LDI     R16, 0
??ATA_spiReceveDataFlash_C_2:
        SBIS    0x09, 0x01
        RJMP    ??ATA_spiReceveDataFlash_C_1
        LDI     R30, LOW(gFlashApplState)
        LDI     R31, (gFlashApplState) >> 8
        LDD     R17, Z+1
        ORI     R17, 0x01
        STD     Z+1, R17
        STS     (gFlashApplVars + 2), R16
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_SPSR
        REQUIRE _A_SPDR
        REQUIRE _A_PIND
//  225 /*----------------------------------------------------------------------------- */
//  226 /*brief <b>PCINTO Interrupt handler</b>*/
//  227             
//  228 /*    The function contains the interrupt vector for the Pin Change interrupts 0-7.
//  229     This routine determins the specefic pin that generated the interupt and sets
//  230     variables to alert the main loop that a new button press has been detected.*/
//  231 #pragma vector=INT0_vect 

        RSEG CODE:CODE:ROOT(1)
        CALL_GRAPH_ROOT ATA_Int0Handler_ISR_flash_C, "interrupt"
//  232 __interrupt VOIDFUNC ATA_Int0Handler_ISR_flash_C(void)
ATA_Int0Handler_ISR_flash_C:
          CFI Block cfiBlock3 Using cfiCommon1
          CFI Function ATA_Int0Handler_ISR_flash_C
//  233 {
        ST      -Y, R31
          CFI R31 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R30
          CFI R30 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        ST      -Y, R19
          CFI R19 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        ST      -Y, R18
          CFI R18 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        ST      -Y, R17
          CFI R17 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        ST      -Y, R16
          CFI R16 Frame(CFA_Y, -6)
          CFI CFA_Y Y+6
        IN      R19, 0x3F
//  234  // ATA_globalsClkSwitchFrc_C();
//  235   MCUCR |= (1<<SPIIO); //Disable all but SPI interrupts
        SBI     0x0E, 0x02
//  236   EIMSK &= ~(BM_INT0); //Disable PD1 NSS interrupt
        IN      R16, 0x27
        ANDI    R16, 0xFE
        OUT     0x27, R16
//  237   ATA_spiReceveDataFlash_C();
          CFI FunCall ATA_spiReceveDataFlash_C
        RCALL   ATA_spiReceveDataFlash_C
//  238   
//  239   EIFR = 0x01; //Clear INT0 flag
        LDI     R16, 1
        OUT     0x28, R16
//  240   MCUCR &= ~(1<<SPIIO); //Disable all but SPI interrupts
        CBI     0x0E, 0x02
//  241   EIMSK |= BM_INT0;  //Enable PD1 NSS interrupt
        IN      R16, 0x27
        ORI     R16, 0x01
        OUT     0x27, R16
//  242 }
        OUT     0x3F, R19
        LD      R16, Y+
          CFI R16 SameValue
          CFI CFA_Y Y+5
        LD      R17, Y+
          CFI R17 SameValue
          CFI CFA_Y Y+4
        LD      R18, Y+
          CFI R18 SameValue
          CFI CFA_Y Y+3
        LD      R19, Y+
          CFI R19 SameValue
          CFI CFA_Y Y+2
        LD      R30, Y+
          CFI R30 SameValue
          CFI CFA_Y Y+1
        LD      R31, Y+
          CFI R31 SameValue
          CFI CFA_Y Y+0
        RETI
          CFI EndBlock cfiBlock3
        REQUIRE _A_MCUCR
        REQUIRE _A_EIMSK
        REQUIRE _A_EIFR

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 4
`??ATA_Int0Handler_ISR_flash_C::??INTVEC 4`:
        JMP     ATA_Int0Handler_ISR_flash_C

        END
//  243 VOIDFUNC ATA_spiReceveDataFlash_C(void)
//  244 {
//  245   //bit_set(LED1);
//  246   uint8_t SpiByteCounter = 0;
//  247   
//  248 while (  (PIND & BM_SPI_NSS_PIN) != BM_SPI_NSS_PIN )
//  249      {  
//  250         if (  (SPSR & (1<<SPIF))== (1<<SPIF)   ){
//  251         g_SPI_RXbuffer[SpiByteCounter] = SPDR;
//  252         SpiByteCounter++;
//  253         if (SpiByteCounter>8) SpiByteCounter=0;
//  254         }
//  255      }
//  256 gFlashApplState.State |= BM_SPI_received_flag;
//  257 gFlashApplVars.SPIcount = SpiByteCounter;
//  258 return;  
//  259 }
//  260 
// 
//  10 bytes in segment .sram_SPI_RXbuffer
//  12 bytes in segment ABSOLUTE
// 188 bytes in segment CODE
//   4 bytes in segment INTVEC
// 
// 188 bytes of CODE memory (+  4 bytes shared)
//  10 bytes of DATA memory (+ 12 bytes shared)
//
//Errors: none
//Warnings: none
