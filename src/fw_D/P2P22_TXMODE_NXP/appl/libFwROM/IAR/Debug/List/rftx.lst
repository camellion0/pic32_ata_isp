###############################################################################
#
# IAR C/C++ Compiler V6.70.1.929 for Atmel AVR            05/Apr/2016  13:30:43
# Copyright 1996-2015 IAR Systems AB.
# Network license: DVRIAR01.corpp.atmel.com (STD)
#
#    Source file  =  
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\rftx\src\rftx.c
#    Command line =  
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\rftx\src\rftx.c
#        -v3 --enhanced_core -ms -o
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj
#        -lC
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
#        -lA
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
#        --initializers_in_flash --no_cse --no_inline --no_code_motion
#        --no_cross_call --no_clustering --no_tbaa --debug --64k_flash
#        -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 6.0\avr\inc\" --eeprom_size 1152 --clib
#        -Ohz
#    List file    =  
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List\rftx.lst
#    Object file  =  
#        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj\rftx.r90
#
###############################################################################

C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\rftx\src\rftx.c
      1          //lint -e9059
      2          /* *C**************************************************************************
      3            Use of this software is subject to Atmel's Software License Agreement.
      4          -------------------------------------------------------------------------------
      5            $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2_Gen2_Merge/firmware/rftx/src/rftx.c $
      6            $LastChangedRevision: 328482 $
      7            $LastChangedDate: 2015-07-22 13:17:23 -0600 (Wed, 22 Jul 2015) $
      8            $LastChangedBy: grueter $
      9          -------------------------------------------------------------------------------
     10            Project:      ATA5700
     11            Target MCU:   ATA5700
     12            Compiler:     IAR C/C++ Compiler for AVR 6.30.1
     13          -------------------------------------------------------------------------------
     14          
     15          ******************************************************************************
     16          * Copyright 2011, Atmel Automotive GmbH                                       *
     17          *                                                                             *
     18          * This software is owned by the Atmel Automotive GmbH                         *
     19          * and is protected by and subject to worldwide patent protection.             *
     20          * Atmel hereby grants to licensee a personal,                                 *
     21          * non-exclusive, non-transferable license to copy, use, modify, create        *
     22          * derivative works of, and compile the Atmel Source Code and derivative       *
     23          * works for the sole purpose of creating custom software in support of        *
     24          * licensee product to be used only in conjunction with a Atmel integrated     *
     25          * circuit as specified in the applicable agreement. Any reproduction,         *
     26          * modification, translation, compilation, or representation of this           *
     27          * software except as specified above is prohibited without the express        *
     28          * written permission of Atmel.                                                *
     29          *                                                                             *
     30          * Disclaimer: ATMEL MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,         *
     31          * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
     32          * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
     33          * Atmel reserves the right to make changes without further notice to the      *
     34          * materials described herein. Atmel does not assume any liability arising     *
     35          * out of the application or use of any product or circuit described herein.   *
     36          * Atmel does not authorize its products for use as critical components in     *
     37          * life-support systems where a malfunction or failure may reasonably be       *
     38          * expected to result in significant injury to the user. The inclusion of      *
     39          * Atmel products in a life-support systems application implies that the       *
     40          * manufacturer assumes all risk of such use and in doing so indemnifies       *
     41          * Atmel against all charges.                                                  *
     42          *                                                                             *
     43          * Use may be limited by and subject to the applicable Atmel software          *
     44          * license agreement.                                                          *
     45          ******************************************************************************/
     46          /** \file rftx.c
     47          */
     48          //lint -restore
     49          
     50          /*---------------------------------------------------------------------------*/
     51          /*  INCLUDES                                                                 */
     52          /*---------------------------------------------------------------------------*/
     53          #include "../../stdc/src/stdc.h"

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_PRR1
   \                     _A_PRR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_PRR2
   \                     _A_PRR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f
   \   union <unnamed> volatile __io _A_FSCR
   \                     _A_FSCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_T3CR
   \                     _A_T3CR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_PRR0
   \                     _A_PRR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60
   \   union <unnamed> volatile __io _A_FSEN
   \                     _A_FSEN:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_FSFCR
   \                     _A_FSFCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_GACDIVL
   \                     _A_GACDIVL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x63
   \   union <unnamed> volatile __io _A_GACDIVH
   \                     _A_GACDIVH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x64
   \   union <unnamed> volatile __io _A_FFREQ1L
   \                     _A_FFREQ1L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x65
   \   union <unnamed> volatile __io _A_FFREQ1M
   \                     _A_FFREQ1M:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x66
   \   union <unnamed> volatile __io _A_FFREQ1H
   \                     _A_FFREQ1H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x67
   \   union <unnamed> volatile __io _A_FFREQ2L
   \                     _A_FFREQ2L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x68
   \   union <unnamed> volatile __io _A_FFREQ2M
   \                     _A_FFREQ2M:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69
   \   union <unnamed> volatile __io _A_FFREQ2H
   \                     _A_FFREQ2H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x79
   \   union <unnamed> volatile __io _A_T3CORL
   \                     _A_T3CORL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a
   \   union <unnamed> volatile __io _A_T3CORH
   \                     _A_T3CORH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7d
   \   union <unnamed> volatile __io _A_T3MRA
   \                     _A_T3MRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7e
   \   union <unnamed> volatile __io _A_T3MRB
   \                     _A_T3MRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7f
   \   union <unnamed> volatile __io _A_T3IMR
   \                     _A_T3IMR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcb
   \   union <unnamed> volatile __io _A_SUPFR
   \                     _A_SUPFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc
   \   union <unnamed> volatile __io _A_SUPCR
   \                     _A_SUPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd5
   \   union <unnamed> volatile __io _A_DFL
   \                     _A_DFL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd8
   \   union <unnamed> volatile __io _A_DFD
   \                     _A_DFD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd9
   \   union <unnamed> volatile __io _A_DFI
   \                     _A_DFI:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xda
   \   union <unnamed> volatile __io _A_DFC
   \                     _A_DFC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdc
   \   union <unnamed> volatile __io _A_SFL
   \                     _A_SFL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdf
   \   union <unnamed> volatile __io _A_SFD
   \                     _A_SFD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe0
   \   union <unnamed> volatile __io _A_SFI
   \                     _A_SFI:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe1
   \   union <unnamed> volatile __io _A_SFC
   \                     _A_SFC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe2
   \   union <unnamed> volatile __io _A_SSMCR
   \                     _A_SSMCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe4
   \   union <unnamed> volatile __io _A_SSMFBR
   \                     _A_SSMFBR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe5
   \   union <unnamed> volatile __io _A_SSMRR
   \                     _A_SSMRR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe6
   \   union <unnamed> volatile __io _A_SSMSR
   \                     _A_SSMSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe7
   \   union <unnamed> volatile __io _A_SSMIFR
   \                     _A_SSMIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe8
   \   union <unnamed> volatile __io _A_SSMIMR
   \                     _A_SSMIMR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xec
   \   union <unnamed> volatile __io _A_MSMCR1
   \                     _A_MSMCR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xed
   \   union <unnamed> volatile __io _A_MSMCR2
   \                     _A_MSMCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xee
   \   union <unnamed> volatile __io _A_MSMCR3
   \                     _A_MSMCR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xef
   \   union <unnamed> volatile __io _A_MSMCR4
   \                     _A_MSMCR4:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xfc
   \   union <unnamed> volatile __io _A_TRCIDL
   \                     _A_TRCIDL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xfd
   \   union <unnamed> volatile __io _A_TRCIDH
   \                     _A_TRCIDH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xff
   \   union <unnamed> volatile __io _A_TRCDR
   \                     _A_TRCDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x100
   \   union <unnamed> volatile __ext_io _A_FESR
   \                     _A_FESR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x101
   \   union <unnamed> volatile __ext_io _A_FEEN1
   \                     _A_FEEN1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x102
   \   union <unnamed> volatile __ext_io _A_FEEN2
   \                     _A_FEEN2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x104
   \   union <unnamed> volatile __ext_io _A_FEAT
   \                     _A_FEAT:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x105
   \   union <unnamed> volatile __ext_io _A_FEPAC
   \                     _A_FEPAC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x106
   \   union <unnamed> volatile __ext_io _A_FEVCT
   \                     _A_FEVCT:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x107
   \   union <unnamed> volatile __ext_io _A_FEBT
   \                     _A_FEBT:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x108
   \   union <unnamed> volatile __ext_io _A_FEMS
   \                     _A_FEMS:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x109
   \   union <unnamed> volatile __ext_io _A_FETN4
   \                     _A_FETN4:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x10a
   \   union <unnamed> volatile __ext_io _A_FECR
   \                     _A_FECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x10b
   \   union <unnamed> volatile __ext_io _A_FEVCO
   \                     _A_FEVCO:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x10c
   \   union <unnamed> volatile __ext_io _A_FEALR
   \                     _A_FEALR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x10d
   \   union <unnamed> volatile __ext_io _A_FEANT
   \                     _A_FEANT:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x123
   \   union <unnamed> volatile __ext_io _A_TMCSB
   \                     _A_TMCSB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x124
   \   union <unnamed> volatile __ext_io _A_TMCIL
   \                     _A_TMCIL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x125
   \   union <unnamed> volatile __ext_io _A_TMCIH
   \                     _A_TMCIH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x126
   \   union <unnamed> volatile __ext_io _A_TMCPL
   \                     _A_TMCPL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x127
   \   union <unnamed> volatile __ext_io _A_TMCPH
   \                     _A_TMCPH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x129
   \   union <unnamed> volatile __ext_io _A_TMTLL
   \                     _A_TMTLL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12a
   \   union <unnamed> volatile __ext_io _A_TMTLH
   \                     _A_TMTLH:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12b
   \   union <unnamed> volatile __ext_io _A_TMSSC
   \                     _A_TMSSC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12c
   \   union <unnamed> volatile __ext_io _A_TMSR
   \                     _A_TMSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12d
   \   union <unnamed> volatile __ext_io _A_TMCR2
   \                     _A_TMCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x12e
   \   union <unnamed> volatile __ext_io _A_TMCR1
   \                     _A_TMCR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x159
   \   union <unnamed> volatile __ext_io _A_T2IFR
   \                     _A_T2IFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x1e3
   \   union <unnamed> volatile __ext_io _A_CMCR
   \                     _A_CMCR:
   \   00000000                      DS8 1
     54          #include "rftx.h"
     55          #include "rftx_vco.h"
     56          #include "rftx_ant.h"
     57          
     58          #include "..\..\eep\src\eep.h"
     59          #include "..\..\timer2\src\timer2.h"
     60          #include "..\..\timer3\src\timer3.h"
     61          #include "..\..\globals\src\globals.h"
     62          /*---------------------------------------------------------------------------*/
     63          /*  DEFINES                                                                  */
     64          /*---------------------------------------------------------------------------*/
     65          /*---------------------------------------------------------------------------*/
     66          /*  Modul Globals                                                            */
     67          /*---------------------------------------------------------------------------*/
     68          
     69          static VOIDFUNC  ATA_rfTxOpenTimer3forTxing_C(void);
     70          static VOIDFUNC  ATA_rfTxFrequencySettings_C(void);
     71          static VOIDFUNC  ATA_rfTxSetupTxModulator_C(void);
     72          static VOIDFUNC  ATA_rfTxConfigureTxSSM_C(void);
     73          static UINT8FUNC ATA_rfTxFevcoCalculation_C(void);
     74          static VOIDFUNC  ATA_rfTxEnd_C(void);
     75          static VOIDFUNC  ATA_rfTxStartSendTelegramSSM_C(void);
     76          static VOIDFUNC  ATA_rfTxStartShutDownSSM_C(void);
     77          
     78          /** \brief <b>g_sRfTx</b>
     79              contains the configuration and status information for module RF Tx.
     80           */
     81          #pragma location = ".rftx"

   \                                 In  segment .rftx, align 1, keep-with-next, root
     82          __root __no_init sRfTxConfig g_sRfTx;
   \                     g_sRfTx:
   \   00000000                      DS8 7
     83          
     84          /** \brief <b>g_sRfTxCurrentService</b>
     85              contains the service configuration of the currently used service/channel
     86              configuration. The selected configuration is copied to
     87              ::ATA_rfTxInitCurrentService_C at startup of RFTX.
     88           */
     89          #pragma location = ".rftx"

   \                                 In  segment .rftx, align 1, keep-with-next, root
     90          __root __no_init sRfTxCurrentServiceChannelConfiguration g_sRfTxCurrentService;
   \                     g_sRfTxCurrentService:
   \   00000000                      DS8 33
     91          
     92          /** \brief <b>flowCtrl</b>
     93              is used for software state machine control.
     94              The complete SW state machine flow is controlled with this variable.
     95          */
     96          #pragma location = ".flowctrl"

   \                                 In  segment .flowctrl, align 1, keep-with-next, root
     97          __root __no_init sSystemFlowCtrl g_sRfTxFlowCtrl;
   \                     g_sRfTxFlowCtrl:
   \   00000000                      DS8 3
     98          
     99          /** \brief <b>g_pRfTxBufStateMachine</b>
    100              points to look up table of the SW state machine used for
    101              TXMode(Buffered).
    102              \details
    103              This pointer is initialized at RFTX module initialization
    104              in function ::ATA_rfTxInit_C. If the user wants to change this flow,
    105              the pointer should be modified after initialization.
    106          */
    107          #pragma location = ".flowctrl"

   \                                 In  segment .flowctrl, align 1, keep-with-next, root
    108          __root __no_init sysFlowStateMachineFuncLut_t *g_pRfTxBufStateMachine;
   \                     g_pRfTxBufStateMachine:
   \   00000000                      DS8 2
    109          
    110          //lint -esym(9003, g_sRfTxBufStateMachineLut) FlSc (26.05.2014)
    111          /* disable lint note 9003 - could define variable 'g_sRfTxBufStateMachineLut' at block scope
    112           * variable shall be accessible from outside via flash software or other library
    113           * modules
    114           */
    115          /** <b>g_sRfTxBufStateMachineLut</b>
    116              look up table of the SW state machine used for TXMode (Buffered only).
    117              \details
    118              \li ATA_rfTxInitTxSSM_C:
    119                  this sw state does the register initialization according to the selected
    120                  service channel configuration. Note: FE register are initialized after AVCC
    121                  is stable in SW state ::ATA_rfTxInitFrontEnd_C
    122              \li ATA_rfTxWait4AVCC_C:
    123                  waits until AVCC is stable and switches to next sw state if AVCC is stable.
    124              \li ATA_rfTxInitFrontEnd_C:
    125                  initializes the frontend registers according to the selected service channel
    126                  configuration
    127              \li ATA_rfTxWait4XTO_C:
    128                  waits until XTO is ready. If AVR is not running with CLKXTO4 the
    129                  core clock is switched to CLKXTO4
    130              \li ATA_rfTxStartSSM_C:
    131                  starts the sequencer state machine
    132              \li ATA_rfTxWait4SSMrdy_C:
    133                  waits until the sequencer state machine is ready
    134              \li ATA_rfTxWait4FillLevel_C:
    135                  checks the fill levels of S-FIFO and D-FIFO
    136              \li ATA_rfTxStartTxModulator_C:
    137                  configures the fill level interrupts, starts the TX Modulator and
    138                  SendTelegramSSM
    139              \li ATA_rfTxWait4TransmissionComplete_C:
    140                  waits until Transmission has completed
    141              \li ATA_rfTxShutdown_C:
    142                  shut down the RFTX module related state machine for TXMode(buffered and transparent),
    143                  VCO tuning and antenna tuning.
    144          
    145           */

   \                                 In  segment NEAR_F, align 1, keep-with-next, root
    146          __root sysFlowStateMachineFuncLut_t g_sRfTxBufStateMachineLut[] = {
   \                     g_sRfTxBufStateMachineLut:
   \   00000000   ........           DC16 ATA_rfTxInitTxSSM_C/2, ATA_rfTxWait4AVCC_C/2
   \   00000004   ........           DC16 ATA_rfTxInitFrontEnd_C/2, ATA_rfTxWait4XTO_C/2
   \   00000008   ........           DC16 ATA_rfTxStartTxBufSSM_C/2, ATA_rfTxWait4SSMrdy_C/2
   \   0000000C   ........           DC16 ATA_rfTxWait4FillLevel_C/2, ATA_rfTxStartTxModulator_C/2
   \   00000010   ........           DC16 ATA_rfTxWait4TransmissionComplete_C/2, ATA_rfTxShutdown_C/2
    147              ATA_rfTxInitTxSSM_C,
    148              ATA_rfTxWait4AVCC_C,
    149              ATA_rfTxInitFrontEnd_C,
    150              ATA_rfTxWait4XTO_C,
    151              ATA_rfTxStartTxBufSSM_C,
    152              ATA_rfTxWait4SSMrdy_C,
    153              ATA_rfTxWait4FillLevel_C,
    154              ATA_rfTxStartTxModulator_C,
    155              ATA_rfTxWait4TransmissionComplete_C,
    156              ATA_rfTxShutdown_C
    157          };
    158          
    159          /** \brief <b>g_pRfTxTransStateMachine</b>
    160              points to look up table of the SW state machine used for
    161              TXMode(Transparent mode only).
    162              \details
    163              This pointer is initialized at RFTX module initialization
    164              in function ATA_rfTxInit_C. If the user wants to change this flow,
    165              the pointer should be modified after initialization.
    166          */
    167          #pragma location = ".flowctrl"

   \                                 In  segment .flowctrl, align 1, keep-with-next, root
    168          __root __no_init sysFlowStateMachineFuncLut_t *g_pRfTxTransStateMachine;
   \                     g_pRfTxTransStateMachine:
   \   00000000                      DS8 2
    169          
    170          
    171          //lint -esym(9003, g_sRfTxTransStateMachineLut) FlSc (26.05.2014)
    172          /* disable lint note 9003 - could define variable 'g_sRfTxTransStateMachineLut' at block scope
    173           * variable shall be accessible from outside via flash software or other library
    174           * modules
    175           */
    176          /** <b>g_sRfTxTransStateMachineLut</b>
    177              look up table of the SW state machine used for TXMode (Transparent mode only).
    178              \details
    179              \li ATA_rfTxInitTxSSM_C:
    180                  this SW state does the register initialization according to the selected
    181                  service channel configuration. Note: FE register are initialized after AVCC
    182                  is stable in SW state ::ATA_rfTxInitFrontEnd_C
    183              \li ATA_rfTxWait4AVCC_C:
    184                  waits until AVCC is stable and switches to next sw state if AVCC is stable.
    185              \li ATA_rfTxInitFrontEnd_C:
    186                  initializes the frontend registers according to the selected service channel
    187                  configuration
    188              \li ATA_rfTxWait4XTO_C:
    189                  waits until XTO is ready. If AVR is not running with CLKXTO4 the
    190                  core clock is switched to CLKXTO4
    191              \li ATA_rfTxStartSSM_C:
    192                  starts the sequencer state machine
    193              \li ATA_rfTxWait4SSMrdy_C:
    194                  waits until the sequencer state machine is ready
    195              \li ATA_rfTxTransparentMode_C:
    196                  is an empty function. This sw state is reached after TXMode(transparent)
    197                  has started correctly
    198              \li ATA_rfTxShutdown_C:
    199                  shut down the RFTX module related state machine for TXMode(buffered and transparent),
    200                  VCO tuning and antenna tuning.
    201          
    202           */

   \                                 In  segment NEAR_F, align 1, keep-with-next, root
    203          __root sysFlowStateMachineFuncLut_t g_sRfTxTransStateMachineLut[] = {
   \                     g_sRfTxTransStateMachineLut:
   \   00000000   ........           DC16 ATA_rfTxInitTxSSM_C/2, ATA_rfTxWait4AVCC_C/2
   \   00000004   ........           DC16 ATA_rfTxInitFrontEnd_C/2, ATA_rfTxWait4XTO_C/2
   \   00000008   ........           DC16 ATA_rfTxStartTxTransSSM_C/2, ATA_rfTxWait4SSMrdy_C/2
   \   0000000C   ........           DC16 ATA_rfTxTransparentMode_C/2, ATA_rfTxShutdown_C/2
    204              ATA_rfTxInitTxSSM_C,
    205              ATA_rfTxWait4AVCC_C,
    206              ATA_rfTxInitFrontEnd_C,
    207              ATA_rfTxWait4XTO_C,
    208              ATA_rfTxStartTxTransSSM_C,
    209              ATA_rfTxWait4SSMrdy_C,
    210              ATA_rfTxTransparentMode_C,
    211              ATA_rfTxShutdown_C
    212          };
    213          
    214          
    215          /*---------------------------------------------------------------------------*/
    216          /*  IMPLEMENTATION                                                           */
    217          /*---------------------------------------------------------------------------*/
    218          /*---------------------------------------------------------------------------*/
    219          /** \brief <b>ATA_rfTxInit_C</b>
    220              initializes the RFTX module. This function should be executed before
    221              starting RFTX.
    222          
    223              Variable Usage:
    224              \li [out] ::g_sRfTx Global RF Tx component data
    225              \li [out] ::g_pRfTxBufStateMachine Global RF Tx (buffered) statemachine
    226              \li [out] ::g_pRfTxTransStateMachine Global RF Tx (transparent) statemachine
    227              \li [out] ::g_pRfTxVcoTuneStateMachine Global RF Tx (VCO tuning) statemachine
    228              \li [out] ::g_pRfTxAntTuneStateMachine Global RF Tx (Antenna tuning) statemachine
    229              \li [out] ::g_bVcoTuningResult Global RF Tx VCO tuning component data
    230              \li [out] ::g_bAntennaTuningResult Global RF Tx Antenna tuning component data
    231              \li [in] ::g_sRfTxBufStateMachineLut Global RF Tx (buffered) statemachine lookup table
    232              \li [in] ::g_sRfTxTransStateMachineLut Global RF Tx (transparent) statemachine lookup table
    233              \li [in] ::g_sRfTxVcoTuneStateMachineLut Global RF Tx (VCO tuning) statemachine lookup table
    234              \li [in] ::g_sRfTxAntTuneStateMachineLut Global RF Tx (Antenna tuning) statemachine lookup table
    235          
    236              \image html ATA_rfTxInit_C.png
    237          
    238              \internal
    239              \li 010: Power-up/initialize D-FIFO and S-FIFO used for data bufferint in RFTX
    240              \li 020: Enable overflow/underflow interrupts for D-FIFO and S-FIFO to signal
    241                        errorneous usage of D-FIFO and S-FIFO to the customer application
    242              \li 030: Initialize the state machine pointers for controlling
    243                           - TXMode buffered (::g_pRfTxBufStateMachine)
    244                           - TXMode transparent (::g_pRfTxTransStateMachine)
    245                           - VCO Tuning (::g_pRfTxVcoTuneStateMachine)
    246                           - Antenna Tuning (::g_pRfTxAntTuneStateMachine)
    247              \li 040: Initialize RFTX Module global variables which contains
    248                           - VCO tuning result (::g_bVcoTuningResult)
    249                           - Antenna tuning result (::g_bAntennaTuningResult)
    250              \li 050: Initialize RFTX Module configuration ::g_sRfTx
    251          
    252              \Derived{No}
    253          
    254              \Rationale{N/A}
    255          
    256              \Traceability{Primus2P-844}
    257              \endinternal
    258          \n
    259          */
    260          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    261          VOIDFUNC ATA_rfTxInit_C()
   \                     ATA_rfTxInit_C:
    262          {
    263              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxInit_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxInit_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxInit_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
    264          
    265              /* LLR-Ref: 010 */
    266              ATA_POWERON_C(PRR2, PRDF)
   \   00000018   9813               CBI     0x02, 0x03
    267              ATA_POWERON_C(PRR2, PRSF)
   \   0000001A   9812               CBI     0x02, 0x02
    268          
    269              /* LLR-Ref: 020 */
    270              ATA_SETBITMASK_C(DFI,BM_DFERIM)
   \   0000001C   910000D9           LDS     R16, 217
   \   00000020   6002               ORI     R16, 0x02
   \   00000022   930000D9           STS     217, R16
    271              ATA_SETBITMASK_C(SFI,BM_SFERIM)
   \   00000026   910000E0           LDS     R16, 224
   \   0000002A   6002               ORI     R16, 0x02
   \   0000002C   930000E0           STS     224, R16
    272          
    273              /* LLR-Ref: 030 */
    274              g_pRfTxBufStateMachine     = g_sRfTxBufStateMachineLut;
   \   00000030   ....               LDI     R16, LOW(g_sRfTxBufStateMachineLut)
   \   00000032   ....               LDI     R17, (g_sRfTxBufStateMachineLut) >> 8
   \   00000034   9300....           STS     g_pRfTxBufStateMachine, R16
   \   00000038   9310....           STS     (g_pRfTxBufStateMachine + 1), R17
    275              g_pRfTxTransStateMachine   = g_sRfTxTransStateMachineLut;
   \   0000003C   ....               LDI     R16, LOW(g_sRfTxTransStateMachineLut)
   \   0000003E   ....               LDI     R17, (g_sRfTxTransStateMachineLut) >> 8
   \   00000040   9300....           STS     g_pRfTxTransStateMachine, R16
   \   00000044   9310....           STS     (g_pRfTxTransStateMachine + 1), R17
    276              g_pRfTxVcoTuneStateMachine = g_sRfTxVcoTuneStateMachineLut;
   \   00000048   ....               LDI     R16, LOW(g_sRfTxVcoTuneStateMachineLut)
   \   0000004A   ....               LDI     R17, (g_sRfTxVcoTuneStateMachineLut) >> 8
   \   0000004C   9300....           STS     g_pRfTxVcoTuneStateMachine, R16
   \   00000050   9310....           STS     (g_pRfTxVcoTuneStateMachine + 1), R17
    277              g_pRfTxAntTuneStateMachine = g_sRfTxAntTuneStateMachineLut;
   \   00000054   ....               LDI     R16, LOW(g_sRfTxAntTuneStateMachineLut)
   \   00000056   ....               LDI     R17, (g_sRfTxAntTuneStateMachineLut) >> 8
   \   00000058   9300....           STS     g_pRfTxAntTuneStateMachine, R16
   \   0000005C   9310....           STS     (g_pRfTxAntTuneStateMachine + 1), R17
    278          
    279              /* LLR-Ref: 040 */
    280              g_bVcoTuningResult = 0U;
   \   00000060                      REQUIRE ?Subroutine0
   \   00000060                      REQUIRE _A_SREG
   \   00000060                      REQUIRE _A_TRCDR
   \   00000060                      REQUIRE _A_TRCIDL
   \   00000060                      REQUIRE _A_TRCIDH
   \   00000060                      REQUIRE _A_PRR2
   \   00000060                      REQUIRE _A_DFI
   \   00000060                      REQUIRE _A_SFI
   \   00000060                      ;               // Fall through to label ?Subroutine0
    281              g_bAntennaTuningResult = 0U;
    282          
    283              /* LLR-Ref: 050 */
    284              g_sRfTx.bFlags      = 0x00U;
    285              g_sRfTx.bTuneFlags  = 0x00U;
    286              g_sRfTx.bStatus     = 0x00U;
    287              g_sRfTx.bConfig     = 0x00U;
    288              g_sRfTx.pAddress   = 0x0000U;
    289          
    290          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   E000               LDI     R16, 0
   \   00000002   9300....           STS     g_bVcoTuningResult, R16
   \   00000006   9300....           STS     g_bAntennaTuningResult, R16
   \   0000000A   9300....           STS     g_sRfTx, R16
   \   0000000E   9300....           STS     (g_sRfTx + 1), R16
   \   00000012   9300....           STS     (g_sRfTx + 2), R16
   \   00000016   9300....           STS     (g_sRfTx + 3), R16
   \   0000001A   9300....           STS     (g_sRfTx + 4), R16
   \   0000001E   9300....           STS     (g_sRfTx + 5), R16
   \   00000022   9508               RET
    291          
    292          /*---------------------------------------------------------------------------*/
    293          /** \brief <b>ATA_rfTxClose_C</b>
    294              closes the RFTX module by disabling RFTX specific parts.
    295              
    296              Variable Usage:
    297              \li [out] ::g_sRfTx Global RF Tx component data
    298              \li [out] ::g_bVcoTuningResult Global RF Tx VCO tuning component data
    299              \li [out] ::g_bAntennaTuningResult Global RF Tx Antenna tuning component data
    300          
    301              \image html ATA_rfTxClose_C.png
    302          
    303              \internal
    304              \li 010: Close Timer2 by calling function ::ATA_timer2Close_C and Timer3 by
    305                       calling function ::ATA_timer3Close_C to allow usage in customer
    306                       application
    307              \li 020: Remove power from the following HW IPs
    308                           - TXDSP module
    309                           - CRC module
    310                           - D-FIFO
    311                           - S-FIFO
    312                           - Sequencer State Machine
    313                           - TX Modulator module
    314              \li 030: Reset RFTX Module global variables which contains
    315                           - VCO tuning result (::g_bVcoTuningResult)
    316                           - Antenna tuning result (::g_bAntennaTuningResult)
    317              \li 040: Reset RFTX Module configuration ::g_sRfTx
    318          
    319              \Derived{No}
    320          
    321              \Rationale{N/A}
    322          
    323              \Traceability{Primus2P-846}
    324              \endinternal
    325          \n
    326           */
    327          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    328          VOIDFUNC ATA_rfTxClose_C(void)
   \                     ATA_rfTxClose_C:
    329          {
    330              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxClose_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxClose_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxClose_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
    331          
    332              /* LLR-Ref: 010 */
    333              ATA_timer2Close_C();
   \   00000018   ........           CALL    ATA_timer2Close_C
    334              ATA_timer3Close_C();
   \   0000001C   ........           CALL    ATA_timer3Close_C
    335          
    336              /* LLR-Ref: 020 */
    337              ATA_POWEROFF_C(PRR0, PRTXDC)
   \   00000020   9AD2               SBI     0x1A, 0x02
    338              ATA_POWEROFF_C(PRR0, PRCRC)
   \   00000022   9AD3               SBI     0x1A, 0x03
    339          
    340              ATA_POWEROFF_C(PRR2, PRDF)
   \   00000024   9A13               SBI     0x02, 0x03
    341              ATA_POWEROFF_C(PRR2, PRSF)
   \   00000026   9A12               SBI     0x02, 0x02
    342              ATA_POWEROFF_C(PRR2, PRSSM)
   \   00000028   9A17               SBI     0x02, 0x07
    343              ATA_POWEROFF_C(PRR2, PRTM)
   \   0000002A   9A16               SBI     0x02, 0x06
    344          
    345              /* LLR-Ref: 030 */
    346              g_bVcoTuningResult = 0U;
   \   0000002C   ....               RJMP    ?Subroutine0
   \   0000002E                      REQUIRE _A_SREG
   \   0000002E                      REQUIRE _A_TRCDR
   \   0000002E                      REQUIRE _A_TRCIDL
   \   0000002E                      REQUIRE _A_TRCIDH
   \   0000002E                      REQUIRE _A_PRR0
   \   0000002E                      REQUIRE _A_PRR2
    347              g_bAntennaTuningResult = 0U;
    348          
    349              /* LLR-Ref: 040 */
    350              g_sRfTx.bFlags      = 0x00U;
    351              g_sRfTx.bTuneFlags  = 0x00U;
    352              g_sRfTx.bStatus     = 0x00U;
    353              g_sRfTx.bConfig     = 0x00U;
    354              g_sRfTx.pAddress   = 0x0000U;
    355          }
    356          
    357          /*---------------------------------------------------------------------------*/
    358          /** \brief <b>ATA_rfTxFillDFifo_C</b>
    359              writes payload data to the D-FIFO.
    360          
    361              \param[in]      bLen     Number of payload bytes to be written to D-FIFO
    362              \param[in]      pData    Pointer to the start of payload bytes
    363          
    364              \image html ATA_rfTxFillDFifo_C.png
    365          
    366              \internal
    367              \li 010: Set data direction of D-FIFO to TX and store previous setting
    368              \li 020: Copy length payload bytes starting from address pData to DFD
    369                        register of D-FIFO.
    370              \li 030: Restore data direction of D-FIFO
    371          
    372              \Derived{No}
    373          
    374              \Rationale{N/A}
    375          
    376              \Traceability{Primus2P-845}
    377              \endinternal
    378          \n
    379          */
    380          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    381          VOIDFUNC ATA_rfTxFillDFifo_C(uint8_t bLen, uint8_t *pData)
   \                     ATA_rfTxFillDFifo_C:
    382          {
    383              /* LLR-Ref: 010 */
    384              uint8_t tmp = DFC & BM_DFDRA;
   \   00000000   9140....           LDS     R20, _A_DFC
    385              ATA_SETBITMASK_C(DFC,BM_DFDRA)
   \   00000004   911000DA           LDS     R17, 218
   \   00000008   6810               ORI     R17, 0x80
   \   0000000A   931000DA           STS     218, R17
    386          
    387              /* LLR-Ref: 020 */
    388              for(uint8_t i=0; i<bLen;i++){
   \   0000000E   E010               LDI     R17, 0
   \   00000010   C006               RJMP    ??ATA_rfTxFillDFifo_C_0
    389                  DFD = *pData++;
   \                     ??ATA_rfTxFillDFifo_C_1:
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   9151               LD      R21, Z+
   \   00000016   019F               MOVW    R19:R18, R31:R30
   \   00000018   9350....           STS     _A_DFD, R21
    390              }
   \   0000001C   9513               INC     R17
   \                     ??ATA_rfTxFillDFifo_C_0:
   \   0000001E   1710               CP      R17, R16
   \   00000020   F3C0               BRCS    ??ATA_rfTxFillDFifo_C_1
    391          
    392              /* LLR-Ref: 030 */
    393              if (!tmp) {
   \   00000022   FB47               BST     R20, 7
   \   00000024   F02E               BRTS    ??ATA_rfTxFillDFifo_C_2
    394                  ATA_CLEARBITMASK_C(DFC,BM_DFDRA)
   \   00000026   910000DA           LDS     R16, 218
   \   0000002A   770F               ANDI    R16, 0x7F
   \   0000002C   930000DA           STS     218, R16
    395              }
    396          }
   \                     ??ATA_rfTxFillDFifo_C_2:
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_DFC
   \   00000032                      REQUIRE _A_DFD
    397          
    398          /*---------------------------------------------------------------------------*/
    399          /** \brief <b>ATA_rfTxFillSFifo_C</b>
    400              writes preamble data to the S-FIFO.
    401          
    402              \param[in]      bLen     Number of payload bytes to be written to S-FIFO
    403              \param[in]      pData    Pointer to the start of preamble bytes
    404          
    405              \image html ATA_rfTxFillSFifo_C.png
    406          
    407              \internal
    408              \li 010: Set data direction of S-FIFO to TX and store previous setting
    409              \li 020: Copy length preamble bytes starting from address pData to SFD
    410                        register of S-FIFO
    411              \li 030: Restore data direction of S-FIFO
    412          
    413              \Derived{No}
    414          
    415              \Rationale{N/A}
    416          
    417              \Traceability{Primus2P-845}
    418              \endinternal
    419          \n
    420          */
    421          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    422          VOIDFUNC ATA_rfTxFillSFifo_C(uint8_t bLen, uint8_t *pData)
   \                     ATA_rfTxFillSFifo_C:
    423          {
    424              /* LLR-Ref: 010 */
    425              uint8_t tmp = SFC & BM_SFDRA;
   \   00000000   9140....           LDS     R20, _A_SFC
    426              ATA_SETBITMASK_C(SFC,BM_SFDRA)
   \   00000004   911000E1           LDS     R17, 225
   \   00000008   6810               ORI     R17, 0x80
   \   0000000A   931000E1           STS     225, R17
    427          
    428              /* LLR-Ref: 020 */
    429              for(uint8_t i=0; i<bLen;i++){
   \   0000000E   E010               LDI     R17, 0
   \   00000010   C006               RJMP    ??ATA_rfTxFillSFifo_C_0
    430                  SFD = *pData++;
   \                     ??ATA_rfTxFillSFifo_C_1:
   \   00000012   01F9               MOVW    R31:R30, R19:R18
   \   00000014   9151               LD      R21, Z+
   \   00000016   019F               MOVW    R19:R18, R31:R30
   \   00000018   9350....           STS     _A_SFD, R21
    431              }
   \   0000001C   9513               INC     R17
   \                     ??ATA_rfTxFillSFifo_C_0:
   \   0000001E   1710               CP      R17, R16
   \   00000020   F3C0               BRCS    ??ATA_rfTxFillSFifo_C_1
    432          
    433              /* LLR-Ref: 030 */
    434              if (!tmp) {
   \   00000022   FB47               BST     R20, 7
   \   00000024   F02E               BRTS    ??ATA_rfTxFillSFifo_C_2
    435                  ATA_CLEARBITMASK_C(SFC,BM_SFDRA)
   \   00000026   910000E1           LDS     R16, 225
   \   0000002A   770F               ANDI    R16, 0x7F
   \   0000002C   930000E1           STS     225, R16
    436              }
    437          }
   \                     ??ATA_rfTxFillSFifo_C_2:
   \   00000030   9508               RET
   \   00000032                      REQUIRE _A_SFC
   \   00000032                      REQUIRE _A_SFD
    438          
    439          /*---------------------------------------------------------------------------*/
    440          /** \brief <b>ATA_rfTxStartTx_C</b>
    441              this function should be called to start RFTX.
    442          
    443              \param[in]      bConfig     Configuration of selected RFTXMode. For details see ::g_sRfTx .bConfig
    444              \param[in]      pAddress    Pointer to Service/Channel configuration in EEPROM/SRAM
    445          
    446              Variable Usage:
    447              \li [in,out] ::g_sRfTx Global RF Tx component data
    448              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    449              \li [in] ::g_pRfTxBufStateMachine Global RF Tx (buffered) statemachine
    450              \li [in] ::g_pRfTxTransStateMachine Global RF Tx (transparent) statemachine
    451          
    452              \image html ATA_rfTxStartTx_C.png
    453          
    454              \internal
    455              \li 010: Stop currently running sequencer state machines to avoid
    456                       resource conflicts of sequencer state machine hardware\n\n
    457                       Note: Frontend register initialization is done in SW state
    458                       ::ATA_rfTxInitFrontEnd_C for all state machines in module RFTX
    459          
    460              \li 020: Enable AVCC to access the Frontend register after AVCC is stable
    461          
    462              \li 030: Initialize ::g_sRfTx with content of function arguments config and
    463                       pAddress. Signal RFTX Module active via flag ::g_sRfTx .bStatus[4]
    464          
    465              \li 040: Initialize ::g_sRfTxCurrentService by calling function
    466                       ::ATA_rfTxInitCurrentService_C
    467          
    468              \li 050: IF an error occured during initialization of the current RF Tx service,
    469                       THEN\n
    470                          Deactivate active signal of RF Tx module via flag ::g_sRfTx
    471                          .bStatus[4] being set to 0, AND Disable AVCC since it is not needed.
    472          
    473              \li 060: ELSE\n
    474                         Signal Direct Switching if possible, AND
    475                         Initialize SW state machine by setting SW state machine index to 0
    476                         and apply correct sw state machine to SW state machine pointer
    477                         in case of TXMode(transparent) set TMDI pin to input.\n
    478                       ENDIF
    479          
    480              \Derived{No}
    481          
    482              \Rationale{N/A}
    483          
    484              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    485              \endinternal
    486          \n
    487          */
    488          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    489          VOIDFUNC ATA_rfTxStartTx_C(uint8_t bConfig, uint8_t *pAddress)
   \                     ATA_rfTxStartTx_C:
    490          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F40               MOV     R20, R16
    491              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxStartTx_C, bConfig);
   \   00000004   B75F               IN      R21, 0x3F
   \   00000006   94F8               CLI
   \   00000008   9300....           STS     _A_TRCDR, R16
   \   0000000C   ....               LDI     R16, LOW(ATA_rfTxStartTx_C/2)
   \   0000000E   9300....           STS     _A_TRCIDL, R16
   \   00000012   ....               LDI     R16, (ATA_rfTxStartTx_C/2) >> 8
   \   00000014   9300....           STS     _A_TRCIDH, R16
   \   00000018   BF5F               OUT     0x3F, R21
    492          
    493              uint8_t bDirectSwitching = 0U;
    494          
    495              /* LLR-Ref: 010 */
    496              SSMRR = BM_SSMST;
   \   0000001A   E002               LDI     R16, 2
   \   0000001C   9300....           STS     _A_SSMRR, R16
    497              bDirectSwitching = g_sRfTx.bFlags & BM_RFTXCONFIG_BFLAGS_RDY4TX;
   \   00000020   9180....           LDS     R24, g_sRfTx
    498          
    499              /* LLR-Ref: 020 */
    500              ATA_SETBITMASK_C(SUPCR,BM_AVEN)
   \   00000024   910000CC           LDS     R16, 204
   \   00000028   6100               ORI     R16, 0x10
   \   0000002A   930000CC           STS     204, R16
    501          
    502              /* LLR-Ref: 030 */
    503              g_sRfTx.bFlags = 0x00U;
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     g_sRfTx, R16
    504              g_sRfTx.bStatus = BM_RFTXCONFIG_BSTATUS_ACTIVE;
   \   00000034   E100               LDI     R16, 16
   \   00000036   9300....           STS     (g_sRfTx + 2), R16
    505              g_sRfTx.bConfig = bConfig;
   \   0000003A   9340....           STS     (g_sRfTx + 3), R20
    506              g_sRfTx.pAddress = pAddress;
   \   0000003E   9320....           STS     (g_sRfTx + 4), R18
   \   00000042   9330....           STS     (g_sRfTx + 5), R19
    507              /* --P2P-3655-- */
    508              g_sRfTx.bCmcrSetting = CMCR;
   \   00000046   9100....           LDS     R16, _A_CMCR
   \   0000004A   9300....           STS     (g_sRfTx + 6), R16
    509          
    510              /* LLR-Ref: 040 */
    511              ATA_rfTxInitCurrentService_C();
   \   0000004E   ....               RCALL   ATA_rfTxInitCurrentService_C
    512          
    513              if (g_sRfTx.bFlags & BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000050   ....               LDI     R30, LOW(g_sRfTx)
   \   00000052   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000054   8100               LD      R16, Z
   \   00000056   FF07               SBRS    R16, 7
   \   00000058   C009               RJMP    ??ATA_rfTxStartTx_C_0
    514              {
    515                  /* LLR-Ref: 050 */
    516                  ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_ACTIVE)
   \   0000005A   8102               LDD     R16, Z+2
   \   0000005C   7E0F               ANDI    R16, 0xEF
   \   0000005E   8302               STD     Z+2, R16
    517                  ATA_CLEARBITMASK_C(SUPCR,BM_AVEN)
   \   00000060   910000CC           LDS     R16, 204
   \   00000064   7E0F               ANDI    R16, 0xEF
   \   00000066   930000CC           STS     204, R16
   \   0000006A   C01E               RJMP    ??ATA_rfTxStartTx_C_1
    518              }
    519              else
    520              {
    521                  /* LLR-Ref: 060 */
    522                  if(bDirectSwitching)
   \                     ??ATA_rfTxStartTx_C_0:
   \   0000006C   FB86               BST     R24, 6
   \   0000006E   F41E               BRTC    ??ATA_rfTxStartTx_C_2
    523                  {
    524                      ATA_SETBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_DIRECT_SWITCH)
   \   00000070   8102               LDD     R16, Z+2
   \   00000072   6800               ORI     R16, 0x80
   \   00000074   8302               STD     Z+2, R16
    525                  }
    526          
    527                  g_sRfTxFlowCtrl.bIndex = 0U;
   \                     ??ATA_rfTxStartTx_C_2:
   \   00000076   E000               LDI     R16, 0
   \   00000078   9300....           STS     g_sRfTxFlowCtrl, R16
    528          
    529                  if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE)
   \   0000007C   8103               LDD     R16, Z+3
   \   0000007E   FF05               SBRS    R16, 5
   \   00000080   C00B               RJMP    ??ATA_rfTxStartTx_C_3
    530                  {
    531                      /* TXMode(transparent) */
    532                      g_sRfTxFlowCtrl.fpLut  = g_pRfTxTransStateMachine;
   \   00000082   9100....           LDS     R16, g_pRfTxTransStateMachine
   \   00000086   9110....           LDS     R17, (g_pRfTxTransStateMachine + 1)
   \   0000008A   9300....           STS     (g_sRfTxFlowCtrl + 1), R16
   \   0000008E   9310....           STS     (g_sRfTxFlowCtrl + 2), R17
    533                      
    534                      ATA_CLEARBITMASK_C(DDRD,BM_TMDI)
   \   00000092   9854               CBI     0x0A, 0x04
    535                      ATA_CLEARBITMASK_C(PORTD,BM_TMDI)
   \   00000094   985C               CBI     0x0B, 0x04
   \   00000096   C008               RJMP    ??ATA_rfTxStartTx_C_1
    536                  }
    537                  else
    538                  {
    539                      /* TXMode(buffered) */
    540                      g_sRfTxFlowCtrl.fpLut  = g_pRfTxBufStateMachine;
   \                     ??ATA_rfTxStartTx_C_3:
   \   00000098   9100....           LDS     R16, g_pRfTxBufStateMachine
   \   0000009C   9110....           LDS     R17, (g_pRfTxBufStateMachine + 1)
   \   000000A0   9300....           STS     (g_sRfTxFlowCtrl + 1), R16
   \   000000A4   9310....           STS     (g_sRfTxFlowCtrl + 2), R17
    541                  }
    542              }
    543          }
   \                     ??ATA_rfTxStartTx_C_1:
   \   000000A8                      REQUIRE ?Subroutine3
   \   000000A8                      REQUIRE _A_SREG
   \   000000A8                      REQUIRE _A_TRCDR
   \   000000A8                      REQUIRE _A_TRCIDL
   \   000000A8                      REQUIRE _A_TRCIDH
   \   000000A8                      REQUIRE _A_SSMRR
   \   000000A8                      REQUIRE _A_SUPCR
   \   000000A8                      REQUIRE _A_CMCR
   \   000000A8                      REQUIRE _A_DDRD
   \   000000A8                      REQUIRE _A_PORTD
   \   000000A8                      ;               // Fall through to label ?Subroutine3

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   9189               LD      R24, Y+
   \   00000002   9508               RET
    544          
    545          /*---------------------------------------------------------------------------*/
    546          /** \brief <b>ATA_rfTxStop_C</b>
    547              is used as API function to shutdown a currently running TXMode
    548              
    549              \image html ATA_rfTxStop_C.png
    550          
    551              \internal
    552              \li 010: Shutdown currently running TXMode by calling function
    553                       ::ATA_rfTxShutdown_C
    554          
    555              \Derived{No}
    556          
    557              \Rationale{N/A}
    558          
    559              \Traceability{Primus2P-895}
    560              \endinternal
    561          \n
    562          */
    563          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    564          VOIDFUNC ATA_rfTxStop_C(void)
   \                     ATA_rfTxStop_C:
    565          {
    566              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxStop_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxStop_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxStop_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
    567              /* LLR-Ref: 010 */
    568              ATA_rfTxShutdown_C();
   \   00000018   ....               RJMP    ATA_rfTxShutdown_C
   \   0000001A                      REQUIRE _A_SREG
   \   0000001A                      REQUIRE _A_TRCDR
   \   0000001A                      REQUIRE _A_TRCIDL
   \   0000001A                      REQUIRE _A_TRCIDH
    569          }
    570          
    571          /*---------------------------------------------------------------------------*/
    572          /** \brief <b>ATA_rfTxProcessing_C</b>
    573              triggers the active SW state of currently running SW state machine. This
    574              function should be placed in main loop context or should be run periodically
    575              to ensure RFTX functionality.
    576          
    577              Variable Usage:
    578              \li [in] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    579          
    580              \image html ATA_rfTxProcessing_C.png
    581          
    582              \internal
    583              \li 010: Decode and execute currently active SW state
    584          
    585              \Derived{No}
    586          
    587              \Rationale{N/A}
    588          
    589              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    590              \endinternal
    591          \n
    592          */
    593          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    594          VOIDFUNC ATA_rfTxProcessing_C(void)
   \                     ATA_rfTxProcessing_C:
    595          {
    596              sysFlowStateMachineFunc_t fpFunc;
    597          
    598              /* LLR-Ref: 010 */
    599              fpFunc = *(sysFlowStateMachineFunc_t)g_sRfTxFlowCtrl.fpLut[g_sRfTxFlowCtrl.bIndex];
   \   00000000   9100....           LDS     R16, g_sRfTxFlowCtrl
    600              fpFunc();
   \   00000004   91E0....           LDS     R30, (g_sRfTxFlowCtrl + 1)
   \   00000008   91F0....           LDS     R31, (g_sRfTxFlowCtrl + 2)
   \   0000000C   E012               LDI     R17, 2
   \   0000000E   9F01               MUL     R16, R17
   \   00000010   0DE0               ADD     R30, R0
   \   00000012   1DF1               ADC     R31, R1
   \   00000014   9105               LPM     R16, Z+
   \   00000016   91F4               LPM     R31, Z
   \   00000018   2FE0               MOV     R30, R16
   \   0000001A   9409               IJMP
    601          }
    602          
    603          /*---------------------------------------------------------------------------*/
    604          /** \brief <b>ATA_rfTxInitTxSSM_C</b>
    605              this sw state does the register initialization according to the selected
    606              service channel configuration. Note: FE register are initialized after AVCC
    607              is stable in sw state ::ATA_rfTxInitFrontEnd_C
    608          
    609              Variable Usage:
    610              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    611              \li [in] ::g_sRfTx Global RF Tx component data
    612              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
    613          
    614              \image html ATA_rfTxInitTxSSM_C.png
    615          
    616              \internal
    617              \li 010: Power up the TX DSP HW block and the Sequencer State Machine HW block
    618              \li 020: Initialize the frequency registers with selected Service/Channel
    619                       configuration via function ::ATA_rfTxFrequencySettings_C
    620              \li 030: Enable the Sigma-Delta Modulator by accessing FSEN.SDEN
    621              \li 040: Set FSCR.TXMS[1..0] according to selected TXMode
    622                           - TXMode(buffered)      FSCR.TXMS = 10 - Tx Modulator serial output
    623                           - TXMode(transparent)   FSCR.TXMS = 01 - TMDI input pin
    624              \li 050: Set FSCR.TXMOD according to selected modulation type
    625                           - ASK Modulation: FSCR.SFM   = 0
    626                                             FSCR.TXMOD = 1
    627                           - FSK Modulation: FSCR.SFM   = 1
    628              \li 060: Initialize following register according to service channel configuration
    629                           - FSFCR
    630                           - GACDIVL/H
    631              \li 070: Initialize TX Modulator registers by calling function
    632                       ::ATA_rfTxSetupTxModulator_C
    633              \li 080: Initialize Sequencer State Machine registers by calling function
    634                       ::ATA_rfTxConfigureTxSSM_C
    635              \li 090: Switch to next sw state by incrementing ::g_sRfTxFlowCtrl .bIndex
    636          
    637              \Derived{No}
    638          
    639              \Rationale{N/A}
    640          
    641              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    642              \endinternal
    643          \n
    644          */
    645          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    646          VOIDFUNC ATA_rfTxInitTxSSM_C(void)
   \                     ATA_rfTxInitTxSSM_C:
    647          {
    648              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxInitTxSSM_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxInitTxSSM_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxInitTxSSM_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
    649              /* LLR-Ref: 010 */
    650              ATA_POWERON_C(PRR0, PRTXDC)
   \   00000018   98D2               CBI     0x1A, 0x02
    651              ATA_POWERON_C(PRR2, PRSSM)
   \   0000001A   9817               CBI     0x02, 0x07
    652          
    653              /* LLR-Ref: 020 */
    654              ATA_rfTxFrequencySettings_C();
   \   0000001C   ....               RCALL   ATA_rfTxFrequencySettings_C
    655          
    656              /* LLR-Ref: 030 */
    657              ATA_SETBITMASK_C(FSEN,BM_SDEN)
   \   0000001E   91000060           LDS     R16, 96
   \   00000022   6002               ORI     R16, 0x02
   \   00000024   93000060           STS     96, R16
    658          
    659              /* LLR-Ref: 040 */
    660              ATA_CLEARBITMASK_C(FSCR,BM_TXMOD)
   \   00000028   9878               CBI     0x0F, 0x00
    661          
    662              if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE) {
   \   0000002A   9100....           LDS     R16, (g_sRfTx + 3)
   \   0000002E   FF05               SBRS    R16, 5
   \   00000030   C002               RJMP    ??ATA_rfTxInitTxSSM_C_0
    663                  /* Transparent mode */
    664                  ATA_SETBITMASK_C(FSCR,BM_TXMS0)
   \   00000032   9A7A               SBI     0x0F, 0x02
   \   00000034   C001               RJMP    ??ATA_rfTxInitTxSSM_C_1
    665              }
    666              else {
    667                  /* Buffered mode */
    668                  ATA_SETBITMASK_C(FSCR,BM_TXMS1)
   \                     ??ATA_rfTxInitTxSSM_C_0:
   \   00000036   9A7B               SBI     0x0F, 0x03
    669              }
    670          
    671              /* LLR-Ref: 050 */
    672              if( g_sRfTxCurrentService.sPath.bTxSetPath[1] & BM_RFTXSERVICE_BTXSETPATH_MODULATION ) {
   \                     ??ATA_rfTxInitTxSSM_C_1:
   \   00000038   9100....           LDS     R16, (g_sRfTxCurrentService + 16)
   \   0000003C   FF07               SBRS    R16, 7
   \   0000003E   C002               RJMP    ??ATA_rfTxInitTxSSM_C_2
    673                  /* ASK modulation */
    674                  ATA_SETBITMASK_C(FSCR,BM_TXMOD)
   \   00000040   9A78               SBI     0x0F, 0x00
   \   00000042   C001               RJMP    ??ATA_rfTxInitTxSSM_C_3
    675              }
    676              else {
    677                  /* FSK modulation */
    678                  ATA_SETBITMASK_C(FSCR,BM_SFM)
   \                     ??ATA_rfTxInitTxSSM_C_2:
   \   00000044   9A79               SBI     0x0F, 0x01
    679              }
    680          
    681              /* LLR-Ref: 060 */
    682              FSFCR   = g_sRfTxCurrentService.sPath.bFSFCR;
   \                     ??ATA_rfTxInitTxSSM_C_3:
   \   00000046   9100....           LDS     R16, (g_sRfTxCurrentService + 12)
   \   0000004A   9300....           STS     _A_FSFCR, R16
    683              GACDIVL = g_sRfTxCurrentService.sPath.bGACDIV[0];
   \   0000004E   9100....           LDS     R16, (g_sRfTxCurrentService + 10)
   \   00000052   9300....           STS     _A_GACDIVL, R16
    684              GACDIVH = g_sRfTxCurrentService.sPath.bGACDIV[1];
   \   00000056   9100....           LDS     R16, (g_sRfTxCurrentService + 11)
   \   0000005A   9300....           STS     _A_GACDIVH, R16
    685          
    686              /* LLR-Ref: 070 */
    687              ATA_rfTxSetupTxModulator_C();
   \   0000005E   ....               RCALL   ATA_rfTxSetupTxModulator_C
    688          
    689              /* LLR-Ref: 080 */
    690              ATA_rfTxConfigureTxSSM_C();
   \   00000060   ....               RCALL   ATA_rfTxConfigureTxSSM_C
    691          
    692              /* LLR-Ref: 090 */
    693              g_sRfTxFlowCtrl.bIndex++;
   \   00000062                      REQUIRE ?Subroutine1
   \   00000062                      REQUIRE _A_SREG
   \   00000062                      REQUIRE _A_TRCDR
   \   00000062                      REQUIRE _A_TRCIDL
   \   00000062                      REQUIRE _A_TRCIDH
   \   00000062                      REQUIRE _A_PRR0
   \   00000062                      REQUIRE _A_PRR2
   \   00000062                      REQUIRE _A_FSEN
   \   00000062                      REQUIRE _A_FSCR
   \   00000062                      REQUIRE _A_FSFCR
   \   00000062                      REQUIRE _A_GACDIVL
   \   00000062                      REQUIRE _A_GACDIVH
   \   00000062                      ;               // Fall through to label ?Subroutine1
    694          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   00000004   9503               INC     R16
   \   00000006                      REQUIRE ??Subroutine8_0
   \   00000006                      ;               // Fall through to label ??Subroutine8_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine8_0:
   \   00000000   9300....           STS     g_sRfTxFlowCtrl, R16
   \   00000004   9508               RET
    695          
    696          /*---------------------------------------------------------------------------*/
    697          /** \brief <b>ATA_rfTxWait4AVCC_C</b>
    698              waits until AVCC is stable and switches to next sw state if AVCC is stable.
    699          
    700              Variable Usage:
    701              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    702              \li [in] ::g_sRfTx Global RF Tx component data
    703              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
    704          
    705              \image html ATA_rfTxWait4AVCC_C.png
    706          
    707              \internal
    708              \li 010: Clear AVCC related flags SUPFR.AVCCLF and SUPFR.AVCCRF
    709              \li 020: IF AVCC is stable, indicated by both flags SUPFR.AVCCLF and
    710                       SUPFR.AVCCRF being set to 0,\n
    711                       switch to next sw state by incrementing ::g_sRfTxFlowCtrl .bIndex
    712          
    713              \Derived{No}
    714          
    715              \Rationale{N/A}
    716          
    717              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    718              \endinternal
    719          \n
    720          */
    721          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    722          VOIDFUNC ATA_rfTxWait4AVCC_C(void)
   \                     ATA_rfTxWait4AVCC_C:
    723          {
    724              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxWait4AVCC_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxWait4AVCC_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxWait4AVCC_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
    725          
    726              /* LLR-Ref: 010 */
    727              ATA_SETBITMASK_C(SUPFR,(BM_AVCCLF | BM_AVCCRF))
   \   00000018   9100....           LDS     R16, _A_SUPFR
   \   0000001C   6003               ORI     R16, 0x03
   \   0000001E   9300....           STS     _A_SUPFR, R16
    728          
    729              /* LLR-Ref: 020 */
    730              if ( (SUPFR & (BM_AVCCLF|BM_AVCCRF)) == 0 )
   \   00000022   9100....           LDS     R16, _A_SUPFR
   \   00000026   7003               ANDI    R16, 0x03
   \   00000028   F429               BRNE    ??ATA_rfTxWait4AVCC_C_0
    731              {
    732                  g_sRfTxFlowCtrl.bIndex++;
   \   0000002A   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   0000002E   9503               INC     R16
   \   00000030   9300....           STS     g_sRfTxFlowCtrl, R16
    733              }
    734          }
   \                     ??ATA_rfTxWait4AVCC_C_0:
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_SREG
   \   00000036                      REQUIRE _A_TRCDR
   \   00000036                      REQUIRE _A_TRCIDL
   \   00000036                      REQUIRE _A_TRCIDH
   \   00000036                      REQUIRE _A_SUPFR
    735          
    736          /*---------------------------------------------------------------------------*/
    737          /** \brief <b>ATA_rfTxInitFrontEnd_C</b>
    738              initializes the frontend registers according to the selected service channel
    739              configuration.
    740          
    741              Variable Usage:
    742              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    743              \li [out] ::g_sDebug Global Debug component data
    744              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
    745          
    746              \image html ATA_rfTxInitFrontEnd_C.png
    747          
    748              \internal
    749              \li 010: Initialize FETN4 register with EEPROM content ::g_sEepFacLockRfFrontend
    750                       .bFETN4
    751              \li 020: Switch on XTO by setting FEEN1.XTOEN
    752              \li 040: Initialize FEAT register
    753              \li 050: Initialize FEBT register with with EEPROM content
    754                       ::g_sEepFacLockRfFrontend .bFEBT
    755              \li 060: Initialize FEPAC register
    756              \li 070: Initialize FEVCO register by calling function
    757                       ::ATA_rfTxFevcoCalculation_C
    758              \li 080: Set FEEN2.SDTX to switch the antenna SPDT_ANT to the TX power
    759                       amplifier SPDT_TX
    760              \li 090: Initialize FECR register
    761              \li 100: Initialize FEMS register
    762              \li 110: Initialize FEVCT register
    763              \li 120: Increase the internal bias current of the AVCC regulator if FEPAC
    764                       setting is less than 0x2B
    765              \li 130: Initialize FEANT register
    766              \li 140: Initialize FEALR register
    767              \li 150: Switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex
    768          
    769              \Derived{No}
    770          
    771              \Rationale{N/A}
    772          
    773              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868,\
    774                            Primus2P-2443}
    775              \endinternal
    776          \n
    777          */
    778          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   9621               ADIW    R29:R28, 1
   \   00000002   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next, root
    779          VOIDFUNC ATA_rfTxInitFrontEnd_C(void)
   \                     ATA_rfTxInitFrontEnd_C:
    780          {
   \   00000000   9721               SBIW    R29:R28, 1
    781              uint8_t tmp;
    782              eEepErrorCode sEepErrCode;
    783          
    784              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxInitFrontEnd_C, 0x00);
   \   00000002   B72F               IN      R18, 0x3F
   \   00000004   94F8               CLI
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     _A_TRCDR, R16
   \   0000000C   ....               LDI     R16, LOW(ATA_rfTxInitFrontEnd_C/2)
   \   0000000E   9300....           STS     _A_TRCIDL, R16
   \   00000012   ....               LDI     R16, (ATA_rfTxInitFrontEnd_C/2) >> 8
   \   00000014   9300....           STS     _A_TRCIDH, R16
   \   00000018   BF2F               OUT     0x3F, R18
    785          
    786              /* LLR-Ref: 010 */
    787              sEepErrCode = ATA_eepReadBytes_C(&tmp, (uint16_t)&g_sAtmelEEPromSection.eepFETN4, 1U);
    788              if(sEepErrCode != EEC_NO_ERROR)
   \   0000001A   E041               LDI     R20, 1
   \   0000001C   ....               LDI     R18, LOW((g_sAtmelEEPromSection + 132))
   \   0000001E   ....               LDI     R19, HIGH((g_sAtmelEEPromSection + 132))
   \   00000020   018E               MOVW    R17:R16, R29:R28
   \   00000022   ........           CALL    ATA_eepReadBytes_C
   \   00000026   2300               TST     R16
   \   00000028   F041               BREQ    ??ATA_rfTxInitFrontEnd_C_0
    789              {
    790                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   0000002A   ....               LDI     R30, LOW(g_sRfTx)
   \   0000002C   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000002E   8100               LD      R16, Z
   \   00000030   6800               ORI     R16, 0x80
   \   00000032   8300               ST      Z, R16
    791                  g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   00000034   E30F               LDI     R16, 63
   \   00000036   9300....           STS     g_sDebug, R16
    792              }
    793              
    794              FETN4 = tmp;
   \                     ??ATA_rfTxInitFrontEnd_C_0:
   \   0000003A   8108               LD      R16, Y
   \   0000003C   9300....           STS     _A_FETN4, R16
    795          
    796              /* LLR-Ref: 020 */
    797              ATA_SETBITMASK_C(FEEN1,BM_XTOEN)
   \   00000040   91000101           LDS     R16, 257
   \   00000044   6004               ORI     R16, 0x04
   \   00000046   93000101           STS     257, R16
    798          
    799              /* LLR-Ref: 040 */
    800              FEAT = g_sRfTxCurrentService.sService.bFEAT;
   \   0000004A   9100....           LDS     R16, (g_sRfTxCurrentService + 2)
   \   0000004E   9300....           STS     _A_FEAT, R16
    801          
    802              /* LLR-Ref: 050 */
    803              sEepErrCode = ATA_eepReadBytes_C(&tmp, (uint16_t)&g_sAtmelEEPromSection.eepFEBT, 1U);
    804              if(sEepErrCode != EEC_NO_ERROR)
   \   00000052   E041               LDI     R20, 1
   \   00000054   ....               LDI     R18, LOW((g_sAtmelEEPromSection + 131))
   \   00000056   ....               LDI     R19, HIGH((g_sAtmelEEPromSection + 131))
   \   00000058   018E               MOVW    R17:R16, R29:R28
   \   0000005A   ........           CALL    ATA_eepReadBytes_C
   \   0000005E   2300               TST     R16
   \   00000060   F041               BREQ    ??ATA_rfTxInitFrontEnd_C_1
    805              {
    806                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000062   ....               LDI     R30, LOW(g_sRfTx)
   \   00000064   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000066   8100               LD      R16, Z
   \   00000068   6800               ORI     R16, 0x80
   \   0000006A   8300               ST      Z, R16
    807                  g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   0000006C   E30F               LDI     R16, 63
   \   0000006E   9300....           STS     g_sDebug, R16
    808              }
    809          
    810              FEBT = tmp;
   \                     ??ATA_rfTxInitFrontEnd_C_1:
   \   00000072   8108               LD      R16, Y
   \   00000074   9300....           STS     _A_FEBT, R16
    811              
    812              /* LLR-Ref: 060 */
    813              FEPAC = g_sRfTxCurrentService.sService.bFEPAC;
   \   00000078   9100....           LDS     R16, (g_sRfTxCurrentService + 3)
   \   0000007C   9300....           STS     _A_FEPAC, R16
    814          
    815              /* LLR-Ref: 070 */
    816              FEVCO = ATA_rfTxFevcoCalculation_C();
   \   00000080   ....               RCALL   ATA_rfTxFevcoCalculation_C
   \   00000082   9300....           STS     _A_FEVCO, R16
    817          
    818              /* LLR-Ref: 090 */
    819              FECR  = g_sRfTxCurrentService.sChannel.bFECR;
   \   00000086   9100....           LDS     R16, (g_sRfTxCurrentService + 32)
   \   0000008A   9300....           STS     _A_FECR, R16
    820              /* LLR-Ref: 100 */
    821              FEMS  = g_sRfTxCurrentService.sChannel.bFEMS;
   \   0000008E   9100....           LDS     R16, (g_sRfTxCurrentService + 31)
   \   00000092   9300....           STS     _A_FEMS, R16
    822              /* LLR-Ref: 110 */
    823              FEVCT = g_sRfTxCurrentService.sService.bFEVCT;
   \   00000096   9100....           LDS     R16, (g_sRfTxCurrentService + 5)
   \   0000009A   9300....           STS     _A_FEVCT, R16
    824          
    825              /* LLR-Ref: 120 */
    826              if (g_sRfTxCurrentService.sService.bFEPAC < 0x2BU)
   \   0000009E   9100....           LDS     R16, (g_sRfTxCurrentService + 3)
   \   000000A2   320B               CPI     R16, 43
   \   000000A4   F028               BRCS    ??ATA_rfTxInitFrontEnd_C_2
    827              {}
    828              else
    829              {
    830                  ATA_SETBITMASK_C(SUPCR,BM_AVDIC)
   \   000000A6   910000CC           LDS     R16, 204
   \   000000AA   6008               ORI     R16, 0x08
   \   000000AC   930000CC           STS     204, R16
    831              }
    832              /* setting of FEALR.RNGE necessary for Antenna tuning (SSM review 22jul2011) */
    833              /* LLR-Ref: 130 */
    834              FEANT = (g_sRfTxCurrentService.sService.bFEALR_FEANT & 0x0FU);
   \                     ??ATA_rfTxInitFrontEnd_C_2:
   \   000000B0   9100....           LDS     R16, (g_sRfTxCurrentService + 1)
   \   000000B4   700F               ANDI    R16, 0x0F
   \   000000B6   9300....           STS     _A_FEANT, R16
    835              /* LLR-Ref: 140 */
    836              FEALR = ((g_sRfTxCurrentService.sService.bFEALR_FEANT & 0x30U) >> 4U);
   \   000000BA   9100....           LDS     R16, (g_sRfTxCurrentService + 1)
   \   000000BE   9502               SWAP    R16
   \   000000C0   7003               ANDI    R16, 0x03
   \   000000C2   9300....           STS     _A_FEALR, R16
    837          
    838              /* LLR-Ref: 150 */
    839              g_sRfTxFlowCtrl.bIndex++;
   \   000000C6   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   000000CA   9503               INC     R16
   \   000000CC   9300....           STS     g_sRfTxFlowCtrl, R16
    840          }
   \   000000D0   ....               RJMP    ?Subroutine4
   \   000000D2                      REQUIRE _A_SREG
   \   000000D2                      REQUIRE _A_TRCDR
   \   000000D2                      REQUIRE _A_TRCIDL
   \   000000D2                      REQUIRE _A_TRCIDH
   \   000000D2                      REQUIRE _A_FETN4
   \   000000D2                      REQUIRE _A_FEEN1
   \   000000D2                      REQUIRE _A_FEAT
   \   000000D2                      REQUIRE _A_FEBT
   \   000000D2                      REQUIRE _A_FEPAC
   \   000000D2                      REQUIRE _A_FEVCO
   \   000000D2                      REQUIRE _A_FECR
   \   000000D2                      REQUIRE _A_FEMS
   \   000000D2                      REQUIRE _A_FEVCT
   \   000000D2                      REQUIRE _A_SUPCR
   \   000000D2                      REQUIRE _A_FEANT
   \   000000D2                      REQUIRE _A_FEALR
    841          /*---------------------------------------------------------------------------*/
    842          /** \brief <b>ATA_rfTxWait4XTO_C</b>
    843              waits until XTO is ready. If AVR is not running with CLKXTO4 the
    844              core clock is switched to CLKXTO4.
    845          
    846              Variable Usage:
    847              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    848          
    849              \image html ATA_rfTxWait4XTO_C.png
    850          
    851              \internal
    852              \li 010: Check if XTO is available via flag FESR.XRDY
    853                       IF XTO is ready\n
    854              \li 020:   Check if AVR core is running with other clock than CLKXTO4 via
    855                         flag CMCR.CMM2 and CMCR.CCS\n
    856                         IF AVR core is not running with CLKXTO4\n
    857              \li 030:     Switch AVR core clock to CLKXTO4 by calling function
    858                           ::ATA_globalsClkSwitchXTO_C
    859              \li 040:     Switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex
    860          
    861              \Derived{No}
    862          
    863              \Rationale{N/A}
    864          
    865              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    866              \endinternal
    867          \n
    868          */
    869          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    870          VOIDFUNC ATA_rfTxWait4XTO_C(void)
   \                     ATA_rfTxWait4XTO_C:
    871          {
    872              /* LLR-Ref: 010 */
    873              if (FESR & BM_XRDY) {
   \   00000000   9100....           LDS     R16, _A_FESR
   \   00000004   FF02               SBRS    R16, 2
   \   00000006   C01C               RJMP    ??ATA_rfTxWait4XTO_C_0
    874          
    875                  ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxWait4XTO_C, 0x00);
   \   00000008   B72F               IN      R18, 0x3F
   \   0000000A   94F8               CLI
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_TRCDR, R16
   \   00000012   ....               LDI     R16, LOW(ATA_rfTxWait4XTO_C/2)
   \   00000014   9300....           STS     _A_TRCIDL, R16
   \   00000018   ....               LDI     R16, (ATA_rfTxWait4XTO_C/2) >> 8
   \   0000001A   9300....           STS     _A_TRCIDH, R16
   \   0000001E   BF2F               OUT     0x3F, R18
    876          
    877                  /* LLR-Ref: 020 */
    878                  if (  ((CMCR & BM_CMM2) == 0)
    879                      ||((CMCR & BM_CCS ) == 0)
    880                     ){
   \   00000020   9100....           LDS     R16, _A_CMCR
   \   00000024   FF02               SBRS    R16, 2
   \   00000026   C004               RJMP    ??ATA_rfTxWait4XTO_C_1
   \   00000028   9100....           LDS     R16, _A_CMCR
   \   0000002C   FD03               SBRC    R16, 3
   \   0000002E   C003               RJMP    ??ATA_rfTxWait4XTO_C_2
    881                      /* LLR-Ref: 030 */
    882                      ATA_globalsClkSwitchXTO_C(0x07U);
   \                     ??ATA_rfTxWait4XTO_C_1:
   \   00000030   E007               LDI     R16, 7
   \   00000032   ........           CALL    ATA_globalsClkSwitchXTO_C
    883                  }
    884          
    885                  /* LLR-Ref: 040 */
    886                  g_sRfTxFlowCtrl.bIndex++;
   \                     ??ATA_rfTxWait4XTO_C_2:
   \   00000036   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   0000003A   9503               INC     R16
   \   0000003C   9300....           STS     g_sRfTxFlowCtrl, R16
    887              }
    888          }
   \                     ??ATA_rfTxWait4XTO_C_0:
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_FESR
   \   00000042                      REQUIRE _A_SREG
   \   00000042                      REQUIRE _A_TRCDR
   \   00000042                      REQUIRE _A_TRCIDL
   \   00000042                      REQUIRE _A_TRCIDH
   \   00000042                      REQUIRE _A_CMCR
    889          
    890          /*---------------------------------------------------------------------------*/
    891          /** \brief <b>ATA_rfTxStartTxBufSSM_C</b>
    892              starts the sequencer state machine for TxMode(buffered).
    893          
    894              \image html ATA_rfTxStartTxBufSSM_C.png
    895          
    896              \internal
    897              \li 010: Call function ::ATA_rfTxStartSSM_C to configure the RF Tx statemachine
    898                       to execute the Tx buffered shutdown sequence
    899          
    900              \Derived{No}
    901          
    902              \Rationale{N/A}
    903          
    904              \Traceability{Primus2P-847}
    905              \endinternal
    906          \n
    907          */
    908          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    909          VOIDFUNC ATA_rfTxStartTxBufSSM_C(void)
   \                     ATA_rfTxStartTxBufSSM_C:
    910          {
    911              /* LLR-Ref: 010 */
    912              ATA_rfTxStartSSM_C(RFTX_BUF_STATE_SHUTDOWN);
   \   00000000   E009               LDI     R16, 9
   \   00000002                      REQUIRE ?Subroutine5
   \   00000002                      ;               // Fall through to label ?Subroutine5
    913          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   ....               RJMP    ATA_rfTxStartSSM_C
    914          
    915          /*---------------------------------------------------------------------------*/
    916          /** \brief <b>ATA_rfTxStartTxTransSSM_C</b>
    917              starts the sequencer state machine for TxMode(transparent)
    918          
    919              \image html ATA_rfTxStartTxTransSSM_C.png
    920          
    921              \internal
    922              \li 010: Call function ::ATA_rfTxStartSSM_C to configure the RF Tx statemachine
    923                       to execute the Tx transparent shutdown sequence
    924          
    925              \Derived{No}
    926          
    927              \Rationale{N/A}
    928          
    929              \Traceability{Primus2P-848}
    930              \endinternal
    931          \n
    932          */
    933          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    934          VOIDFUNC ATA_rfTxStartTxTransSSM_C(void)
   \                     ATA_rfTxStartTxTransSSM_C:
    935          {
    936              /* LLR-Ref: 010 */
    937              ATA_rfTxStartSSM_C(RFTX_TRANS_STATE_SHUTDOWN);
   \   00000000   E007               LDI     R16, 7
   \   00000002   ....               RJMP    ?Subroutine5
    938          }
    939          
    940          /*---------------------------------------------------------------------------*/
    941          /** \brief <b>ATA_rfTxStartSSM_C</b>
    942              starts the sequencer state machine.
    943          
    944              \param[in]      bState              SW state to switch to in case of an immediate RF Tx shutdown
    945          
    946              Variable Usage:
    947              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
    948              \li [out] ::g_sRfTx Global RF Tx component data
    949              \li [out] ::g_sDebug Global Debug component data
    950          
    951              \image html ATA_rfTxStartSSM_C.png
    952          
    953              \internal
    954              \li 010: Clear SSM Interrupt Flag Register (SSMIFR)
    955              \li 020: Clear SSM status register (SSMSR)
    956              \li 030: Clear flag ::g_sRfTx .bStatus[6]
    957              \li 040: Enable SSM finished interrupt by setting flag SSMIMR.SSMIM in
    958                       SSM Interrupt Mask Register (SSMIMR)
    959              \li 050: Start Watchdog with timeout for SSM by calling function
    960                       ::ATA_rfTxStartSsmWatchdog_C\n
    961                       IF SSM Watchdog is locked
    962              \li 060:     Signal error via flag ::g_sRfTx .bFlags[7]
    963              \li 070:     Write error code to ::g_sDebug .bErrorCode and ::g_sDebug
    964                           .bSsmErrorCode
    965              \li 080:     Switch to shutdown sw state by setting ::g_sRfTxFlowCtrl .bIndex\n
    966                       IF SSM Watchdog has started correctly
    967              \li 090:     Start SSM by setting flag SSMR in SSM Run Register (SSMRR)
    968              \li 100:     Switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex
    969          
    970              \Derived{No}
    971          
    972              \Rationale{N/A}
    973          
    974              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
    975              \endinternal
    976          \n
    977          */
    978          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
    979          VOIDFUNC ATA_rfTxStartSSM_C(uint8_t bState)
   \                     ATA_rfTxStartSSM_C:
    980          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    981              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxStartSSM_C, 0x00);
   \   00000004   B72F               IN      R18, 0x3F
   \   00000006   94F8               CLI
   \   00000008   E000               LDI     R16, 0
   \   0000000A   9300....           STS     _A_TRCDR, R16
   \   0000000E   ....               LDI     R16, LOW(ATA_rfTxStartSSM_C/2)
   \   00000010   9300....           STS     _A_TRCIDL, R16
   \   00000014   ....               LDI     R16, (ATA_rfTxStartSSM_C/2) >> 8
   \   00000016   9300....           STS     _A_TRCIDH, R16
   \   0000001A   BF2F               OUT     0x3F, R18
    982          
    983              /* LLR-Ref: 010 */
    984              SSMIFR = 0x00U;
   \   0000001C   E000               LDI     R16, 0
   \   0000001E   9300....           STS     _A_SSMIFR, R16
    985          
    986              /* LLR-Ref: 020 */
    987              ATA_SETBITMASK_C(SSMSR,BM_SSMERR)
   \   00000022   910000E6           LDS     R16, 230
   \   00000026   6800               ORI     R16, 0x80
   \   00000028   930000E6           STS     230, R16
    988          
    989              /* LLR-Ref: 030 */
    990              ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_SSMREADY)
   \   0000002C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000002E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   7B0F               ANDI    R16, 0xBF
   \   00000034   8302               STD     Z+2, R16
    991          
    992              /* LLR-Ref: 040 */
    993              SSMIMR = BM_SSMIM;
   \   00000036   E001               LDI     R16, 1
   \   00000038   9300....           STS     _A_SSMIMR, R16
    994          
    995              /* LLR-Ref: 050 */
    996              if( ATA_rfTxStartSsmWatchdog_C() )
   \   0000003C   ....               RCALL   ATA_rfTxStartSsmWatchdog_C
   \   0000003E   2300               TST     R16
   \   00000040   F071               BREQ    ??ATA_rfTxStartSSM_C_0
    997              {
    998                  /* LLR-Ref: 060 */
    999                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000042   ....               LDI     R30, LOW(g_sRfTx)
   \   00000044   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000046   8100               LD      R16, Z
   \   00000048   6800               ORI     R16, 0x80
   \   0000004A   8300               ST      Z, R16
   1000          
   1001                  /* LLR-Ref: 070 */
   1002                  g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_RFTX_STARTSSM_TIMER_LOCKED;
   \   0000004C   E202               LDI     R16, 34
   \   0000004E   9300....           STS     g_sDebug, R16
   1003                  g_sDebug.bSsmErrorCode = 0U;
   \   00000052   E000               LDI     R16, 0
   \   00000054   9300....           STS     (g_sDebug + 1), R16
   1004          
   1005                  /* LLR-Ref: 080 */
   1006                  g_sRfTxFlowCtrl.bIndex = bState;
   \   00000058   9380....           STS     g_sRfTxFlowCtrl, R24
   \   0000005C   C008               RJMP    ??ATA_rfTxStartSSM_C_1
   1007              }
   1008              else
   1009              {
   1010                  /* LLR-Ref: 090 */
   1011                  SSMRR = BM_SSMR;
   \                     ??ATA_rfTxStartSSM_C_0:
   \   0000005E   E001               LDI     R16, 1
   \   00000060   9300....           STS     _A_SSMRR, R16
   1012          
   1013                  /* LLR-Ref: 100 */
   1014                  g_sRfTxFlowCtrl.bIndex++;
   \   00000064   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   00000068   9503               INC     R16
   \   0000006A   9300....           STS     g_sRfTxFlowCtrl, R16
   1015              }
   1016          }
   \                     ??ATA_rfTxStartSSM_C_1:
   \   0000006E   ....               RJMP    ?Subroutine3
   \   00000070                      REQUIRE _A_SREG
   \   00000070                      REQUIRE _A_TRCDR
   \   00000070                      REQUIRE _A_TRCIDL
   \   00000070                      REQUIRE _A_TRCIDH
   \   00000070                      REQUIRE _A_SSMIFR
   \   00000070                      REQUIRE _A_SSMSR
   \   00000070                      REQUIRE _A_SSMIMR
   \   00000070                      REQUIRE _A_SSMRR
   1017          
   1018          /*---------------------------------------------------------------------------*/
   1019          /** \brief <b>ATA_rfTxWait4SSMrdy_C</b>
   1020              waits until the sequencer state machine is ready.
   1021          
   1022              Variable Usage:
   1023              \li [in,out] ::g_sRfTx Global RF Tx component data
   1024              \li [in,out] ::g_sRfTxCurrentService Global RF Tx current service data
   1025              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
   1026              \li [out] ::g_sDebug Global Debug component data
   1027              \li [out] ::g_bVcoTuningResult Global RF Tx VCO tuning component data
   1028              \li [out] ::g_bAntennaTuningResult Global RF Tx Antenna tuning component data
   1029          
   1030              \image html ATA_rfTxWait4SSMrdy_C.png
   1031          
   1032              \internal
   1033                      Note:
   1034                      The SSM watchdog is stopped, i.e. Timer 2 is closed in function 
   1035                      ATA_rfTxShutDown_C() in case the SSM watchdog has expired (ELSE-clause)
   1036          
   1037              \li 010: Check if SSM has finished with success via ::g_sRfTx .bStatus[6]
   1038                       and SSM status register SSMSR\n
   1039                       IF SSM has finished with success
   1040              \li 020:   Stop SSM Watchdog
   1041              \li 030:   Clear RF Tx SSM ready in ::g_sRfTx .bStatus[6]
   1042              \li 040:   Signal RF Tx Module ready for transmission in ::g_sRfTx .bFlags[6]
   1043              \li 045:   Store Antenna Tuning and VCO Tuning values in current service
   1044                         and dedicated tuning result variables
   1045                         (::g_bVcoTuningResult,::g_bAntennaTuningResult)
   1046              \li 050:   IF TXMode(transparent) is selected, activate the power amplifier
   1047                          by setting FSCR.PAOER
   1048              \li 060:     Switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex\n
   1049                       ELSE (SSM has not finished)
   1050              \li 070:   Check for
   1051                           - SSM Watchdog timeout via flag T2IFR.T2COF
   1052                           - SSM Error via register SSMSR\n
   1053                           IF Watchdog timeout or SSM Error has occured
   1054              \li 080:       Reset current running sequencer state machine
   1055              \li 100:       Signal error via flag ::g_sRfTx .bFlags[7]
   1056              \li 110:       Write error code to ::g_sDebug .bErrorCode and ::g_sDebug
   1057                             .bSsmErrorCode
   1058              \li 120:       Switch to shutdown SWstate by setting ::g_sRfTxFlowCtrl .bIndex
   1059                               - to RFTX_TRANS_STATE_SHUTDOWN in TXMode(transparent)
   1060                               - to RFTX_BUF_STATE_SHUTDOWN in TXMode(buffered)
   1061          
   1062              \Derived{No}
   1063          
   1064              \Rationale{N/A}
   1065          
   1066              \Traceability{Primus2P-849,Primus2P-848,Primus2P-847}
   1067              \endinternal
   1068          \n
   1069          */
   1070          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1071          VOIDFUNC ATA_rfTxWait4SSMrdy_C(void)
   \                     ATA_rfTxWait4SSMrdy_C:
   1072          {
   1073              /* LLR-Ref: 010 */
   1074              if( (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_SSMREADY) && (SSMSR == 0x00U) )
   \   00000000   ....               LDI     R30, LOW(g_sRfTx)
   \   00000002   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   FF06               SBRS    R16, 6
   \   00000008   C02C               RJMP    ??ATA_rfTxWait4SSMrdy_C_0
   \   0000000A   9100....           LDS     R16, _A_SSMSR
   \   0000000E   2300               TST     R16
   \   00000010   F541               BRNE    ??ATA_rfTxWait4SSMrdy_C_0
   1075              {
   1076                  ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxWait4SSMrdy_C, 0x00);
   \   00000012   B72F               IN      R18, 0x3F
   \   00000014   94F8               CLI
   \   00000016   E000               LDI     R16, 0
   \   00000018   9300....           STS     _A_TRCDR, R16
   \   0000001C   ....               LDI     R16, LOW(ATA_rfTxWait4SSMrdy_C/2)
   \   0000001E   9300....           STS     _A_TRCIDL, R16
   \   00000022   ....               LDI     R16, (ATA_rfTxWait4SSMrdy_C/2) >> 8
   \   00000024   9300....           STS     _A_TRCIDH, R16
   \   00000028   BF2F               OUT     0x3F, R18
   1077          
   1078                  /* LLR-Ref: 020 */
   1079                  ATA_rfTxStopSsmWatchdog_C();
   \   0000002A   ....               RCALL   ATA_rfTxStopSsmWatchdog_C
   1080          
   1081                  /* LLR-Ref: 030 */
   1082                  ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_SSMREADY)
   \   0000002C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000002E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   7B0F               ANDI    R16, 0xBF
   \   00000034   8302               STD     Z+2, R16
   1083          
   1084                  /* LLR-Ref: 040 */
   1085                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_RDY4TX)
   \   00000036   8100               LD      R16, Z
   \   00000038   6400               ORI     R16, 0x40
   \   0000003A   8300               ST      Z, R16
   1086          
   1087                  /* LLR-Ref: 045 */
   1088                  g_sRfTxCurrentService.sService.bFEAT = FEAT;
   \   0000003C   9100....           LDS     R16, _A_FEAT
   \   00000040   9300....           STS     (g_sRfTxCurrentService + 2), R16
   1089                  g_bAntennaTuningResult = g_sRfTxCurrentService.sService.bFEAT;
   \   00000044   9300....           STS     g_bAntennaTuningResult, R16
   1090                  g_sRfTxCurrentService.sService.bFEVCT = FEVCT;
   \   00000048   9100....           LDS     R16, _A_FEVCT
   \   0000004C   9300....           STS     (g_sRfTxCurrentService + 5), R16
   1091                  g_bVcoTuningResult = g_sRfTxCurrentService.sService.bFEVCT;
   \   00000050   9300....           STS     g_bVcoTuningResult, R16
   1092          
   1093                  /* LLR-Ref: 050 */
   1094                  if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE) {
   \   00000054   8103               LDD     R16, Z+3
   \   00000056   FD05               SBRC    R16, 5
   1095                      ATA_SETBITMASK_C(FSCR,BM_PAOER)
   \   00000058   9A7C               SBI     0x0F, 0x04
   1096                  }
   1097          
   1098                  /* LLR-Ref: 060 */
   1099                  g_sRfTxFlowCtrl.bIndex++;
   \                     ??ATA_rfTxWait4SSMrdy_C_1:
   \   0000005A   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   0000005E   9503               INC     R16
   \   00000060   C019               RJMP    ??ATA_rfTxWait4SSMrdy_C_2
   1100              }
   1101              else {
   1102                  /* LLR-Ref: 070 */
   1103                  if( (T2IFR & BM_T2COF) || SSMSR )
   \                     ??ATA_rfTxWait4SSMrdy_C_0:
   \   00000062   9100....           LDS     R16, _A_T2IFR
   \   00000066   FD01               SBRC    R16, 1
   \   00000068   C004               RJMP    ??ATA_rfTxWait4SSMrdy_C_3
   \   0000006A   9100....           LDS     R16, _A_SSMSR
   \   0000006E   2300               TST     R16
   \   00000070   F0A9               BREQ    ??ATA_rfTxWait4SSMrdy_C_4
   1104                  {
   1105                      /* LLR-Ref: 080 */
   1106                      SSMRR = BM_SSMST;       /* reset current state machine */
   \                     ??ATA_rfTxWait4SSMrdy_C_3:
   \   00000072   E002               LDI     R16, 2
   \   00000074   9300....           STS     _A_SSMRR, R16
   1107          
   1108                      /* LLR-Ref: 100 */
   1109                      ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000078   8100               LD      R16, Z
   \   0000007A   6800               ORI     R16, 0x80
   \   0000007C   8300               ST      Z, R16
   1110          
   1111                      /* LLR-Ref: 110 */
   1112                      g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_RFTX_WAIT4SSMRDY_TIMEOUT;
   \   0000007E   E204               LDI     R16, 36
   \   00000080   9300....           STS     g_sDebug, R16
   1113                      g_sDebug.bSsmErrorCode = SSMSR;
   \   00000084   9100....           LDS     R16, _A_SSMSR
   \   00000088   9300....           STS     (g_sDebug + 1), R16
   1114          
   1115                      /* LLR-Ref: 120 */
   1116                      if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_TRANSPARENT_MODE) {
   \   0000008C   8103               LDD     R16, Z+3
   \   0000008E   FF05               SBRS    R16, 5
   \   00000090   C002               RJMP    ??ATA_rfTxWait4SSMrdy_C_5
   1117                          g_sRfTxFlowCtrl.bIndex = RFTX_TRANS_STATE_SHUTDOWN;
   \   00000092   E007               LDI     R16, 7
   1118                      }
   \                     ??ATA_rfTxWait4SSMrdy_C_2:
   \   00000094   ....               RJMP    ??Subroutine8_0
   1119                      else {
   1120                          g_sRfTxFlowCtrl.bIndex = RFTX_BUF_STATE_SHUTDOWN;
   \                     ??ATA_rfTxWait4SSMrdy_C_5:
   \   00000096   E009               LDI     R16, 9
   \   00000098   9300....           STS     g_sRfTxFlowCtrl, R16
   1121                      }
   1122                  }
   1123              }
   1124          
   1125          }
   \                     ??ATA_rfTxWait4SSMrdy_C_4:
   \   0000009C   9508               RET
   \   0000009E                      REQUIRE _A_SSMSR
   \   0000009E                      REQUIRE _A_SREG
   \   0000009E                      REQUIRE _A_TRCDR
   \   0000009E                      REQUIRE _A_TRCIDL
   \   0000009E                      REQUIRE _A_TRCIDH
   \   0000009E                      REQUIRE _A_FEAT
   \   0000009E                      REQUIRE _A_FEVCT
   \   0000009E                      REQUIRE _A_FSCR
   \   0000009E                      REQUIRE _A_T2IFR
   \   0000009E                      REQUIRE _A_SSMRR
   1126          
   1127          /*---------------------------------------------------------------------------*/
   1128          /** \brief <b>ATA_rfTxTransparentMode_C</b>
   1129              is an empty function. This SW state is reached after TXMode(transparent)
   1130              has started correctly.
   1131          
   1132              \image html ATA_rfTxTransparentMode_C.png
   1133          
   1134              \internal
   1135              \Derived{Yes}
   1136          
   1137              \Rationale{This function is required as a placeholder to stay in Tx transparent
   1138                         mode until the Application SW shuts down Tx transparent mode}
   1139          
   1140              \Traceability   N/A
   1141              \endinternal
   1142          \n
   1143          */
   1144          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1145          VOIDFUNC ATA_rfTxTransparentMode_C(void)
   \                     ATA_rfTxTransparentMode_C:
   1146          {
   1147              /* remove trace to avoid trace overflow
   1148               * ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxTransparentMode_C, 0x00);
   1149               * do nothing --> system in TXMode(transparent) */
   1150          }
   \   00000000   9508               RET
   1151          
   1152          /*---------------------------------------------------------------------------*/
   1153          /** \brief <b>ATA_rfTxWait4FillLevel_C</b>
   1154              checks the fill levels of S-FIFO and D-FIFO
   1155          
   1156              Variable Usage:
   1157              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
   1158              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1159          
   1160              \image html ATA_rfTxWait4FillLevel_C.png
   1161          
   1162              \internal
   1163              \li 010:    read out start fill levels for S-FIFO (Preamble FIFO) and D-FIFO
   1164                          (Data FIFO) from current service channel configuration
   1165              \li 020:    check if S-FIFO and D-FIFO fill levels are greater or equal the
   1166                          corresponding start fill levels
   1167                          IF both fill level conditions are true
   1168              \li 030:        switch to next sw state by incrementing variable g_sRfTxFlowCtrl.bIndex
   1169          
   1170              \Derived{No}
   1171          
   1172              \Rationale{N/A}
   1173          
   1174              \Traceability{Primus2P-847}
   1175              \endinternal
   1176          \n
   1177          */
   1178          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1179          VOIDFUNC ATA_rfTxWait4FillLevel_C(void)
   \                     ATA_rfTxWait4FillLevel_C:
   1180          {
   1181              /* LLR-Ref: 010 */
   1182              uint8_t bTxFifoStartFillLevel = g_sRfTxCurrentService.sPath.bTxSetPath[0] & 0x3F;
   1183              uint8_t bPreambleFifoStartFillLevel = g_sRfTxCurrentService.sPath.bTxSetPath[1] & 0x1F;
   1184          
   1185              /* LLR-Ref: 020 */
   1186              if(    ( bTxFifoStartFillLevel       <= (DFL & BM_DFFLS) )
   1187                  && ( bPreambleFifoStartFillLevel <= (SFL & BM_SFFLS) ) ) {
   \   00000000   9100....           LDS     R16, _A_DFL
   \   00000004   E010               LDI     R17, 0
   \   00000006   730F               ANDI    R16, 0x3F
   \   00000008   9120....           LDS     R18, (g_sRfTxCurrentService + 15)
   \   0000000C   732F               ANDI    R18, 0x3F
   \   0000000E   1702               CP      R16, R18
   \   00000010   0711               CPC     R17, R17
   \   00000012   F0CC               BRLT    ??ATA_rfTxWait4FillLevel_C_0
   \   00000014   9100....           LDS     R16, _A_SFL
   \   00000018   710F               ANDI    R16, 0x1F
   \   0000001A   9120....           LDS     R18, (g_sRfTxCurrentService + 16)
   \   0000001E   712F               ANDI    R18, 0x1F
   \   00000020   1702               CP      R16, R18
   \   00000022   0711               CPC     R17, R17
   \   00000024   F084               BRLT    ??ATA_rfTxWait4FillLevel_C_0
   1188          
   1189                  ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxWait4FillLevel_C, 0x00);
   \   00000026   B72F               IN      R18, 0x3F
   \   00000028   94F8               CLI
   \   0000002A   9310....           STS     _A_TRCDR, R17
   \   0000002E   ....               LDI     R16, LOW(ATA_rfTxWait4FillLevel_C/2)
   \   00000030   9300....           STS     _A_TRCIDL, R16
   \   00000034   ....               LDI     R16, (ATA_rfTxWait4FillLevel_C/2) >> 8
   \   00000036   9300....           STS     _A_TRCIDH, R16
   \   0000003A   BF2F               OUT     0x3F, R18
   1190          
   1191                  /* LLR-Ref: 030 */
   1192                  g_sRfTxFlowCtrl.bIndex++;
   \   0000003C   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   00000040   9503               INC     R16
   \   00000042   9300....           STS     g_sRfTxFlowCtrl, R16
   1193              }
   1194          }
   \                     ??ATA_rfTxWait4FillLevel_C_0:
   \   00000046   9508               RET
   \   00000048                      REQUIRE _A_DFL
   \   00000048                      REQUIRE _A_SFL
   \   00000048                      REQUIRE _A_SREG
   \   00000048                      REQUIRE _A_TRCDR
   \   00000048                      REQUIRE _A_TRCIDL
   \   00000048                      REQUIRE _A_TRCIDH
   1195          
   1196          /*---------------------------------------------------------------------------*/
   1197          /** \brief <b>ATA_rfTxStartTxModulator_C</b>
   1198              configures the fill level interrupts, starts the TX Modulator and
   1199              SendTelegramSSM.
   1200          
   1201              Variable Usage:
   1202              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
   1203              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1204          
   1205              \image html ATA_rfTxStartTxModulator_C.png
   1206          
   1207              \internal
   1208              \li 010: Configure the S-FIFO for data transmission by setting SFC.SFDRA 
   1209                       (TxMode for preamble FIFO)
   1210              \li 020: Set the S-FIFO fill level configuration in SFC.SFFLC[4..0]
   1211                       according to current Service/Channel configuration
   1212                       ::g_sRfTxCurrentService
   1213              \li 030: Enable S-FIFO fill level interrupt
   1214              \li 040: Configure the D-FIFO for data transmission by setting DFC.DFDRA
   1215                       (TxMode for data FIFO)
   1216              \li 050: Set the D-FIFO fill level configuration in DFC.DFFLC[5..0]
   1217                       according to current Service/Channel configuration
   1218                       ::g_sRfTxCurrentService
   1219              \li 060: Enable D-FIFO fill level interrupt
   1220              \li 070: Activate the power amplifier by setting FSCR.PAOER
   1221              \li 080: Reset TX Modulator by toggling PRR2.PRTM
   1222              \li 090: Configure Timer 3 for TXMode via function
   1223                       ::ATA_rfTxOpenTimer3forTxing_C
   1224              \li 100: Switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex
   1225          
   1226              \Derived{No}
   1227          
   1228              \Rationale{N/A}
   1229          
   1230              \Traceability{Primus2P-847}
   1231              \endinternal
   1232          \n
   1233          */
   1234          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1235          VOIDFUNC ATA_rfTxStartTxModulator_C(void)
   \                     ATA_rfTxStartTxModulator_C:
   1236          {
   1237              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxStartTxModulator_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxStartTxModulator_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxStartTxModulator_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
   1238              
   1239              /* LLR-Ref: 010 */
   1240              SFC = BM_SFDRA;
   \   00000018   E800               LDI     R16, 128
   \   0000001A   9300....           STS     _A_SFC, R16
   1241              
   1242              /* LLR-Ref: 020 */
   1243              ATA_SETBITMASK_C(SFC,g_sRfTxCurrentService.sPath.bTxPreambleSysEvent & 0x1F)
   \   0000001E   9100....           LDS     R16, (g_sRfTxCurrentService + 18)
   \   00000022   710F               ANDI    R16, 0x1F
   \   00000024   9110....           LDS     R17, _A_SFC
   \   00000028   2B10               OR      R17, R16
   \   0000002A   9310....           STS     _A_SFC, R17
   1244              
   1245              /* LLR-Ref: 030 */
   1246              ATA_SETBITMASK_C(SFI,BM_SFFLIM)
   \   0000002E   910000E0           LDS     R16, 224
   \   00000032   6001               ORI     R16, 0x01
   \   00000034   930000E0           STS     224, R16
   1247          
   1248              /* LLR-Ref: 040 */
   1249              DFC = BM_DFDRA;
   \   00000038   E800               LDI     R16, 128
   \   0000003A   9300....           STS     _A_DFC, R16
   1250              
   1251              /* LLR-Ref: 050 */
   1252              ATA_SETBITMASK_C(DFC,g_sRfTxCurrentService.sPath.bTxSysEvent & 0x3F)
   \   0000003E   9100....           LDS     R16, (g_sRfTxCurrentService + 17)
   \   00000042   730F               ANDI    R16, 0x3F
   \   00000044   9110....           LDS     R17, _A_DFC
   \   00000048   2B10               OR      R17, R16
   \   0000004A   9310....           STS     _A_DFC, R17
   1253              
   1254              /* LLR-Ref: 060 */
   1255              ATA_SETBITMASK_C(DFI,BM_DFFLIM)
   \   0000004E   910000D9           LDS     R16, 217
   \   00000052   6001               ORI     R16, 0x01
   \   00000054   930000D9           STS     217, R16
   1256          
   1257              /* LLR-Ref: 070 */
   1258              ATA_SETBITMASK_C(FSCR,BM_PAOER)
   \   00000058   9A7C               SBI     0x0F, 0x04
   1259          
   1260              /* LLR-Ref: 080 */
   1261              ATA_POWEROFF_C(PRR2, PRTM)
   \   0000005A   9A16               SBI     0x02, 0x06
   1262              ATA_POWERON_C(PRR2, PRTM)
   \   0000005C   9816               CBI     0x02, 0x06
   1263          
   1264              /* LLR-Ref: 090 */
   1265              ATA_rfTxOpenTimer3forTxing_C();
   \   0000005E   ....               RCALL   ATA_rfTxOpenTimer3forTxing_C
   1266          
   1267              /* LLR-Ref: 100 */
   1268              ATA_rfTxStartSendTelegramSSM_C();
   \   00000060   ....               RCALL   ATA_rfTxStartSendTelegramSSM_C
   1269          
   1270              /* LLR-Ref: 110 */
   1271              g_sRfTxFlowCtrl.bIndex++;
   \   00000062   ....               RJMP    ?Subroutine1
   \   00000064                      REQUIRE _A_SREG
   \   00000064                      REQUIRE _A_TRCDR
   \   00000064                      REQUIRE _A_TRCIDL
   \   00000064                      REQUIRE _A_TRCIDH
   \   00000064                      REQUIRE _A_SFC
   \   00000064                      REQUIRE _A_SFI
   \   00000064                      REQUIRE _A_DFC
   \   00000064                      REQUIRE _A_DFI
   \   00000064                      REQUIRE _A_FSCR
   \   00000064                      REQUIRE _A_PRR2
   1272          }
   1273          
   1274          /*---------------------------------------------------------------------------*/
   1275          /** \brief <b>ATA_rfTxWait4TransmissionComplete_C</b>
   1276              waits until Transmission has completed.
   1277          
   1278              Variable Usage:
   1279              \li [in,out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
   1280              \li [in,out] ::g_sRfTx Global RF Tx current service data
   1281          
   1282              \image html ATA_rfTxWait4TransmissionComplete_C.png
   1283          
   1284              \internal
   1285              \li 010: Check if RFTX transmission is complete via ::g_sRfTx .bStatus[5]\n
   1286                       IF RFTX transmission is complete
   1287              \li 020:   Clear transmission complete flag in ::g_sRfTx .bStatus[5]
   1288              \li 030:   Clear fill level interrupts for S-FIFO and D-FIFO
   1289              \li 040:   IF RFTX module shall stay in TXMode (configured in ::g_sRfTx .bConfig[2])
   1290                           Switch to wait for fill level SW state by setting
   1291                           ::g_sRfTxFlowCtrl .bIndex\n
   1292                         ELSE switch to next SW state by incrementing ::g_sRfTxFlowCtrl .bIndex
   1293          
   1294              \Derived{No}
   1295          
   1296              \Rationale{N/A}
   1297          
   1298              \Traceability{Primus2P-847}
   1299              \endinternal
   1300          \n
   1301          */
   1302          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1303          VOIDFUNC ATA_rfTxWait4TransmissionComplete_C(void)
   \                     ATA_rfTxWait4TransmissionComplete_C:
   1304          {
   1305              /* LLR-Ref: 010 */
   1306              if(g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_TRANSMISSION_COMPLETE)
   \   00000000   ....               LDI     R30, LOW(g_sRfTx)
   \   00000002   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000004   8102               LDD     R16, Z+2
   \   00000006   FF05               SBRS    R16, 5
   \   00000008   C023               RJMP    ??ATA_rfTxWait4TransmissionComplete_C_0
   1307              {
   1308                  ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxWait4TransmissionComplete_C, 0x00);
   \   0000000A   B72F               IN      R18, 0x3F
   \   0000000C   94F8               CLI
   \   0000000E   E000               LDI     R16, 0
   \   00000010   9300....           STS     _A_TRCDR, R16
   \   00000014   ....               LDI     R16, LOW(ATA_rfTxWait4TransmissionComplete_C/2)
   \   00000016   9300....           STS     _A_TRCIDL, R16
   \   0000001A   ....               LDI     R16, (ATA_rfTxWait4TransmissionComplete_C/2) >> 8
   \   0000001C   9300....           STS     _A_TRCIDH, R16
   \   00000020   BF2F               OUT     0x3F, R18
   1309          
   1310                  /* LLR-Ref: 020 */
   1311                  g_sRfTx.bStatus &= (uint8_t)~BM_RFTXCONFIG_BSTATUS_TRANSMISSION_COMPLETE;
   \   00000022   8102               LDD     R16, Z+2
   \   00000024   7D0F               ANDI    R16, 0xDF
   \   00000026   8302               STD     Z+2, R16
   1312          
   1313                  /* LLR-Ref: 030 */
   1314                  ATA_CLEARBITMASK_C(SFI,BM_SFFLIM)
   \   00000028   910000E0           LDS     R16, 224
   \   0000002C   7F0E               ANDI    R16, 0xFE
   \   0000002E   930000E0           STS     224, R16
   1315                  ATA_CLEARBITMASK_C(DFI,BM_DFFLIM)
   \   00000032   910000D9           LDS     R16, 217
   \   00000036   7F0E               ANDI    R16, 0xFE
   \   00000038   930000D9           STS     217, R16
   1316          
   1317                  /* LLR-Ref: 040 */
   1318                  if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_STAY_TX) {
   \   0000003C   8103               LDD     R16, Z+3
   \   0000003E   FF02               SBRS    R16, 2
   \   00000040   C002               RJMP    ??ATA_rfTxWait4TransmissionComplete_C_1
   1319                      g_sRfTxFlowCtrl.bIndex = RFTX_BUF_STATE_WAIT_FILLLEVEL;
   \   00000042   E006               LDI     R16, 6
   \   00000044   ....               RJMP    ??Subroutine8_0
   1320                  }
   1321                  else{
   1322                      g_sRfTxFlowCtrl.bIndex++;
   \                     ??ATA_rfTxWait4TransmissionComplete_C_1:
   \   00000046   9100....           LDS     R16, g_sRfTxFlowCtrl
   \   0000004A   9503               INC     R16
   \   0000004C   9300....           STS     g_sRfTxFlowCtrl, R16
   1323                  }
   1324              }
   1325          }
   \                     ??ATA_rfTxWait4TransmissionComplete_C_0:
   \   00000050   9508               RET
   \   00000052                      REQUIRE _A_SREG
   \   00000052                      REQUIRE _A_TRCDR
   \   00000052                      REQUIRE _A_TRCIDL
   \   00000052                      REQUIRE _A_TRCIDH
   \   00000052                      REQUIRE _A_SFI
   \   00000052                      REQUIRE _A_DFI
   1326          
   1327          /*---------------------------------------------------------------------------*/
   1328          /** \brief <b>ATA_rfTxShutdown_C</b>
   1329              shut down the RFTX module related state machine for TXMode(buffered and transparent),
   1330              VCO tuning and antenna tuning.
   1331          
   1332              Variable Usage:
   1333              \li [in,out] ::g_sRfTx Global RF Tx current service data
   1334              \li [out] ::g_sDebug Global Debug component data
   1335          
   1336              \image html ATA_rfTxShutdown_C.png
   1337          
   1338              \internal
   1339              \li 010: Clear SSM ready flag ::g_sRfTx .bStatus[6]
   1340              \li 020: Start shutdown SSM by calling function ::ATA_rfTxStartShutDownSSM_C
   1341              \li 030: Apply 5us wait time before checking that shutdown SSM has finished
   1342                        no SSM watchdog functionality implemented here, since timer startup phase
   1343                        extends SSM runtime
   1344              \li 040: Check if SSM has finished with success via ::g_sRfTx .bStatus[6]
   1345                        and SSM status register SSMSR\n
   1346                       IF SSM has finished with success
   1347              \li 050:   Clear SSM ready flag ::g_sRfTx .bStatus[6]\n
   1348                       ELSE (SMM has finished with error)
   1349              \li 060:   Signal error via flag ::g_sRfTx .bFlags[7]
   1350              \li 070:   Write error code to ::g_sDebug .bErrorCode and ::g_sDebug
   1351                         .bSsmErrorCode\n
   1352                       ENDIF
   1353              \li 080: Clear S-FIFO and D-FIFO content by setting SFL.SFCLR and DFL.DFCLR
   1354              \li 090: Remove power from RFTX module by calling function ::ATA_rfTxEnd_C
   1355              \li 100: Clear RFTX module active flag ::g_sRfTx .bStatus[4]
   1356              \li 110: Clear RFTX module ready for transmission flag ::g_sRfTx .bFlags[6]
   1357          
   1358              \Derived{No}
   1359          
   1360              \Rationale{N/A}
   1361          
   1362              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   1363              \endinternal
   1364          \n
   1365          */
   1366          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1367          VOIDFUNC ATA_rfTxShutdown_C(void)
   \                     ATA_rfTxShutdown_C:
   1368          {
   1369              ATA_SET_FUNCTION_TRACE_POINT_C(ATA_rfTxShutdown_C, 0x00);
   \   00000000   B72F               IN      R18, 0x3F
   \   00000002   94F8               CLI
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     _A_TRCDR, R16
   \   0000000A   ....               LDI     R16, LOW(ATA_rfTxShutdown_C/2)
   \   0000000C   9300....           STS     _A_TRCIDL, R16
   \   00000010   ....               LDI     R16, (ATA_rfTxShutdown_C/2) >> 8
   \   00000012   9300....           STS     _A_TRCIDH, R16
   \   00000016   BF2F               OUT     0x3F, R18
   1370              
   1371              /* LLR-Ref: 010 */
   1372              g_sRfTx.bStatus &= (uint8_t)~BM_RFTXCONFIG_BSTATUS_SSMREADY;
   \   00000018   ....               LDI     R30, LOW(g_sRfTx)
   \   0000001A   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000001C   8102               LDD     R16, Z+2
   \   0000001E   7B0F               ANDI    R16, 0xBF
   \   00000020   8302               STD     Z+2, R16
   1373              
   1374              /* LLR-Ref: 020 */
   1375              ATA_rfTxStopSsmWatchdog_C();
   \   00000022   ....               RCALL   ATA_rfTxStopSsmWatchdog_C
   1376              ATA_rfTxStartShutDownSSM_C();
   \   00000024   ....               RCALL   ATA_rfTxStartShutDownSSM_C
   1377          
   1378              /* LLR-Ref: 030 */
   1379              ATA_globalsWaitNus_ASM(5U);
   \   00000026   E005               LDI     R16, 5
   \   00000028   ........           CALL    ATA_globalsWaitNus_ASM
   1380          
   1381              /* LLR-Ref: 040 */
   1382              if (   (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_SSMREADY)
   1383                  && (SSMSR == 0U) ) {
   \   0000002C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000002E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000030   8102               LDD     R16, Z+2
   \   00000032   FF06               SBRS    R16, 6
   \   00000034   C008               RJMP    ??ATA_rfTxShutdown_C_0
   \   00000036   9100....           LDS     R16, _A_SSMSR
   \   0000003A   2300               TST     R16
   \   0000003C   F421               BRNE    ??ATA_rfTxShutdown_C_0
   1384                  /* LLR-Ref: 050 */
   1385                  ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_SSMREADY)
   \   0000003E   8102               LDD     R16, Z+2
   \   00000040   7B0F               ANDI    R16, 0xBF
   \   00000042   8302               STD     Z+2, R16
   \   00000044   C00A               RJMP    ??ATA_rfTxShutdown_C_1
   1386              }
   1387              else {
   1388                  /* LLR-Ref: 060 */
   1389                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \                     ??ATA_rfTxShutdown_C_0:
   \   00000046   8100               LD      R16, Z
   \   00000048   6800               ORI     R16, 0x80
   \   0000004A   8300               ST      Z, R16
   1390                  
   1391                  /* LLR-Ref: 070 */
   1392                  g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_RFTX_SHUTDOWN_ERROR;
   \   0000004C   E203               LDI     R16, 35
   \   0000004E   9300....           STS     g_sDebug, R16
   1393                  g_sDebug.bSsmErrorCode = SSMSR;
   \   00000052   9100....           LDS     R16, _A_SSMSR
   \   00000056   9300....           STS     (g_sDebug + 1), R16
   1394              }
   1395          
   1396              /* LLR-Ref: 080 */
   1397              ATA_SETBITMASK_C(SFL,BM_SFCLR)
   \                     ??ATA_rfTxShutdown_C_1:
   \   0000005A   910000DC           LDS     R16, 220
   \   0000005E   6800               ORI     R16, 0x80
   \   00000060   930000DC           STS     220, R16
   1398              ATA_SETBITMASK_C(DFL,BM_DFCLR)
   \   00000064   910000D5           LDS     R16, 213
   \   00000068   6800               ORI     R16, 0x80
   \   0000006A   930000D5           STS     213, R16
   1399          
   1400              /* LLR-Ref: 090 */
   1401              ATA_rfTxEnd_C();
   \   0000006E   ....               RCALL   ATA_rfTxEnd_C
   1402          
   1403              /* LLR-Ref: 100 */
   1404              ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_ACTIVE)
   \   00000070   ....               LDI     R30, LOW(g_sRfTx)
   \   00000072   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000074   8102               LDD     R16, Z+2
   \   00000076   7E0F               ANDI    R16, 0xEF
   \   00000078   8302               STD     Z+2, R16
   1405          
   1406              /* LLR-Ref: 110 */
   1407              ATA_CLEARBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_RDY4TX)
   \   0000007A   8100               LD      R16, Z
   \   0000007C   7B0F               ANDI    R16, 0xBF
   \   0000007E   8300               ST      Z, R16
   1408          }
   \   00000080   9508               RET
   \   00000082                      REQUIRE _A_SREG
   \   00000082                      REQUIRE _A_TRCDR
   \   00000082                      REQUIRE _A_TRCIDL
   \   00000082                      REQUIRE _A_TRCIDH
   \   00000082                      REQUIRE _A_SSMSR
   \   00000082                      REQUIRE _A_SFL
   \   00000082                      REQUIRE _A_DFL
   1409          
   1410          /*----------------------------------------------------------------------------- */
   1411          /** \brief <b>ATA_rfTxInitCurrentService_C</b>
   1412              does the initialization of ::g_sRfTxCurrentService
   1413          
   1414              Variable Usage:
   1415              \li [in,out] ::g_sRfTx Global RF Tx current service data
   1416              \li [out] ::g_sDebug Global Debug component data
   1417              \li [out] ::g_sRfTxCurrentService Global RF Tx current service data
   1418          
   1419              \image html ATA_rfTxInitCurrentService_C.png
   1420          
   1421              \internal
   1422              \li 010: Check for EEPROM or SRAM service configuration via ::g_sRfTx .bConfig[3]\n
   1423                       IF service configuration is located in EEPROM,
   1424                       THEN
   1425          
   1426              \li 020: Copy service specific configuration from EEPROM to
   1427                       ::g_sRfTxCurrentService .sService
   1428          
   1429              \li 025: IF after the EEPROM read access to retrieve the requested data, an
   1430                         uncorrectable EEPROM error was detected, indicated by
   1431                         bit "E2FF" in register EECR2 being set 1,
   1432                       THEN
   1433                         Set an EEPROM read error indication in ::g_sRfTx .bFlags of and
   1434                         set ::g_sDebug .bErrorCode to the RF Tx module EEPROM read error\n
   1435                       ENDIF
   1436          
   1437              \li 030: Copy path specific configuration from EEPROM to
   1438                       ::g_sRfTxCurrentService .sPath
   1439          
   1440              \li 035: IF after the EEPROM read access to retrieve the requested data, an
   1441                        uncorrectable EEPROM error was detected, indicated by
   1442                        bit "E2FF" in register EECR2 being set 1,
   1443                       THEN
   1444                         Set an EEPROM read error indication in ::g_sRfTx .bFlags and
   1445                         set ::g_sDebug .bErrorCode to the RF Tx module EEPROM read error\n
   1446                       ENDIF
   1447          
   1448              \li 040: Copy channel specific configuration from EEPROM to
   1449                       ::g_sRfTxCurrentService .sChannel
   1450          
   1451              \li 045: IF after the EEPROM read access to retrieve the requested data, an
   1452                        uncorrectable EEPROM error was detected, indicated by
   1453                        bit "E2FF" in register EECR2 being set 1,\n
   1454                       THEN
   1455                         Set an EEPROM read error indication in ::g_sRfTx .bFlags and
   1456                         set ::g_sDebug .bErrorCode" to the RF Tx module EEPROM read error\n
   1457                       ENDIF
   1458          
   1459                       ELSE (service configuration is located in SRAM)
   1460              \li 050:   Copy service specific configuration from SRAM to
   1461                         ::g_sRfTxCurrentService .sService
   1462          
   1463              \li 060:   Copy path specific configuration from SRAM to
   1464                         ::g_sRfTxCurrentService .sPath
   1465          
   1466              \li 070:   Copy channel specific configuration from SRAM to
   1467                         ::g_sRfTxCurrentService .sChannel\n
   1468                       ENDIF
   1469          
   1470              \Derived{No}
   1471          
   1472              \Rationale{N/A}
   1473          
   1474              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868,\
   1475                            Primus2P-2443}
   1476              \endinternal
   1477          \n
   1478          */
   1479          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
   1480          VOIDFUNC ATA_rfTxInitCurrentService_C(void)
   \                     ATA_rfTxInitCurrentService_C:
   1481          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   1482              eEepErrorCode sEepErrCode;
   1483              
   1484              /* LLR-Ref: 010 */
   1485              if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_SVC_LOCATION)
   \   00000004   9100....           LDS     R16, (g_sRfTx + 3)
   \   00000008   9180....           LDS     R24, (g_sRfTx + 4)
   \   0000000C   9190....           LDS     R25, (g_sRfTx + 5)
   \   00000010   E048               LDI     R20, 8
   \   00000012   019C               MOVW    R19:R18, R25:R24
   \   00000014   FF03               SBRS    R16, 3
   \   00000016   C039               RJMP    ??ATA_rfTxInitCurrentService_C_0
   1486              {
   1487                  /* LLR-Ref: 020 */
   1488                  uint8_t *pSrcData = g_sRfTx.pAddress;
   1489                  uint8_t *pDstData = (uint8_t*)&g_sRfTxCurrentService.sService;
   1490                  sEepErrCode = ATA_eepReadBytes_C(pDstData, (uint16_t)pSrcData, sizeof(sRfTxServiceSpecificConfig));
   1491          
   1492                  /* LLR-Ref: 025 */
   1493                  if(sEepErrCode != EEC_NO_ERROR)
   \   00000018   ....               LDI     R16, LOW(g_sRfTxCurrentService)
   \   0000001A   ....               LDI     R17, (g_sRfTxCurrentService) >> 8
   \   0000001C   ........           CALL    ATA_eepReadBytes_C
   \   00000020   2300               TST     R16
   \   00000022   F041               BREQ    ??ATA_rfTxInitCurrentService_C_1
   1494                  {
   1495                      ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000024   ....               LDI     R30, LOW(g_sRfTx)
   \   00000026   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000028   8100               LD      R16, Z
   \   0000002A   6800               ORI     R16, 0x80
   \   0000002C   8300               ST      Z, R16
   1496                      g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   0000002E   E30F               LDI     R16, 63
   \   00000030   9300....           STS     g_sDebug, R16
   1497                  }
   1498          
   1499                  /* LLR-Ref: 030 */
   1500                  pSrcData += sizeof(sRfTxServiceSpecificConfig);
   \                     ??ATA_rfTxInitCurrentService_C_1:
   \   00000034   9608               ADIW    R25:R24, 8
   1501                  pDstData = (uint8_t*)&g_sRfTxCurrentService.sPath;
   1502                  sEepErrCode = ATA_eepReadBytes_C(pDstData, (uint16_t)pSrcData, sizeof(sRfTxServicePathConfig));
   1503          
   1504                  /* LLR-Ref: 035 */
   1505                  if(sEepErrCode != EEC_NO_ERROR)
   \   00000036   E144               LDI     R20, 20
   \   00000038   019C               MOVW    R19:R18, R25:R24
   \   0000003A   ....               LDI     R16, LOW((g_sRfTxCurrentService + 8))
   \   0000003C   ....               LDI     R17, HIGH((g_sRfTxCurrentService + 8))
   \   0000003E   ........           CALL    ATA_eepReadBytes_C
   \   00000042   2300               TST     R16
   \   00000044   F041               BREQ    ??ATA_rfTxInitCurrentService_C_2
   1506                  {
   1507                      ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000046   ....               LDI     R30, LOW(g_sRfTx)
   \   00000048   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000004A   8100               LD      R16, Z
   \   0000004C   6800               ORI     R16, 0x80
   \   0000004E   8300               ST      Z, R16
   1508                      g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   00000050   E30F               LDI     R16, 63
   \   00000052   9300....           STS     g_sDebug, R16
   1509                  }
   1510          
   1511                  /* LLR-Ref: 040 */
   1512                  pSrcData += sizeof(sRfTxServicePathConfig);
   \                     ??ATA_rfTxInitCurrentService_C_2:
   \   00000056   9644               ADIW    R25:R24, 20
   1513                  pDstData = (uint8_t*)&g_sRfTxCurrentService.sChannel;
   \   00000058   ....               LDI     R16, LOW((g_sRfTxCurrentService + 28))
   \   0000005A   ....               LDI     R17, HIGH((g_sRfTxCurrentService + 28))
   1514          
   1515                  uint8_t channel = g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_CHANNEL;
   \   0000005C   9120....           LDS     R18, (g_sRfTx + 3)
   \   00000060   7023               ANDI    R18, 0x03
   1516          
   1517                  if (channel > 0) {
   \   00000062   F021               BREQ    ??ATA_rfTxInitCurrentService_C_3
   1518                      pSrcData += sizeof(sRfTxChannelConfig);
   \   00000064   9605               ADIW    R25:R24, 5
   1519                  }
   1520          
   1521                  if (channel > 1) {
   \   00000066   3022               CPI     R18, 2
   \   00000068   F008               BRCS    ??ATA_rfTxInitCurrentService_C_3
   1522                      pSrcData += sizeof(sRfTxChannelConfig);
   \   0000006A   9605               ADIW    R25:R24, 5
   1523                  }
   1524          
   1525                  sEepErrCode = ATA_eepReadBytes_C(pDstData, (uint16_t)pSrcData, sizeof(sRfTxChannelConfig));
   1526          
   1527                  /* LLR-Ref: 045 */
   1528                  if(sEepErrCode != EEC_NO_ERROR)
   \                     ??ATA_rfTxInitCurrentService_C_3:
   \   0000006C   E045               LDI     R20, 5
   \   0000006E   019C               MOVW    R19:R18, R25:R24
   \   00000070   ........           CALL    ATA_eepReadBytes_C
   \   00000074   2300               TST     R16
   \   00000076   F119               BREQ    ??ATA_rfTxInitCurrentService_C_4
   1529                  {
   1530                      ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000078   ....               LDI     R30, LOW(g_sRfTx)
   \   0000007A   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000007C   8100               LD      R16, Z
   \   0000007E   6800               ORI     R16, 0x80
   \   00000080   8300               ST      Z, R16
   1531                      g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   00000082   E30F               LDI     R16, 63
   \   00000084   9300....           STS     g_sDebug, R16
   \   00000088   C01A               RJMP    ??ATA_rfTxInitCurrentService_C_4
   1532                  }
   1533              }
   1534              else
   1535              {
   1536                  /* LLR-Ref: 050 */
   1537                  uint8_t *pSrcData = g_sRfTx.pAddress;
   1538                  uint8_t *pDstData = (uint8_t*)&g_sRfTxCurrentService.sService;
   1539                  ATA_globalsCopySramSpace_C(pDstData, pSrcData, sizeof(sRfTxServiceSpecificConfig));
   \                     ??ATA_rfTxInitCurrentService_C_0:
   \   0000008A   ....               LDI     R16, LOW(g_sRfTxCurrentService)
   \   0000008C   ....               LDI     R17, (g_sRfTxCurrentService) >> 8
   \   0000008E   ........           CALL    ATA_globalsCopySramSpace_C
   1540          
   1541                  /* LLR-Ref: 060 */
   1542                  pSrcData += sizeof(sRfTxServiceSpecificConfig);
   \   00000092   9608               ADIW    R25:R24, 8
   1543                  pDstData = (uint8_t*)&g_sRfTxCurrentService.sPath;
   1544                  ATA_globalsCopySramSpace_C(pDstData, pSrcData, sizeof(sRfTxServicePathConfig));
   \   00000094   E144               LDI     R20, 20
   \   00000096   019C               MOVW    R19:R18, R25:R24
   \   00000098   ....               LDI     R16, LOW((g_sRfTxCurrentService + 8))
   \   0000009A   ....               LDI     R17, HIGH((g_sRfTxCurrentService + 8))
   \   0000009C   ........           CALL    ATA_globalsCopySramSpace_C
   1545          
   1546                  /* LLR-Ref: 070 */
   1547                  pSrcData += sizeof(sRfTxServicePathConfig);
   \   000000A0   9644               ADIW    R25:R24, 20
   1548                  pDstData = (uint8_t*)&g_sRfTxCurrentService.sChannel;
   \   000000A2   ....               LDI     R16, LOW((g_sRfTxCurrentService + 28))
   \   000000A4   ....               LDI     R17, HIGH((g_sRfTxCurrentService + 28))
   1549          
   1550                  uint8_t channel = g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_CHANNEL;
   \   000000A6   9120....           LDS     R18, (g_sRfTx + 3)
   \   000000AA   7023               ANDI    R18, 0x03
   1551          
   1552                  if (channel > 0) {
   \   000000AC   F021               BREQ    ??ATA_rfTxInitCurrentService_C_5
   1553                      pSrcData += sizeof(sRfTxChannelConfig);
   \   000000AE   9605               ADIW    R25:R24, 5
   1554                  }
   1555          
   1556                  if (channel > 1) {
   \   000000B0   3022               CPI     R18, 2
   \   000000B2   F008               BRCS    ??ATA_rfTxInitCurrentService_C_5
   1557                      pSrcData += sizeof(sRfTxChannelConfig);
   \   000000B4   9605               ADIW    R25:R24, 5
   1558                  }
   1559                  ATA_globalsCopySramSpace_C(pDstData, pSrcData, sizeof(sRfTxChannelConfig));
   \                     ??ATA_rfTxInitCurrentService_C_5:
   \   000000B6   E045               LDI     R20, 5
   \   000000B8   019C               MOVW    R19:R18, R25:R24
   \   000000BA   ........           CALL    ATA_globalsCopySramSpace_C
   1560              }
   1561          }
   \                     ??ATA_rfTxInitCurrentService_C_4:
   \   000000BE   9189               LD      R24, Y+
   \   000000C0   9199               LD      R25, Y+
   \   000000C2   9508               RET
   1562          
   1563          /*----------------------------------------------------------------------------- */
   1564          /** \brief <b>ATA_rfTxFrequencySettings_C</b>
   1565              does the Tx specific frequency settings according to the current
   1566              Service/Channel configuration
   1567          
   1568              Variable Usage:
   1569              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1570          
   1571              \image html ATA_rfTxFrequencySettings_C.png
   1572          
   1573              \internal
   1574              \li 010: Calculate f_tx_ask = f_lo + f_if
   1575                         f_lo = ::g_sRfTxCurrentService .sChannel.FREQ[2..0]
   1576                         f_if = ::g_sRfTxCurrentService .sService.bIF[1..0]
   1577              \li 020: Check modulation type via ::g_sRfTxCurrentService .sPath.bTxSetPath[1][7]\n
   1578                       IF ASK modulation is used
   1579              \li 030:   Copy FFREQ1 settings to FFREQ2
   1580              \li 040:   Switch to FFREQ2 to avoid PLL problems during programming of FFREQ1
   1581              \li 050:   Program FFREQ1 registers with f_tx_ask
   1582              \li 060:   Switch back to FFREQ1\n
   1583                       ELSE (FSK modulation is used)
   1584              \li 070:   Copy FFREQ1 settings to FFREQ2
   1585              \li 080:   Switch to FFREQ2 to avoid PLL problems during programming of FFREQ1
   1586              \li 090:   Calculate f_tx_fsk1 = f_tx_ask - f_tx_dev / 2
   1587                           f_tx_dev = ::g_sRfTxCurrentService .sPath.btxDev[1..0]
   1588              \li 100:   Program FFREQ1 with f_tx_fsk1
   1589              \li 110:   Switch back to FFREQ1
   1590              \li 120:   Calculate f_tx_fsk2 = f_tx_fsk1 + f_tx_dev (= f_tx_ask + f_tx_dev / 2)
   1591              \li 130:   Program FFREQ2 with f_tx_fsk2
   1592          
   1593              \Derived{No}
   1594          
   1595              \Rationale{N/A}
   1596          
   1597              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   1598              \endinternal
   1599          \n
   1600          */
   1601          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
   1602          static VOIDFUNC ATA_rfTxFrequencySettings_C(void)
   \                     ATA_rfTxFrequencySettings_C:
   1603          {
   1604              /* LLR-Ref: 010 */
   1605              uint32_t dwFrequency = ((uint32_t)g_sRfTxCurrentService.sChannel.bFFREQ[2] << 16U)
   1606                                  |((uint32_t)g_sRfTxCurrentService.sChannel.bFFREQ[1] <<  8U)
   1607                                  |((uint32_t)g_sRfTxCurrentService.sChannel.bFFREQ[0] <<  0U);
   1608              /* --- F_TX = F_LO + F_IF --- */
   1609              dwFrequency +=  ((uint32_t)g_sRfTxCurrentService.sService.bIF[1] <<  8U)
   1610                             |((uint32_t)g_sRfTxCurrentService.sService.bIF[0] <<  0U);
   \   00000000   9160....           LDS     R22, (g_sRfTxCurrentService + 30)
   \   00000004   9150....           LDS     R21, (g_sRfTxCurrentService + 29)
   \   00000008   9140....           LDS     R20, (g_sRfTxCurrentService + 28)
   \   0000000C   9010....           LDS     R1, (g_sRfTxCurrentService + 7)
   \   00000010   2422               CLR     R2
   \   00000012   9100....           LDS     R16, (g_sRfTxCurrentService + 6)
   \   00000016   0F40               ADD     R20, R16
   \   00000018   1D51               ADC     R21, R1
   \   0000001A   1D62               ADC     R22, R2
   1611          
   1612              /* LLR-Ref: 020 */
   1613              if (g_sRfTxCurrentService.sPath.bTxSetPath[1] & BM_RFTXSERVICE_BTXSETPATH_MODULATION) {
   \   0000001C   9100....           LDS     R16, (g_sRfTxCurrentService + 16)
   \   00000020   FF07               SBRS    R16, 7
   \   00000022   C016               RJMP    ??ATA_rfTxFrequencySettings_C_0
   1614                  /* ASK Modulation */
   1615                  /* --- F_TX_ASK = F_LO + F_IF --- */
   1616                  /* LLR-Ref: 030 */
   1617                  FFREQ2H = FFREQ1H;
   \   00000024   9100....           LDS     R16, _A_FFREQ1H
   \   00000028   9300....           STS     _A_FFREQ2H, R16
   1618                  FFREQ2M = FFREQ1M;
   \   0000002C   9100....           LDS     R16, _A_FFREQ1M
   \   00000030   9300....           STS     _A_FFREQ2M, R16
   1619                  FFREQ2L = FFREQ1L;
   \   00000034   9100....           LDS     R16, _A_FFREQ1L
   \   00000038   9300....           STS     _A_FFREQ2L, R16
   1620          
   1621                  /* LLR-Ref: 040 */
   1622                  FSCR    = BM_TXMOD | BM_SFM;
   \   0000003C   E003               LDI     R16, 3
   \   0000003E   B90F               OUT     0x0F, R16
   1623          
   1624                  /* LLR-Ref: 050 */
   1625                  FFREQ1H = (uint8_t)(dwFrequency >> 16U);
   \   00000040   9360....           STS     _A_FFREQ1H, R22
   1626                  FFREQ1M = (uint8_t)(dwFrequency >>  8U);
   \   00000044   9350....           STS     _A_FFREQ1M, R21
   1627                  FFREQ1L = (uint8_t)(dwFrequency >>  0U);
   \   00000048   9340....           STS     _A_FFREQ1L, R20
   1628          
   1629                  /* LLR-Ref: 060 */
   1630                  FSCR    = 0x00U;
   \   0000004C   B82F               OUT     0x0F, R2
   \   0000004E   9508               RET
   1631              }
   1632              else {   /* FSK Modulation */
   1633                  uint32_t dwFreqdev = (  ((uint32_t)g_sRfTxCurrentService.sPath.btxDev[1] <<  8U)
   1634                                         |((uint32_t)g_sRfTxCurrentService.sPath.btxDev[0] <<  0U));
   \                     ??ATA_rfTxFrequencySettings_C_0:
   \   00000050   9010....           LDS     R1, (g_sRfTxCurrentService + 9)
   \   00000054   9000....           LDS     R0, (g_sRfTxCurrentService + 8)
   1635                  /* LLR-Ref: 070 */
   1636                  FFREQ2H = FFREQ1H;
   \   00000058   9100....           LDS     R16, _A_FFREQ1H
   \   0000005C   9300....           STS     _A_FFREQ2H, R16
   1637                  FFREQ2M = FFREQ1M;
   \   00000060   9100....           LDS     R16, _A_FFREQ1M
   \   00000064   9300....           STS     _A_FFREQ2M, R16
   1638                  FFREQ2L = FFREQ1L;
   \   00000068   9100....           LDS     R16, _A_FFREQ1L
   \   0000006C   9300....           STS     _A_FFREQ2L, R16
   1639          
   1640                  /* LLR-Ref: 080 */
   1641                  FSCR    = BM_TXMOD | BM_SFM;
   \   00000070   E003               LDI     R16, 3
   \   00000072   B90F               OUT     0x0F, R16
   1642          
   1643                  /* LLR-Ref: 090 */
   1644                  dwFrequency -= dwFreqdev/2U;
   \   00000074   0180               MOVW    R17:R16, R1:R0
   \   00000076   9516               LSR     R17
   \   00000078   9507               ROR     R16
   \   0000007A   1B40               SUB     R20, R16
   \   0000007C   0B51               SBC     R21, R17
   \   0000007E   4060               SBCI    R22, 0
   1645          
   1646                  /* LLR-Ref: 100 */
   1647                  FFREQ1H = (uint8_t)(dwFrequency >> 16U);
   \   00000080   9360....           STS     _A_FFREQ1H, R22
   1648                  FFREQ1M = (uint8_t)(dwFrequency >>  8U);
   \   00000084   9350....           STS     _A_FFREQ1M, R21
   1649                  FFREQ1L = (uint8_t)(dwFrequency >>  0U);
   \   00000088   9340....           STS     _A_FFREQ1L, R20
   1650          
   1651                  /* LLR-Ref: 110 */
   1652                  FSCR    = 0x00U;
   \   0000008C   B82F               OUT     0x0F, R2
   1653          
   1654                  /* LLR-Ref: 120 */
   1655                  dwFrequency += dwFreqdev;
   \   0000008E   0D40               ADD     R20, R0
   \   00000090   1D51               ADC     R21, R1
   \   00000092   1D62               ADC     R22, R2
   1656          
   1657                  /* LLR-Ref: 130 */
   1658                  FFREQ2H = (uint8_t)(dwFrequency >> 16U);
   \   00000094   9360....           STS     _A_FFREQ2H, R22
   1659                  FFREQ2M = (uint8_t)(dwFrequency >>  8U);
   \   00000098   9350....           STS     _A_FFREQ2M, R21
   1660                  FFREQ2L = (uint8_t)(dwFrequency >>  0U);
   \   0000009C   9340....           STS     _A_FFREQ2L, R20
   1661              }
   1662          }
   \   000000A0   9508               RET
   \   000000A2                      REQUIRE _A_FFREQ2H
   \   000000A2                      REQUIRE _A_FFREQ1H
   \   000000A2                      REQUIRE _A_FFREQ2M
   \   000000A2                      REQUIRE _A_FFREQ1M
   \   000000A2                      REQUIRE _A_FFREQ2L
   \   000000A2                      REQUIRE _A_FFREQ1L
   \   000000A2                      REQUIRE _A_FSCR
   1663          
   1664          /*---------------------------------------------------------------------------*/
   1665          /** \brief <b>ATA_rfTxSetupTxModulator_C</b>
   1666              this function initializes the TX modulator according to the settings in
   1667              variable ::g_sRfTxCurrentService .sPath.
   1668          
   1669              Variable Usage:
   1670              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1671          
   1672              \image html ATA_rfTxSetupTxModulator_C.png
   1673          
   1674              \internal
   1675              \li 010: Initialize the following registers
   1676                           - TMCR1
   1677                           - TMCR2
   1678                           - TMSR
   1679                           - TMSSC
   1680                           - TMTLL
   1681                           - TMTLH
   1682                           - TMCPL
   1683                           - TMCPH
   1684                           - TMCIL
   1685                           - TMCIH
   1686                           - TMCSB
   1687          
   1688              \Derived{No}
   1689          
   1690              \Rationale{N/A}
   1691          
   1692              \Traceability{Primus2P-847}
   1693              \endinternal
   1694          \n
   1695           */
   1696          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1697          static VOIDFUNC ATA_rfTxSetupTxModulator_C(void)
   \                     ATA_rfTxSetupTxModulator_C:
   1698          {
   1699              /* LLR-Ref: 010 */
   1700              TMCR1 = BM_TMCIM | BM_TMSCS;
   \   00000000   E108               LDI     R16, 24
   \   00000002   9300....           STS     _A_TMCR1, R16
   1701              TMCR2 = g_sRfTxCurrentService.sPath.bTMCR2;
   \   00000006   9100....           LDS     R16, (g_sRfTxCurrentService + 19)
   \   0000000A   9300....           STS     _A_TMCR2, R16
   1702              TMSR  = BM_TMTCF;
   \   0000000E   E001               LDI     R16, 1
   \   00000010   9300....           STS     _A_TMSR, R16
   1703              TMSSC = g_sRfTxCurrentService.sPath.bTMSSC;
   \   00000014   9100....           LDS     R16, (g_sRfTxCurrentService + 20)
   \   00000018   9300....           STS     _A_TMSSC, R16
   1704              TMTLL = g_sRfTxCurrentService.sPath.bTMTL[0];
   \   0000001C   9100....           LDS     R16, (g_sRfTxCurrentService + 21)
   \   00000020   9300....           STS     _A_TMTLL, R16
   1705              TMTLH = g_sRfTxCurrentService.sPath.bTMTL[1];
   \   00000024   9100....           LDS     R16, (g_sRfTxCurrentService + 22)
   \   00000028   9300....           STS     _A_TMTLH, R16
   1706              TMCPL = g_sRfTxCurrentService.sPath.bTMCP[0];
   \   0000002C   9100....           LDS     R16, (g_sRfTxCurrentService + 23)
   \   00000030   9300....           STS     _A_TMCPL, R16
   1707              TMCPH = g_sRfTxCurrentService.sPath.bTMCP[1];
   \   00000034   9100....           LDS     R16, (g_sRfTxCurrentService + 24)
   \   00000038   9300....           STS     _A_TMCPH, R16
   1708              TMCIL = g_sRfTxCurrentService.sPath.bTMCI[0];
   \   0000003C   9100....           LDS     R16, (g_sRfTxCurrentService + 25)
   \   00000040   9300....           STS     _A_TMCIL, R16
   1709              TMCIH = g_sRfTxCurrentService.sPath.bTMCI[1];
   \   00000044   9100....           LDS     R16, (g_sRfTxCurrentService + 26)
   \   00000048   9300....           STS     _A_TMCIH, R16
   1710              TMCSB = g_sRfTxCurrentService.sPath.bTMCSB;
   \   0000004C   9100....           LDS     R16, (g_sRfTxCurrentService + 27)
   \   00000050   9300....           STS     _A_TMCSB, R16
   1711          }
   \   00000054   9508               RET
   \   00000056                      REQUIRE _A_TMCR1
   \   00000056                      REQUIRE _A_TMCR2
   \   00000056                      REQUIRE _A_TMSR
   \   00000056                      REQUIRE _A_TMSSC
   \   00000056                      REQUIRE _A_TMTLL
   \   00000056                      REQUIRE _A_TMTLH
   \   00000056                      REQUIRE _A_TMCPL
   \   00000056                      REQUIRE _A_TMCPH
   \   00000056                      REQUIRE _A_TMCIL
   \   00000056                      REQUIRE _A_TMCIH
   \   00000056                      REQUIRE _A_TMCSB
   1712          
   1713          /*----------------------------------------------------------------------------- */
   1714          /** \brief <b>ATA_rfTxConfigureTxSSM_C</b>
   1715              this function configures the Sequencer State Machine for TxMode(buffered).
   1716          
   1717              Variable Usage:
   1718              \li [in] ::g_sRfTx Global RF Tx component data
   1719              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1720          
   1721              \image html ATA_rfTxConfigureTxSSM_C.png
   1722          
   1723              \internal
   1724              \li 010: Check SSM configuration via ::g_sRfTx .bConfig[7..6]
   1725              \li 020: Stop current running SSM via SSMRR.SSMST\n
   1726                       IF no tuning is selected
   1727              \li 030:   Write following configuration to MSMCR1..4
   1728                             - SSM_PLL_EN_STATE
   1729                             - SSM_PLL_LOCK_STATE
   1730                             - SSM_TX_DSP_EN_STATE
   1731                             - SSM_END_STATE\n
   1732                       IF only VCO tuning is selected
   1733              \li 040:   Write following configuration to MSMCR1..4
   1734                             - SSM_PLL_EN_STATE
   1735                             - SSM_VCO_TUNING_STATE
   1736                             - SSM_PLL_LOCK_STATE
   1737                             - SSM_TX_DSP_EN_STATE
   1738                             - SSM_END_STATE\n
   1739                       IF only Antenna tuning is selected
   1740              \li 050:   Write following configuration to MSMCR1..4
   1741                             - SSM_PLL_EN_STATE
   1742                             - SSM_PLL_LOCK_STATE
   1743                             - SSM_TX_DSP_EN_STATE
   1744                             - SSM_ANTENNA_TUNING_STATE
   1745                             - SSM_END_STATE\n
   1746                       IF VCO and Antenna tuning is selected
   1747              \li 060:   Write following configuration to MSMCR1..4
   1748                             - SSM_PLL_EN_STATE
   1749                             - SSM_VCO_TUNING_STATE
   1750                             - SSM_PLL_LOCK_STATE
   1751                             - SSM_TX_DSP_EN_STATE
   1752                             - SSM_ANTENNA_TUNING_STATE
   1753                             - SSM_END_STATE
   1754              \li 070: Check for direct switch via ::g_sRfTx .bStatus[7]. In case of a direct
   1755                        switch, replace PLL_EN SSM with TX_DSP_DIS
   1756              \li 080: Initialize SSMFBR register
   1757              \li 090: Reset SSM by clearing SSMCR register content
   1758              \li 100: Set SSMCR.SSMTGE according to ::g_sRfTxCurrentService
   1759                        .sPath.bTxSetPath[0][7]
   1760              \li 110: Set SSMCR.SSMTPE according to ::g_sRfTxCurrentService
   1761                        .sPath.bTxSetPath[0][6]
   1762              \li 120: Set SSMCR.SSMTAE according to ::g_sRfTxCurrentService
   1763                        .sPath.bTxSetPath[1][6]
   1764          
   1765              \Derived{No}
   1766          
   1767              \Rationale{N/A}
   1768          
   1769              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   1770              \endinternal
   1771          \n
   1772          */
   1773          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
   1774          static VOIDFUNC ATA_rfTxConfigureTxSSM_C(void)
   \                     ATA_rfTxConfigureTxSSM_C:
   1775          {
   1776              /* LLR-Ref: 010 */
   1777              uint8_t config = g_sRfTx.bConfig & (BM_RFTXCONFIG_BCONFIG_ANT_TUNING | BM_RFTXCONFIG_BCONFIG_VCO_TUNING);
   \   00000000   9100....           LDS     R16, (g_sRfTx + 3)
   \   00000004   7C00               ANDI    R16, 0xC0
   1778          
   1779              /* LLR-Ref: 020 */
   1780              SSMRR = BM_SSMST;
   \   00000006   E012               LDI     R17, 2
   \   00000008   9310....           STS     _A_SSMRR, R17
   1781          
   1782              if (config == 0U) {
   \   0000000C   F429               BRNE    ??ATA_rfTxConfigureTxSSM_C_0
   1783                  /* NO VCO TUNING */
   1784                  /* NO ANTENNA TUNING */
   1785                  /* LLR-Ref: 030 */
   1786                  MSMCR1 = SSM_PLL_EN_STATE           | (uint8_t)(SSM_PLL_LOCK_STATE << 4U);
   \   0000000E   E201               LDI     R16, 33
   \   00000010   9300....           STS     _A_MSMCR1, R16
   1787                  MSMCR2 = SSM_TX_DSP_EN_STATE        | (uint8_t)(SSM_END_STATE << 4U);
   \   00000014   E003               LDI     R16, 3
   \   00000016   C00D               RJMP    ??ATA_rfTxConfigureTxSSM_C_1
   1788                  MSMCR3 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   1789                  MSMCR4 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   1790              }
   1791              else if (config == BM_RFTXCONFIG_BCONFIG_VCO_TUNING) {
   \                     ??ATA_rfTxConfigureTxSSM_C_0:
   \   00000018   3400               CPI     R16, 64
   \   0000001A   F429               BRNE    ??ATA_rfTxConfigureTxSSM_C_2
   1792                  /* ONLY VCO TUNING */
   1793                  /* NO ANTENNA TUNING */
   1794                  /* LLR-Ref: 040 */
   1795                  MSMCR1 = SSM_PLL_EN_STATE           | (uint8_t)(SSM_VCO_TUNING_STATE << 4U);
   \   0000001C   E701               LDI     R16, 113
   \   0000001E   9300....           STS     _A_MSMCR1, R16
   1796                  MSMCR2 = SSM_PLL_LOCK_STATE         | (uint8_t)(SSM_TX_DSP_EN_STATE << 4U);
   \   00000022   E302               LDI     R16, 50
   \   00000024   C006               RJMP    ??ATA_rfTxConfigureTxSSM_C_1
   1797                  MSMCR3 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   1798                  MSMCR4 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   1799              }
   1800              else if (config == BM_RFTXCONFIG_BCONFIG_ANT_TUNING) {
   \                     ??ATA_rfTxConfigureTxSSM_C_2:
   \   00000026   3800               CPI     R16, 128
   \   00000028   F451               BRNE    ??ATA_rfTxConfigureTxSSM_C_3
   1801                  /* NO VCO TUNING */
   1802                  /* ONLY ANTENNA TUNING */
   1803                  /* LLR-Ref: 050 */
   1804                  MSMCR1 = SSM_PLL_EN_STATE           | (uint8_t)(SSM_PLL_LOCK_STATE << 4U);
   \   0000002A   E201               LDI     R16, 33
   \   0000002C   9300....           STS     _A_MSMCR1, R16
   1805                  MSMCR2 = SSM_TX_DSP_EN_STATE        | (uint8_t)(SSM_ANTENNA_TUNING_STATE << 4U);
   \   00000030   E803               LDI     R16, 131
   \                     ??ATA_rfTxConfigureTxSSM_C_1:
   \   00000032   9300....           STS     _A_MSMCR2, R16
   1806                  MSMCR3 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   00000036   E000               LDI     R16, 0
   \   00000038   9300....           STS     _A_MSMCR3, R16
   1807                  MSMCR4 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   0000003C   C00A               RJMP    ??ATA_rfTxConfigureTxSSM_C_4
   1808              }
   1809              else {
   1810                  /* VCO TUNING */
   1811                  /* ANTENNA TUNING */
   1812                  /* LLR-Ref: 060 */
   1813                  MSMCR1 = SSM_PLL_EN_STATE           | (uint8_t)(SSM_VCO_TUNING_STATE << 4U);
   \                     ??ATA_rfTxConfigureTxSSM_C_3:
   \   0000003E   E701               LDI     R16, 113
   \   00000040   9300....           STS     _A_MSMCR1, R16
   1814                  MSMCR2 = SSM_PLL_LOCK_STATE         | (uint8_t)(SSM_TX_DSP_EN_STATE << 4U);
   \   00000044   E302               LDI     R16, 50
   \   00000046   9300....           STS     _A_MSMCR2, R16
   1815                  MSMCR3 = SSM_ANTENNA_TUNING_STATE   | (uint8_t)(SSM_END_STATE << 4U);
   \   0000004A   E008               LDI     R16, 8
   \   0000004C   9300....           STS     _A_MSMCR3, R16
   1816                  MSMCR4 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   00000050   E000               LDI     R16, 0
   \                     ??ATA_rfTxConfigureTxSSM_C_4:
   \   00000052   9300....           STS     _A_MSMCR4, R16
   1817              }
   1818          
   1819              /* LLR-Ref: 070 */
   1820              if (g_sRfTx.bStatus & BM_RFTXCONFIG_BSTATUS_DIRECT_SWITCH){
   \   00000056   9100....           LDS     R16, (g_sRfTx + 2)
   \   0000005A   FF07               SBRS    R16, 7
   \   0000005C   C00A               RJMP    ??ATA_rfTxConfigureTxSSM_C_5
   1821                  /* in case of a direct switch -> replace PLL_EN SSM with TX_DSP_DIS */
   1822                  MSMCR1 &= (uint8_t)(BM_MSMSM13 | BM_MSMSM12 | BM_MSMSM11 | BM_MSMSM10);
   \   0000005E   9100....           LDS     R16, _A_MSMCR1
   \   00000062   7F00               ANDI    R16, 0xF0
   \   00000064   9300....           STS     _A_MSMCR1, R16
   1823                  MSMCR1 |= SSM_TX_DSP_DIS_STATE;
   \   00000068   910000EC           LDS     R16, 236
   \   0000006C   6004               ORI     R16, 0x04
   \   0000006E   930000EC           STS     236, R16
   1824              }
   1825          
   1826              /* LLR-Ref: 080 */
   1827              SSMFBR = g_sRfTxCurrentService.sService.bSSMFBR;
   \                     ??ATA_rfTxConfigureTxSSM_C_5:
   \   00000072   9100....           LDS     R16, g_sRfTxCurrentService
   \   00000076   9300....           STS     _A_SSMFBR, R16
   1828          
   1829              /* LLR-Ref: 090 */
   1830              SSMCR = 0U;
   \   0000007A   E000               LDI     R16, 0
   \   0000007C   9300....           STS     _A_SSMCR, R16
   1831          
   1832              /* LLR-Ref: 100 */
   1833              /* SSMCR.SSMTGE - Sequencer State Machine Tx Gauss Enable */
   1834              if (g_sRfTxCurrentService.sPath.bTxSetPath[0] & BM_RFTXSERVICE_BTXSETPATH_GAUS) {
   \   00000080   ....               LDI     R30, LOW(g_sRfTxCurrentService)
   \   00000082   ....               LDI     R31, (g_sRfTxCurrentService) >> 8
   \   00000084   8507               LDD     R16, Z+15
   \   00000086   FF07               SBRS    R16, 7
   \   00000088   C005               RJMP    ??ATA_rfTxConfigureTxSSM_C_6
   1835                  ATA_SETBITMASK_C(SSMCR,BM_SSMTGE)
   \   0000008A   910000E2           LDS     R16, 226
   \   0000008E   6004               ORI     R16, 0x04
   \   00000090   930000E2           STS     226, R16
   1836              }
   1837              /* LLR-Ref: 110 */
   1838              /* SSMCR.SSMTPE - Sequencer State Machine Tx Preemphasis Enable */
   1839              if (g_sRfTxCurrentService.sPath.bTxSetPath[0] & BM_RFTXSERVICE_BTXSETPATH_PREE) {
   \                     ??ATA_rfTxConfigureTxSSM_C_6:
   \   00000094   8507               LDD     R16, Z+15
   \   00000096   FF06               SBRS    R16, 6
   \   00000098   C005               RJMP    ??ATA_rfTxConfigureTxSSM_C_7
   1840                  ATA_SETBITMASK_C(SSMCR,BM_SSMTPE)
   \   0000009A   910000E2           LDS     R16, 226
   \   0000009E   6008               ORI     R16, 0x08
   \   000000A0   930000E2           STS     226, R16
   1841              }
   1842              /* LLR-Ref: 120 */
   1843              /* SSMCR.SSMTAE - Sequencer State Machine Tx Ask-Shaping Enable */
   1844              if (g_sRfTxCurrentService.sPath.bTxSetPath[1] & BM_RFTXSERVICE_BTXSETPATH_ASK_SHAPING) {
   \                     ??ATA_rfTxConfigureTxSSM_C_7:
   \   000000A4   8900               LDD     R16, Z+16
   \   000000A6   FF06               SBRS    R16, 6
   \   000000A8   C005               RJMP    ??ATA_rfTxConfigureTxSSM_C_8
   1845                  ATA_SETBITMASK_C(SSMCR,BM_SSMTAE)
   \   000000AA   910000E2           LDS     R16, 226
   \   000000AE   6200               ORI     R16, 0x20
   \   000000B0   930000E2           STS     226, R16
   1846              }
   1847          }
   \                     ??ATA_rfTxConfigureTxSSM_C_8:
   \   000000B4   9508               RET
   \   000000B6                      REQUIRE _A_SSMRR
   \   000000B6                      REQUIRE _A_MSMCR1
   \   000000B6                      REQUIRE _A_MSMCR2
   \   000000B6                      REQUIRE _A_MSMCR3
   \   000000B6                      REQUIRE _A_MSMCR4
   \   000000B6                      REQUIRE _A_SSMFBR
   \   000000B6                      REQUIRE _A_SSMCR
   1848          
   1849          /*---------------------------------------------------------------------------*/
   1850          /** \brief <b>ATA_rfTxFevcoCalculation_C</b>
   1851              does calculation for FEVCO register setting.
   1852          
   1853              Variable Usage:
   1854              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   1855          
   1856              \image html ATA_rfTxFevcoCalculation_C.png
   1857          
   1858              \internal
   1859              \li 010: Read offset values for vcob and cpcc from EEPROM g_sEepFacLockRfFrontend.bFEVCOoffset
   1860                           - vcob_offset = g_sEepFacLockRfFrontend.bFEVCOoffset[7..4]
   1861                           - cpcc_offset = g_sEepFacLockRfFrontend.bFEVCOoffset[3..0]
   1862              \li 020: Eead vcob value from ::g_sRfTxCurrentService .sService.bFEVCO[7..4]
   1863              \li 030: Read cpcc value from ::g_sRfTxCurrentService .sService.bFEVCO[3..0]
   1864              \li 040: Extend signed 4 bit value vcob to 8 bit
   1865              \li 050: Extend signed 4 bit value cpcc to 8 bit
   1866              \li 060: Calucate 7 + vcob + vcob_offset and limit negative results to 0
   1867              \li 070: Move 4 bit result of calculation to vcob[7..4]
   1868              \li 080: Calucate 7 + cpcc + cpcc_offset and limit negative results to 0
   1869              \li 090: Move 4 bit result of calculation to cpcc[3..0]
   1870              \li 100: Combine vcob and cpcc for retVal
   1871          
   1872              \Derived{No}
   1873          
   1874              \Rationale{N/A}
   1875          
   1876              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868,
   1877                            Primus2P-2443}
   1878              \endinternal
   1879          \n
   1880          */
   1881          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1882          static UINT8FUNC ATA_rfTxFevcoCalculation_C(void)
   \                     ATA_rfTxFevcoCalculation_C:
   1883          {
   \   00000000   9721               SBIW    R29:R28, 1
   1884              uint8_t bRetVal      = 0U;
   1885              int8_t  bResult      = 0;
   1886              eEepErrorCode sEepErrCode;
   1887          
   1888              /* LLR-Ref: 010 */
   1889              uint8_t bFevcoOffset = 0U;
   \   00000002   E000               LDI     R16, 0
   \   00000004   8308               ST      Y, R16
   1890              sEepErrCode = ATA_eepReadBytes_C(&bFevcoOffset, (uint16_t)&g_sAtmelEEPromSection.eepFEVCOoffset, 1U);
   1891              if(sEepErrCode != EEC_NO_ERROR)
   \   00000006   E041               LDI     R20, 1
   \   00000008   ....               LDI     R18, LOW((g_sAtmelEEPromSection + 133))
   \   0000000A   ....               LDI     R19, HIGH((g_sAtmelEEPromSection + 133))
   \   0000000C   018E               MOVW    R17:R16, R29:R28
   \   0000000E   ........           CALL    ATA_eepReadBytes_C
   \   00000012   2300               TST     R16
   \   00000014   F041               BREQ    ??ATA_rfTxFevcoCalculation_C_0
   1892              {
   1893                  ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000016   ....               LDI     R30, LOW(g_sRfTx)
   \   00000018   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000001A   8100               LD      R16, Z
   \   0000001C   6800               ORI     R16, 0x80
   \   0000001E   8300               ST      Z, R16
   1894                  g_sDebug.bErrorCode = DEBUG_ERROR_CODE_RFTX_EEPROM_READ_ERROR;
   \   00000020   E30F               LDI     R16, 63
   \   00000022   9300....           STS     g_sDebug, R16
   1895              }
   1896          
   1897              /* LLR-Ref: 020 */
   1898              uint8_t bVcob        = (g_sRfTxCurrentService.sService.bFEVCO & 0xF0U) >> 4U;
   \                     ??ATA_rfTxFevcoCalculation_C_0:
   \   00000026   9100....           LDS     R16, (g_sRfTxCurrentService + 4)
   \   0000002A   9502               SWAP    R16
   \   0000002C   700F               ANDI    R16, 0x0F
   1899              uint8_t bVcobOffset  = (bFevcoOffset & 0xF0U) >> 4U;
   \   0000002E   8128               LD      R18, Y
   \   00000030   9522               SWAP    R18
   \   00000032   702F               ANDI    R18, 0x0F
   1900          
   1901              /* LLR-Ref: 030 */
   1902              uint8_t bCpcc        = g_sRfTxCurrentService.sService.bFEVCO & 0x0FU;
   \   00000034   9110....           LDS     R17, (g_sRfTxCurrentService + 4)
   \   00000038   701F               ANDI    R17, 0x0F
   1903              uint8_t bCpccOffset  = bFevcoOffset & 0x0FU;
   \   0000003A   8138               LD      R19, Y
   \   0000003C   703F               ANDI    R19, 0x0F
   1904          
   1905              /* LLR-Ref: 040 */
   1906              if (bVcob > 7U) {
   \   0000003E   3008               CPI     R16, 8
   \   00000040   F008               BRCS    ??ATA_rfTxFevcoCalculation_C_1
   1907                  ATA_SETBITMASK_C(bVcob,0xF0U)
   \   00000042   6F00               ORI     R16, 0xF0
   1908              }
   1909          
   1910              /* LLR-Ref: 050 */
   1911              if (bCpcc > 7U) {
   \                     ??ATA_rfTxFevcoCalculation_C_1:
   \   00000044   3018               CPI     R17, 8
   \   00000046   F008               BRCS    ??ATA_rfTxFevcoCalculation_C_2
   1912                  ATA_SETBITMASK_C(bCpcc,0xF0U)
   \   00000048   6F10               ORI     R17, 0xF0
   1913              }
   1914          
   1915              /* LLR-Ref: 060 */
   1916              bResult = 7 + (int8_t)bVcob + (int8_t)bVcobOffset;
   \                     ??ATA_rfTxFevcoCalculation_C_2:
   \   0000004A   0F02               ADD     R16, R18
   \   0000004C   5F09               SUBI    R16, 249
   \   0000004E   2F20               MOV     R18, R16
   1917              if(bResult < 0) {
   \   00000050   F40A               BRPL    ??ATA_rfTxFevcoCalculation_C_3
   1918                  bResult = 0;
   \   00000052   E020               LDI     R18, 0
   1919              }
   1920          
   1921              /* LLR-Ref: 070 */
   1922              bVcob = (uint8_t)((uint8_t)bResult << 4U);
   1923              bVcob &= 0xF0U;
   \                     ??ATA_rfTxFevcoCalculation_C_3:
   \   00000054   9522               SWAP    R18
   \   00000056   7F20               ANDI    R18, 0xF0
   \   00000058   2F02               MOV     R16, R18
   1924          
   1925              /* LLR-Ref: 080 */
   1926              bResult = 7 + (int8_t)bCpcc + (int8_t)bCpccOffset;
   \   0000005A   0F13               ADD     R17, R19
   \   0000005C   5F19               SUBI    R17, 249
   \   0000005E   2F21               MOV     R18, R17
   1927              if (bResult < 0){
   \   00000060   F40A               BRPL    ??ATA_rfTxFevcoCalculation_C_4
   1928                  bResult = 0;
   \   00000062   E020               LDI     R18, 0
   1929              }
   1930          
   1931              /* LLR-Ref: 090 */
   1932              bCpcc = (uint8_t)bResult;
   1933              bCpcc &= 0x0FU;
   1934          
   1935              /* LLR-Ref: 100 */
   1936              bRetVal = bVcob | bCpcc;
   1937          
   1938              return bRetVal;
   \                     ??ATA_rfTxFevcoCalculation_C_4:
   \   00000064   702F               ANDI    R18, 0x0F
   \   00000066   2B02               OR      R16, R18
   \   00000068                      REQUIRE ?Subroutine4
   \   00000068                      ;               // Fall through to label ?Subroutine4
   1939          }
   1940          
   1941          /*---------------------------------------------------------------------------*/
   1942          /** \brief <b>ATA_rfTxEnd_C</b>
   1943              closes and switches all used peripherals off.
   1944          
   1945              Variable Usage:
   1946              \li [out] ::g_sRfTxFlowCtrl Global RF Tx statemachine data
   1947              \li [in] ::g_sRfTx Global RF Tx component data
   1948          
   1949              \image html ATA_rfTxEnd_C.png
   1950          
   1951              \internal
   1952              \li 010: Switch off Timer 3 by calling function ::ATA_timer3Close_C
   1953                          Note: Timer 2 already switched off in function ATA_rfTxShutdown_C
   1954              \li 020: Reset FSCR and FSEN register
   1955              \li 030: Disable SSM interrupt and stop currently running SSM anyway
   1956              \li 040: Remove power from SSM, TX Modulator, CRC and TX DSP HW blocks
   1957              \li 050: Check if system shall return to IDLEMode(RC) or IDLEMode(XTO)\n
   1958                       IF return to IDLEMode(XTO)
   1959              \li 060: Reset SUPCR.AVDIC, reset FEEN1/FEEN2 register, set FEEN1.XTOEN\n
   1960                       ELSE (return to IDLEMode(RC))
   1961              \li 070: Switch AVR core clock to FRC via function ::ATA_globalsClkSwitchFrc_C
   1962                       Reset FEEN1/FEEN2 and SUPCR register\n
   1963                       ENDIF
   1964              \li 080: Reset SW statemachine data ::g_sRfTxFlowCtrl
   1965          
   1966              \Derived{No}
   1967          
   1968              \Rationale{N/A}
   1969          
   1970              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   1971              \endinternal
   1972          \n
   1973          */
   1974          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   1975          static VOIDFUNC ATA_rfTxEnd_C(void)
   \                     ATA_rfTxEnd_C:
   1976          {
   1977              /* LLR-Ref: 010 */
   1978              ATA_timer3Close_C();
   \   00000000   ........           CALL    ATA_timer3Close_C
   1979          
   1980              /* LLR-Ref: 020 */
   1981              FSCR = 0x00U;
   \   00000004   E000               LDI     R16, 0
   \   00000006   B90F               OUT     0x0F, R16
   1982              FSEN = 0x00U;
   \   00000008   9300....           STS     _A_FSEN, R16
   1983          
   1984              /* LLR-Ref: 030 */
   1985              SSMIMR = 0x00U;
   \   0000000C   9300....           STS     _A_SSMIMR, R16
   1986              SSMRR  = BM_SSMST;
   \   00000010   E002               LDI     R16, 2
   \   00000012   9300....           STS     _A_SSMRR, R16
   1987          
   1988              /* LLR-Ref: 040 */
   1989              ATA_POWEROFF_C(PRR2,PRSSM)
   \   00000016   9A17               SBI     0x02, 0x07
   1990              ATA_POWEROFF_C(PRR2,PRTM)
   \   00000018   9A16               SBI     0x02, 0x06
   1991              ATA_POWEROFF_C(PRR0,PRCRC)
   \   0000001A   9AD3               SBI     0x1A, 0x03
   1992              ATA_POWEROFF_C(PRR0,PRTXDC)
   \   0000001C   9AD2               SBI     0x1A, 0x02
   1993          
   1994              /* LLR-Ref: 050 */
   1995              if (g_sRfTx.bConfig & BM_RFTXCONFIG_BCONFIG_SHUTDOWN_MODE) {
   \   0000001E   ....               LDI     R30, LOW(g_sRfTx)
   \   00000020   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000022   8103               LDD     R16, Z+3
   \   00000024   FF04               SBRS    R16, 4
   \   00000026   C00C               RJMP    ??ATA_rfTxEnd_C_0
   1996                  /* LLR-Ref: 060 */
   1997                  ATA_CLEARBITMASK_C(SUPCR,BM_AVDIC)
   \   00000028   910000CC           LDS     R16, 204
   \   0000002C   7F07               ANDI    R16, 0xF7
   \   0000002E   930000CC           STS     204, R16
   1998                  FEEN2 = 0U;
   \   00000032   E000               LDI     R16, 0
   \   00000034   9300....           STS     _A_FEEN2, R16
   1999                  FEEN1 = BM_XTOEN;
   \   00000038   E004               LDI     R16, 4
   \   0000003A   9300....           STS     _A_FEEN1, R16
   \   0000003E   C021               RJMP    ??ATA_rfTxEnd_C_1
   2000              }
   2001              else {
   2002                  /* LLR-Ref: 070 */
   2003                  /* --P2P-3655-- */
   2004                  if( g_sRfTx.bCmcrSetting & BM_CCS) 
   \                     ??ATA_rfTxEnd_C_0:
   \   00000040   8106               LDD     R16, Z+6
   \   00000042   FF03               SBRS    R16, 3
   \   00000044   C014               RJMP    ??ATA_rfTxEnd_C_2
   2005                  {
   2006                      uint8_t bClockSource = g_sRfTx.bCmcrSetting & (BM_CMM2|BM_CMM1|BM_CMM0);
   \   00000046   7007               ANDI    R16, 0x07
   2007                      if ( bClockSource== 0)  // CLK_SRC
   \   00000048   F419               BRNE    ??ATA_rfTxEnd_C_3
   2008                      {
   2009                          ATA_globalsClkSwitchSrc_C();
   \   0000004A   ........           CALL    ATA_globalsClkSwitchSrc_C
   \   0000004E   C011               RJMP    ??ATA_rfTxEnd_C_4
   2010                      }
   2011                      else if (bClockSource == 2) // CLK_EXT
   \                     ??ATA_rfTxEnd_C_3:
   \   00000050   3002               CPI     R16, 2
   \   00000052   F451               BRNE    ??ATA_rfTxEnd_C_5
   2012                      {
   2013                          if (SUPCR & BM_DVHEN)
   \   00000054   9100....           LDS     R16, _A_SUPCR
   \   00000058   FF05               SBRS    R16, 5
   \   0000005A   C002               RJMP    ??ATA_rfTxEnd_C_6
   2014                          {
   2015                              ATA_globalsClkSwitchExt_C(TRUE);
   \   0000005C   E001               LDI     R16, 1
   \   0000005E   C001               RJMP    ??ATA_rfTxEnd_C_7
   2016                          } else {
   2017                              ATA_globalsClkSwitchExt_C(FALSE);
   \                     ??ATA_rfTxEnd_C_6:
   \   00000060   E000               LDI     R16, 0
   \                     ??ATA_rfTxEnd_C_7:
   \   00000062   ........           CALL    ATA_globalsClkSwitchExt_C
   \   00000066   C005               RJMP    ??ATA_rfTxEnd_C_4
   2018                          }
   2019                      }
   2020                      else // CLK_FRC
   2021                      {
   2022                          ATA_globalsClkSwitchFrc_C();
   \                     ??ATA_rfTxEnd_C_5:
   \   00000068   ........           CALL    ATA_globalsClkSwitchFrc_C
   \   0000006C   C002               RJMP    ??ATA_rfTxEnd_C_4
   2023                      }
   2024                  } else {    // CLK_MRC
   2025                      ATA_globalsClkSwitchMrc_C();
   \                     ??ATA_rfTxEnd_C_2:
   \   0000006E   ........           CALL    ATA_globalsClkSwitchMrc_C
   2026                  }
   2027                  FEEN1 = 0U;
   \                     ??ATA_rfTxEnd_C_4:
   \   00000072   E000               LDI     R16, 0
   \   00000074   9300....           STS     _A_FEEN1, R16
   2028                  ATA_CLEARBITMASK_C(SUPCR,(BM_AVEN | BM_AVCCRM | BM_AVCCLM | BM_AVDIC))
   \   00000078   9100....           LDS     R16, _A_SUPCR
   \   0000007C   7E04               ANDI    R16, 0xE4
   \   0000007E   9300....           STS     _A_SUPCR, R16
   2029              }
   2030          
   2031              /* LLR-Ref: 080 */
   2032              g_sRfTxFlowCtrl.bIndex    = 0U;
   \                     ??ATA_rfTxEnd_C_1:
   \   00000082   E000               LDI     R16, 0
   \   00000084   9300....           STS     g_sRfTxFlowCtrl, R16
   2033              g_sRfTxFlowCtrl.fpLut     = 0x0000U;
   \   00000088   9300....           STS     (g_sRfTxFlowCtrl + 1), R16
   \   0000008C   9300....           STS     (g_sRfTxFlowCtrl + 2), R16
   2034          }
   \   00000090   9508               RET
   \   00000092                      REQUIRE _A_FSCR
   \   00000092                      REQUIRE _A_FSEN
   \   00000092                      REQUIRE _A_SSMIMR
   \   00000092                      REQUIRE _A_SSMRR
   \   00000092                      REQUIRE _A_PRR2
   \   00000092                      REQUIRE _A_PRR0
   \   00000092                      REQUIRE _A_SUPCR
   \   00000092                      REQUIRE _A_FEEN2
   \   00000092                      REQUIRE _A_FEEN1
   2035          
   2036          /*---------------------------------------------------------------------------*/
   2037          /** \brief <b>ATA_rfTxStartSendTelegramSSM_C</b>
   2038              configures and starts the SendTelegram SSM.
   2039          
   2040              Variable Usage:
   2041              \li [out] ::g_sRfTx Global RF Tx component data
   2042          
   2043              \image html ATA_rfTxStartSendTelegramSSM_C.png
   2044          
   2045              \internal
   2046              \li 010: Stop currently running SSM via SSMRR.SSMST
   2047              \li 020: Configure the SSM via MSMCR1..4 as follows
   2048                           - SSM_SEND_TELEGRAM_STATE
   2049                           - SSM_END_STATE
   2050              \li 030: Clear previous pending SSM interrupts via SSMIFR register
   2051              \li 040: Clear previous pending SSM error flag via setting flag SSMSR.SSMERR
   2052              \li 050: Clear rfTx SSM ready flag in ::g_sRfTx .bStatus[6]
   2053              \li 060: Start SendTelegram SSM via SSMRR.SSMR with SEND_TELEGRAM state
   2054          
   2055              \Derived{No}
   2056          
   2057              \Rationale{N/A}
   2058          
   2059              \Traceability{Primus2P-847}
   2060              \endinternal
   2061          \n
   2062          */
   2063          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   9300....           STS     _A_SSMRR, R16
   \   00000004   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next, root
   2064          static VOIDFUNC ATA_rfTxStartSendTelegramSSM_C(void)
   \                     ATA_rfTxStartSendTelegramSSM_C:
   2065          {
   2066              /* LLR-Ref: 010 */
   2067              SSMRR = BM_SSMST;
   \   00000000   E002               LDI     R16, 2
   \   00000002   9300....           STS     _A_SSMRR, R16
   2068          
   2069              /* LLR-Ref: 020 */
   2070              MSMCR1 = SSM_SEND_TELEGRAM_STATE    | (uint8_t)(SSM_END_STATE << 4U);
   \   00000006   E005               LDI     R16, 5
   \   00000008   9300....           STS     _A_MSMCR1, R16
   2071              MSMCR2 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_MSMCR2, R16
   2072              MSMCR3 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   00000012   9300....           STS     _A_MSMCR3, R16
   2073              MSMCR4 = SSM_END_STATE              | (uint8_t)(SSM_END_STATE << 4U);
   \   00000016   9300....           STS     _A_MSMCR4, R16
   2074          
   2075              /* LLR-Ref: 030 */
   2076              SSMIFR = 0x00U;
   \   0000001A   9300....           STS     _A_SSMIFR, R16
   2077          
   2078              /* LLR-Ref: 040 */
   2079              ATA_SETBITMASK_C(SSMSR,BM_SSMERR)
   \   0000001E   910000E6           LDS     R16, 230
   \   00000022   6800               ORI     R16, 0x80
   \   00000024   930000E6           STS     230, R16
   2080          
   2081              /* LLR-Ref: 050 */
   2082              ATA_CLEARBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_SSMREADY)
   \   00000028   ....               LDI     R30, LOW(g_sRfTx)
   \   0000002A   ....               LDI     R31, (g_sRfTx) >> 8
   \   0000002C   8102               LDD     R16, Z+2
   \   0000002E   7B0F               ANDI    R16, 0xBF
   \   00000030   8302               STD     Z+2, R16
   2083          
   2084              /* LLR-Ref: 060 */
   2085              SSMRR = BM_SSMR;
   \   00000032   E001               LDI     R16, 1
   \   00000034   ....               RJMP    ?Subroutine2
   \   00000036                      REQUIRE _A_SSMRR
   \   00000036                      REQUIRE _A_MSMCR1
   \   00000036                      REQUIRE _A_MSMCR2
   \   00000036                      REQUIRE _A_MSMCR3
   \   00000036                      REQUIRE _A_MSMCR4
   \   00000036                      REQUIRE _A_SSMIFR
   \   00000036                      REQUIRE _A_SSMSR
   2086          }
   2087          
   2088          /*---------------------------------------------------------------------------*/
   2089          /** \brief <b>ATA_rfTxOpenTimer3forTxing_C</b>
   2090              configures timer 3 for TXMode(buffered).
   2091          
   2092              Variable Usage:
   2093              \li [out] ::g_sTimer3 Global Timer 3 component data
   2094              \li [in] ::g_sRfTxCurrentService Global RF Tx current service data
   2095          
   2096              \image html ATA_rfTxOpenTimer3forTxing_C.png
   2097          
   2098              \internal
   2099              \li 010: Lock Timer 3 via ::g_sTimer3 .bStatus[7]
   2100              \li 020: Switch on Timer 3 HW block
   2101              \li 030: Configure Timer 3 registers for TXMode
   2102                           - T3IMR, disable Timer 3 interrupts
   2103                           - T3MRB, reset vlaue
   2104                           - T3MRA, clk = xto/4 prescaler = 1
   2105              \li 040: Setup T3CORL/H for Tx Data Rate with content from
   2106                        ::g_sRfTxCurrentService .sPath.bTXDR[1..0]
   2107              \li 050: Enable Timer 3 in T3CR register with
   2108                           - T3CR.T3CRM
   2109                           - T3CR.T3CTM
   2110          
   2111              \Derived{No}
   2112          
   2113              \Rationale{N/A}
   2114          
   2115              \Traceability{Primus2P-847}
   2116              \endinternal
   2117              \n
   2118          */
   2119          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   2120          static VOIDFUNC ATA_rfTxOpenTimer3forTxing_C(void)
   \                     ATA_rfTxOpenTimer3forTxing_C:
   2121          {
   2122              /* LLR-Ref: 010 */
   2123              ATA_SETBITMASK_C(g_sTimer3.bStatus,TMR3LOCK)
   \   00000000   ....               LDI     R30, LOW(g_sTimer3)
   \   00000002   ....               LDI     R31, (g_sTimer3) >> 8
   \   00000004   8100               LD      R16, Z
   \   00000006   6800               ORI     R16, 0x80
   \   00000008   8300               ST      Z, R16
   2124          
   2125              /* LLR-Ref: 020 */
   2126              ATA_POWERON_C(PRR1, PRT3)
   \   0000000A   980A               CBI     0x01, 0x02
   2127          
   2128              /* LLR-Ref: 030 */
   2129              T3IMR = 0U;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     _A_T3IMR, R16
   2130              T3MRB = 0U;
   \   00000012   9300....           STS     _A_T3MRB, R16
   2131              T3MRA = BM_T3CS1;
   \   00000016   E002               LDI     R16, 2
   \   00000018   9300....           STS     _A_T3MRA, R16
   2132          
   2133              /* LLR-Ref: 040 */
   2134              T3CORL = g_sRfTxCurrentService.sPath.bTXDR[0];
   \   0000001C   9100....           LDS     R16, (g_sRfTxCurrentService + 13)
   \   00000020   9300....           STS     _A_T3CORL, R16
   2135              T3CORH = g_sRfTxCurrentService.sPath.bTXDR[1];
   \   00000024   9100....           LDS     R16, (g_sRfTxCurrentService + 14)
   \   00000028   9300....           STS     _A_T3CORH, R16
   2136          
   2137              /* LLR-Ref: 050 */
   2138              ATA_SETBITMASK_C(T3CR,(BM_T3ENA | BM_T3CRM | BM_T3CTM))
   \   0000002C   B303               IN      R16, 0x13
   \   0000002E   6806               ORI     R16, 0x86
   \   00000030   BB03               OUT     0x13, R16
   2139          }
   \   00000032   9508               RET
   \   00000034                      REQUIRE _A_PRR1
   \   00000034                      REQUIRE _A_T3IMR
   \   00000034                      REQUIRE _A_T3MRB
   \   00000034                      REQUIRE _A_T3MRA
   \   00000034                      REQUIRE _A_T3CORL
   \   00000034                      REQUIRE _A_T3CORH
   \   00000034                      REQUIRE _A_T3CR
   2140          
   2141          /*---------------------------------------------------------------------------*/
   2142          /** \brief <b>ATA_rfTxSFifoFillLevelReached_ISR_C</b>
   2143              signals S-FIFO fill level reached in ::g_sRfTx .bFlags[1].
   2144          
   2145              Variable Usage:
   2146              \li [out] ::g_sRfTx Global RF Tx component data
   2147          
   2148              \image html ATA_rfTxSFifoFillLevelReached_ISR_C.png
   2149          
   2150              \internal
   2151              \li 010: Set fill level reached flag in ::g_sRfTx .bFlags[1]
   2152          
   2153              \Derived{No}
   2154          
   2155              \Rationale{N/A}
   2156          
   2157              \Traceability{Primus2P-845}
   2158              \endinternal
   2159          \n
   2160          */
   2161          /*---------------------------------------------------------------------------*/
   2162          //lint -esym(765, ATA_rfTxSFifoFillLevelReached_ISR_C) FlSc (26.05.2014)
   2163          /* disable lint note 765 - external 'ATA_rfTxSFifoFillLevelReached_ISR_C' could be made static
   2164           * interrupt service routine shall be accessed from outside via flash software 
   2165           */
   2166          //lint -esym(714, ATA_rfTxSFifoFillLevelReached_ISR_C) FlSc (26.05.2014)
   2167          /* disable lint note 765 - Symbol 'ATA_rfTxSFifoFillLevelReached_ISR_C' not referenced
   2168           * interrupt service routines are not directly referenced but are called
   2169           * by the HW interrupt handler
   2170           */
   2171          /* #pragma vector=SFFLR_vect */
   2172          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2173          __interrupt VOIDFUNC ATA_rfTxSFifoFillLevelReached_ISR_C(void)
   \                     ATA_rfTxSFifoFillLevelReached_ISR_C:
   2174          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   2175              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxSFifoFillLevelReached_ISR_C, 0x00);
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     _A_TRCDR, R16
   \   00000010   ....               LDI     R16, LOW(ATA_rfTxSFifoFillLevelReached_ISR_C/2)
   \   00000012   9300....           STS     _A_TRCIDL, R16
   \   00000016   ....               LDI     R16, (ATA_rfTxSFifoFillLevelReached_ISR_C/2) >> 8
   \   00000018   9300....           STS     _A_TRCIDH, R16
   2176              
   2177              /* LLR-Ref: 010 */
   2178              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_SFIFO_FILLLEVEL)
   \   0000001C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000001E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   6002               ORI     R16, 0x02
   \   00000024   ....               RJMP    ?Subroutine7
   \   00000026                      REQUIRE _A_TRCDR
   \   00000026                      REQUIRE _A_TRCIDL
   \   00000026                      REQUIRE _A_TRCIDH
   2179          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   8300               ST      Z, R16
   \   00000002                      REQUIRE ??Subroutine9_0
   \   00000002                      ;               // Fall through to label ??Subroutine9_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine9_0:
   \   00000000   BF1F               OUT     0x3F, R17
   \   00000002   9109               LD      R16, Y+
   \   00000004   9119               LD      R17, Y+
   \   00000006   91E9               LD      R30, Y+
   \   00000008   91F9               LD      R31, Y+
   \   0000000A   9518               RETI
   2180          
   2181          /*---------------------------------------------------------------------------*/
   2182          /** \brief <b>ATA_rfTxSFifoError_ISR_C</b>
   2183              signals S-FIFO overflow/underflow error in ::g_sRfTx .bFlags[7]
   2184              and ::g_sRfTx .bFlags[3].
   2185          
   2186              Variable Usage:
   2187              \li [out] ::g_sRfTx Global RF Tx component data
   2188              \li [out] ::g_sDebug Global Debug component data
   2189          
   2190              \image html ATA_rfTxSFifoError_ISR_C.png
   2191          
   2192              \internal
   2193              \li 010: Disable SFIFO error interrupt by clearing SFI.SFERIM to avoid
   2194                        multiple signalling
   2195              \li 020: Set SFIFO overflow/underflow error flag ::g_sRfTx .bFlags[3]
   2196              \li 030: Set RF Tx module error flag ::g_sRfTx .bFlags[7]
   2197              \li 040: Set error code ::g_sDebug .bErrorCode and ::g_sDebug .bSsmErrorCode
   2198          
   2199              \Derived{No}
   2200          
   2201              \Rationale{N/A}
   2202          
   2203              \Traceability{Primus2P-845}
   2204              \endinternal
   2205          \n
   2206          */
   2207          /*---------------------------------------------------------------------------*/
   2208          //lint -esym(765, ATA_rfTxSFifoError_ISR_C) FlSc (26.05.2014)
   2209          /* disable lint note 765 - external 'ATA_rfTxSFifoError_ISR_C' could be made static
   2210           * interrupt service routine shall be accessed from outside via flash software 
   2211           */
   2212          //lint -esym(714, ATA_rfTxSFifoError_ISR_C) FlSc (26.05.2014)
   2213          /* disable lint note 765 - Symbol 'ATA_rfTxSFifoError_ISR_C' not referenced
   2214           * interrupt service routines are not directly referenced but are called
   2215           * by the HW interrupt handler
   2216           */
   2217          /* #pragma vector=SFOUE_vect */
   2218          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2219          __interrupt VOIDFUNC ATA_rfTxSFifoError_ISR_C(void)
   \                     ATA_rfTxSFifoError_ISR_C:
   2220          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
   2221              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxSFifoError_ISR_C, 0x00);
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     _A_TRCDR, R16
   \   0000000C   ....               LDI     R16, LOW(ATA_rfTxSFifoError_ISR_C/2)
   \   0000000E   9300....           STS     _A_TRCIDL, R16
   \   00000012   ....               LDI     R16, (ATA_rfTxSFifoError_ISR_C/2) >> 8
   \   00000014   9300....           STS     _A_TRCIDH, R16
   2222          
   2223              /* LLR-Ref: 010 */
   2224              ATA_CLEARBITMASK_C(SFI,BM_SFERIM)
   \   00000018   910000E0           LDS     R16, 224
   \   0000001C   7F0D               ANDI    R16, 0xFD
   \   0000001E   930000E0           STS     224, R16
   2225          
   2226              /* LLR-Ref: 020 */
   2227              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_SFIFO_ERROR)
   2228          
   2229              /* LLR-Ref: 030 */
   2230              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000022   9100....           LDS     R16, g_sRfTx
   \   00000026   6808               ORI     R16, 0x88
   \   00000028   9300....           STS     g_sRfTx, R16
   2231          
   2232              /* LLR-Ref: 040 */
   2233              g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_RFTX_SFIFO_ERROR;
   \   0000002C   E205               LDI     R16, 37
   \   0000002E                      REQUIRE ?Subroutine6
   \   0000002E                      REQUIRE _A_TRCDR
   \   0000002E                      REQUIRE _A_TRCIDL
   \   0000002E                      REQUIRE _A_TRCIDH
   \   0000002E                      REQUIRE _A_SFI
   \   0000002E                      ;               // Fall through to label ?Subroutine6
   2234              g_sDebug.bSsmErrorCode = 0U;
   2235          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   9300....           STS     g_sDebug, R16
   \   00000004   E000               LDI     R16, 0
   \   00000006   9300....           STS     (g_sDebug + 1), R16
   \   0000000A   BF1F               OUT     0x3F, R17
   \   0000000C   9109               LD      R16, Y+
   \   0000000E   9119               LD      R17, Y+
   \   00000010   9518               RETI
   2236          
   2237          /*---------------------------------------------------------------------------*/
   2238          /** \brief <b>ATA_rfTxDFifoFillLevelReached_ISR_C</b>
   2239              signals D-FIFO fill level reached in g_sRfTx.bFlags[2].
   2240          
   2241              Variable Usage:
   2242              \li [out] ::g_sRfTx Global RF Tx component data
   2243          
   2244              \image html ATA_rfTxDFifoFillLevelReached_ISR_C.png
   2245          
   2246              \internal
   2247              \li 010: Set fill level reached flag ::g_sRfTx .bFlags[2]
   2248          
   2249              \Derived{No}
   2250          
   2251              \Rationale{N/A}
   2252          
   2253              \Traceability{Primus2P-845}
   2254              \endinternal
   2255          \n
   2256          */
   2257          /*---------------------------------------------------------------------------*/
   2258          //lint -esym(765, ATA_rfTxDFifoFillLevelReached_ISR_C) FlSc (26.05.2014)
   2259          /* disable lint note 765 - external 'ATA_rfTxDFifoFillLevelReached_ISR_C' could be made static
   2260           * interrupt service routine shall be accessed from outside via flash software 
   2261           */
   2262          //lint -esym(714, ATA_rfTxDFifoFillLevelReached_ISR_C) FlSc (26.05.2014)
   2263          /* disable lint note 765 - Symbol 'ATA_rfTxDFifoFillLevelReached_ISR_C' not referenced
   2264           * interrupt service routines are not directly referenced but are called
   2265           * by the HW interrupt handler
   2266           */
   2267          /* #pragma vector=DFFLR_vect */
   2268          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2269          __interrupt VOIDFUNC ATA_rfTxDFifoFillLevelReached_ISR_C(void)
   \                     ATA_rfTxDFifoFillLevelReached_ISR_C:
   2270          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   2271              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxDFifoFillLevelReached_ISR_C, 0x00);
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     _A_TRCDR, R16
   \   00000010   ....               LDI     R16, LOW(ATA_rfTxDFifoFillLevelReached_ISR_C/2)
   \   00000012   9300....           STS     _A_TRCIDL, R16
   \   00000016   ....               LDI     R16, (ATA_rfTxDFifoFillLevelReached_ISR_C/2) >> 8
   \   00000018   9300....           STS     _A_TRCIDH, R16
   2272          
   2273              /* LLR-Ref: 010 */
   2274              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_DFIFO_FILLLEVEL)
   \   0000001C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000001E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   6004               ORI     R16, 0x04
   \   00000024   ....               RJMP    ?Subroutine7
   \   00000026                      REQUIRE _A_TRCDR
   \   00000026                      REQUIRE _A_TRCIDL
   \   00000026                      REQUIRE _A_TRCIDH
   2275          }
   2276          
   2277          /*---------------------------------------------------------------------------*/
   2278          /** \brief <b>ATA_rfTxDFifoError_ISR_C</b>
   2279              signals D-FIFO overflow/underflow error in ::g_sRfTx .bFlags[7]
   2280              and ::g_sRfTx .bFlags[4].
   2281          
   2282              Variable Usage:
   2283              \li [out] ::g_sRfTx Global RF Tx component data
   2284              \li [out] ::g_sDebug Global Debug component data
   2285          
   2286              \image html ATA_rfTxDFifoError_ISR_C.png
   2287          
   2288              \internal
   2289              \li 010: Disable D-FIFO error interrupt by clearing DFI.DFERIM to avoid
   2290                        multiple signalling
   2291              \li 020: Set SFIFO overflow/underflow error flag in ::g_sRfTx .bFlags[4]
   2292              \li 030: Set RF Tx module error flag ::g_sRfTx .bFlags[7]
   2293              \li 040: Set error code ::g_sDebug .bErrorCode and ::g_sDebug .bSsmErrorCode
   2294          
   2295              \Derived{No}
   2296          
   2297              \Rationale{N/A}
   2298          
   2299              \Traceability{Primus2P-845}
   2300              \endinternal
   2301          \n
   2302          */
   2303          /*---------------------------------------------------------------------------*/
   2304          //lint -esym(765, ATA_rfTxDFifoError_ISR_C) FlSc (26.05.2014)
   2305          /* disable lint note 765 - external 'ATA_rfTxDFifoError_ISR_C' could be made static
   2306           * interrupt service routine shall be accessed from outside via flash software 
   2307           */
   2308          //lint -esym(714, ATA_rfTxDFifoError_ISR_C) FlSc (26.05.2014)
   2309          /* disable lint note 765 - Symbol 'ATA_rfTxDFifoError_ISR_C' not referenced
   2310           * interrupt service routines are not directly referenced but are called
   2311           * by the HW interrupt handler
   2312           */
   2313          /* #pragma vector=DFOUE_vect */
   2314          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2315          __interrupt VOIDFUNC ATA_rfTxDFifoError_ISR_C(void)
   \                     ATA_rfTxDFifoError_ISR_C:
   2316          {
   \   00000000   931A               ST      -Y, R17
   \   00000002   930A               ST      -Y, R16
   \   00000004   B71F               IN      R17, 0x3F
   2317              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxDFifoError_ISR_C, 0x00);
   \   00000006   E000               LDI     R16, 0
   \   00000008   9300....           STS     _A_TRCDR, R16
   \   0000000C   ....               LDI     R16, LOW(ATA_rfTxDFifoError_ISR_C/2)
   \   0000000E   9300....           STS     _A_TRCIDL, R16
   \   00000012   ....               LDI     R16, (ATA_rfTxDFifoError_ISR_C/2) >> 8
   \   00000014   9300....           STS     _A_TRCIDH, R16
   2318          
   2319              /* LLR-Ref: 010 */
   2320              ATA_CLEARBITMASK_C(DFI,BM_DFERIM)
   \   00000018   910000D9           LDS     R16, 217
   \   0000001C   7F0D               ANDI    R16, 0xFD
   \   0000001E   930000D9           STS     217, R16
   2321          
   2322              /* LLR-Ref: 020 */
   2323              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_DFIFO_ERROR)
   2324          
   2325              /* LLR-Ref: 030 */
   2326              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_ERROR)
   \   00000022   9100....           LDS     R16, g_sRfTx
   \   00000026   6900               ORI     R16, 0x90
   \   00000028   9300....           STS     g_sRfTx, R16
   2327          
   2328              /* LLR-Ref: 040 */
   2329              g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_RFTX_DFIFO_ERROR;
   \   0000002C   E206               LDI     R16, 38
   \   0000002E   ....               RJMP    ?Subroutine6
   \   00000030                      REQUIRE _A_TRCDR
   \   00000030                      REQUIRE _A_TRCIDL
   \   00000030                      REQUIRE _A_TRCIDH
   \   00000030                      REQUIRE _A_DFI
   2330              g_sDebug.bSsmErrorCode = 0U;
   2331          }
   2332          
   2333          /*----------------------------------------------------------------------------- */
   2334          /** \brief <b>ATA_rfTxSsmRdy_ISR_C</b>
   2335              signals RF Tx SSM ready flag ::g_sRfTx .bStatus[6].
   2336          
   2337              Variable Usage:
   2338              \li [out] ::g_sRfTx Global RF Tx component data
   2339          
   2340              \image html ATA_rfTxSsmRdy_ISR_C.png
   2341          
   2342              \internal
   2343              \li 010: Set RF Tx SSM ready flag ::g_sRfTx .bStatus[6]
   2344          
   2345              \Derived{No}
   2346          
   2347              \Rationale{N/A}
   2348          
   2349              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   2350              \endinternal
   2351          \n
   2352          */
   2353          /*----------------------------------------------------------------------------- */
   2354          //lint -esym(765, ATA_rfTxSsmRdy_ISR_C) FlSc (26.05.2014)
   2355          /* disable lint note 765 - external 'ATA_rfTxSsmRdy_ISR_C' could be made static
   2356           * interrupt service routine shall be accessed from outside via flash software 
   2357           */
   2358          //lint -esym(714, ATA_rfTxSsmRdy_ISR_C) FlSc (26.05.2014)
   2359          /* disable lint note 765 - Symbol 'ATA_rfTxSsmRdy_ISR_C' not referenced
   2360           * interrupt service routines are not directly referenced but are called
   2361           * by the HW interrupt handler
   2362           */
   2363          /* #pragma vector=SSM_vect */
   2364          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2365          __interrupt VOIDFUNC ATA_rfTxSsmRdy_ISR_C(void)
   \                     ATA_rfTxSsmRdy_ISR_C:
   2366          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   2367              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxSsmRdy_ISR_C, 0x00);
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     _A_TRCDR, R16
   \   00000010   ....               LDI     R16, LOW(ATA_rfTxSsmRdy_ISR_C/2)
   \   00000012   9300....           STS     _A_TRCIDL, R16
   \   00000016   ....               LDI     R16, (ATA_rfTxSsmRdy_ISR_C/2) >> 8
   \   00000018   9300....           STS     _A_TRCIDH, R16
   2368          
   2369              /* LLR-Ref: 010 */
   2370              ATA_SETBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_SSMREADY)
   \   0000001C   ....               LDI     R30, LOW(g_sRfTx)
   \   0000001E   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000020   8102               LDD     R16, Z+2
   \   00000022   6400               ORI     R16, 0x40
   \   00000024   8302               STD     Z+2, R16
   2371          }
   \   00000026   ....               RJMP    ??Subroutine9_0
   \   00000028                      REQUIRE _A_TRCDR
   \   00000028                      REQUIRE _A_TRCIDL
   \   00000028                      REQUIRE _A_TRCIDH
   2372          
   2373          /*---------------------------------------------------------------------------*/
   2374          /** \brief <b>ATA_rfTxModulatorTelegramFinish_ISR_C</b>
   2375              signals RF Tx Module transmission complete in ::g_sRfTx .bStatus[5]
   2376              and End of Telegram in ::g_sRfTx .bFlags[0].
   2377          
   2378              Variable Usage:
   2379              \li [out] ::g_sRfTx Global RF Tx component data
   2380          
   2381              \image html ATA_rfTxModulatorTelegramFinish_ISR_C.png
   2382          
   2383              \internal
   2384              \li 010: Stop SendTelegram SSM via SSMRR.SSMST
   2385              \li 020: Set RF Tx module transmission complete flag ::g_sRfTx .bStatus[5]
   2386              \li 030: Set End of Telegram flag ::g_sRfTx .bFlags[0]
   2387          
   2388              \Derived{No}
   2389          
   2390              \Rationale{N/A}
   2391          
   2392              \Traceability{Primus2P-898}
   2393              \endinternal
   2394          \n
   2395          */
   2396          /*---------------------------------------------------------------------------*/
   2397          //lint -esym(765, ATA_rfTxModulatorTelegramFinish_ISR_C) FlSc (26.05.2014)
   2398          /* disable lint note 765 - external 'ATA_rfTxModulatorTelegramFinish_ISR_C' could be made static
   2399           * interrupt service routine shall be accessed from outside via flash software 
   2400           */
   2401          //lint -esym(714, ATA_rfTxModulatorTelegramFinish_ISR_C) FlSc (26.05.2014)
   2402          /* disable lint note 765 - Symbol 'ATA_rfTxModulatorTelegramFinish_ISR_C' not referenced
   2403           * interrupt service routines are not directly referenced but are called
   2404           * by the HW interrupt handler
   2405           */
   2406          /* #pragma vector=TMTCF_vect */
   2407          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next, root
   2408          __interrupt VOIDFUNC ATA_rfTxModulatorTelegramFinish_ISR_C(void)
   \                     ATA_rfTxModulatorTelegramFinish_ISR_C:
   2409          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B71F               IN      R17, 0x3F
   2410              ATA_SET_FUNCTION_TRACE_POINT_ISR_C(ATA_rfTxModulatorTelegramFinish_ISR_C, 0x00);
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   9300....           STS     _A_TRCDR, R16
   \   00000010   ....               LDI     R16, LOW(ATA_rfTxModulatorTelegramFinish_ISR_C/2)
   \   00000012   9300....           STS     _A_TRCIDL, R16
   \   00000016   ....               LDI     R16, (ATA_rfTxModulatorTelegramFinish_ISR_C/2) >> 8
   \   00000018   9300....           STS     _A_TRCIDH, R16
   2411          
   2412              /* LLR-Ref: 010 */
   2413              SSMRR = BM_SSMST;
   \   0000001C   E002               LDI     R16, 2
   \   0000001E   9300....           STS     _A_SSMRR, R16
   2414          
   2415              /* LLR-Ref: 020 */
   2416              ATA_SETBITMASK_C(g_sRfTx.bStatus,BM_RFTXCONFIG_BSTATUS_TRANSMISSION_COMPLETE)
   \   00000022   ....               LDI     R30, LOW(g_sRfTx)
   \   00000024   ....               LDI     R31, (g_sRfTx) >> 8
   \   00000026   8102               LDD     R16, Z+2
   \   00000028   6200               ORI     R16, 0x20
   \   0000002A   8302               STD     Z+2, R16
   2417          
   2418              /* LLR-Ref: 030 */
   2419              ATA_SETBITMASK_C(g_sRfTx.bFlags,BM_RFTXCONFIG_BFLAGS_EOT)
   \   0000002C   8100               LD      R16, Z
   \   0000002E   6001               ORI     R16, 0x01
   \   00000030                      REQUIRE ?Subroutine7
   \   00000030                      REQUIRE _A_TRCDR
   \   00000030                      REQUIRE _A_TRCIDL
   \   00000030                      REQUIRE _A_TRCIDH
   \   00000030                      REQUIRE _A_SSMRR
   \   00000030                      ;               // Fall through to label ?Subroutine7
   2420          }
   2421          
   2422          /*----------------------------------------------------------------------------- */
   2423          /** \brief <b>ATA_rfTxStartShutDownSSM_C</b>
   2424              starts the SSM shutdown.
   2425              
   2426              \image html ATA_rfTxStartShutDownSSM_C.png
   2427          
   2428              \internal
   2429              \li 010: Reset FSCR register (except FSCR.PAOER --> done via SSM)
   2430              \li 020: Reset FSEN register (except FSCR.ANTT  --> done via SSM)
   2431              \li 030: Power up SSM HW block
   2432              \li 040: Stop currently running SSM via SSMRR.SSMST
   2433              \li 050: Reset SSM by clearing SSMCR register content
   2434              \li 060: Configure SSM via MSMCR1..4 as follows
   2435                           - SSM_SHUTDOWN_STATE
   2436                           - SSM_END_STATE
   2437              \li 070: Reset SSMIFR to clear previous SSM interrupt flags
   2438              \li 080: Reset SSMSR.SSMERR flag
   2439              \li 090: Enable SSM ready interrupt in SSMIMR.SSMIM
   2440          
   2441              \Derived{No}
   2442          
   2443              \Rationale{N/A}
   2444          
   2445              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   2446              \endinternal
   2447          \n
   2448          */
   2449          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
   2450          static VOIDFUNC ATA_rfTxStartShutDownSSM_C(void)
   \                     ATA_rfTxStartShutDownSSM_C:
   2451          {
   2452              /* LLR-Ref: 010 */
   2453              ATA_CLEARBITMASK_C(FSCR,BM_PAOER)
   \   00000000   987C               CBI     0x0F, 0x04
   2454          
   2455              /* LLR-Ref: 020 */
   2456              ATA_CLEARBITMASK_C(FSEN,BM_ANTT)
   \   00000002   91000060           LDS     R16, 96
   \   00000006   7D0F               ANDI    R16, 0xDF
   \   00000008   93000060           STS     96, R16
   2457          
   2458              /* LLR-Ref: 030 */
   2459              ATA_POWERON_C(PRR2, PRSSM)
   \   0000000C   9817               CBI     0x02, 0x07
   2460          
   2461              /* LLR-Ref: 040 */
   2462              SSMRR = BM_SSMST;
   \   0000000E   E002               LDI     R16, 2
   \   00000010   9300....           STS     _A_SSMRR, R16
   2463          
   2464              /* LLR-Ref: 050 */
   2465              SSMCR = 0x00U;
   \   00000014   E000               LDI     R16, 0
   \   00000016   9300....           STS     _A_SSMCR, R16
   2466          
   2467              /* LLR-Ref: 060 */
   2468              MSMCR1 = SSM_SHUTDOWN_STATE | (uint8_t)(SSM_END_STATE << 4U);
   \   0000001A   E006               LDI     R16, 6
   \   0000001C   9300....           STS     _A_MSMCR1, R16
   2469          
   2470              /* LLR-Ref: 070 */
   2471              SSMIFR = 0x00U;
   \   00000020   E000               LDI     R16, 0
   \   00000022   9300....           STS     _A_SSMIFR, R16
   2472          
   2473              /* LLR-Ref: 080 */
   2474              ATA_SETBITMASK_C(SSMSR,BM_SSMERR)
   \   00000026   910000E6           LDS     R16, 230
   \   0000002A   6800               ORI     R16, 0x80
   \   0000002C   930000E6           STS     230, R16
   2475          
   2476              /* LLR-Ref: 090 */
   2477              SSMIMR = BM_SSMIM;
   \   00000030   E001               LDI     R16, 1
   \   00000032   9300....           STS     _A_SSMIMR, R16
   2478          
   2479              /* LLR-Ref: 100 */
   2480              SSMRR  = BM_SSMR;
   \   00000036                      REQUIRE ?Subroutine2
   \   00000036                      REQUIRE _A_FSCR
   \   00000036                      REQUIRE _A_FSEN
   \   00000036                      REQUIRE _A_PRR2
   \   00000036                      REQUIRE _A_SSMRR
   \   00000036                      REQUIRE _A_SSMCR
   \   00000036                      REQUIRE _A_MSMCR1
   \   00000036                      REQUIRE _A_SSMIFR
   \   00000036                      REQUIRE _A_SSMSR
   \   00000036                      REQUIRE _A_SSMIMR
   \   00000036                      ;               // Fall through to label ?Subroutine2
   2481          }
   2482          
   2483          
   2484          /*---------------------------------------------------------------------------*/
   2485          /** \brief <b>ATA_rfTxStartSsmWatchdog_C</b>
   2486              starts Timer2 to check timeouts of HW sequencer state machines.
   2487          
   2488              \return     OK on success, FAIL on failure
   2489          
   2490              \image html ATA_rfTxStartSsmWatchdog_C.png
   2491          
   2492              \internal
   2493              \li 010: Open Timer 2 by calling function ::ATA_timer2Open_C in order to start
   2494                       the SSM watchdog timer.
   2495          
   2496              \Derived{No}
   2497          
   2498              \Rationale{N/A}
   2499          
   2500              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   2501              \endinternal
   2502          \n
   2503          */
   2504          /*---------------------------------------------------------------------------*/

   \                                 In  segment CODE, align 2, keep-with-next, root
   2505          UINT8FUNC ATA_rfTxStartSsmWatchdog_C(void)
   \                     ATA_rfTxStartSsmWatchdog_C:
   2506          {
   \   00000000   9728               SBIW    R29:R28, 8
   2507              sTimerAsyn8BitParams  sTimer2Params = {
   2508                  BM_T2ENA,                   /* T2CR */
   2509                  0x00U,                      /* T2MR */
   2510                  0xFFU,                      /* T2COR */
   2511                  0x00U,                      /* T2IMR */
   2512                  (timerIRQHandler)0x0000,    /* g_sTimer2.ovfIsr */
   2513                  (timerIRQHandler)0x0000     /* g_sTimer2.compIsr */
   2514                  };
   \   00000002   ....               LDI     R30, LOW(`?<Constant {128, 0, 255, 0, (void (*)(void))0,`)
   \   00000004   ....               LDI     R31, (`?<Constant {128, 0, 255, 0, (void (*)(void))0,`) >> 8
   \   00000006   018E               MOVW    R17:R16, R29:R28
   \   00000008   E048               LDI     R20, 8
   \   0000000A   E050               LDI     R21, 0
   \   0000000C   ........           CALL    ?ML_FLASH_SRAM_16EC_16_L07
   2515          
   2516              /* LLR-Ref: 010 */
   2517              return ATA_timer2Open_C(&sTimer2Params);
   \   00000010   ........           CALL    ATA_timer2Open_C
   \   00000014   9628               ADIW    R29:R28, 8
   \   00000016   9508               RET
   2518          }

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \                     `?<Constant {128, 0, 255, 0, (void (*)(void))0,`:
   \   00000000   008000FF           DC8 128, 0, 255, 0
   \   00000004   00000000           DC16 0H, 0H
   2519          
   2520          /*----------------------------------------------------------------------------- */
   2521          /** \brief <b>ATA_rfTxStopSsmWatchdog_C</b>
   2522              stops the sequencer state machine watchdog.
   2523          
   2524              \image html ATA_rfTxStopSsmWatchdog_C.png
   2525          
   2526              \internal
   2527              \li 010: Close Timer 2 by calling function ::ATA_timer2Close_C in order to
   2528                       stop the SSM watchdog timer.
   2529          
   2530              \Derived{No}
   2531          
   2532              \Rationale{N/A}
   2533          
   2534              \Traceability{Primus2P-869,Primus2P-849,Primus2P-848,Primus2P-847,Primus2P-868}
   2535              \endinternal
   2536          \n
   2537          */
   2538          /*----------------------------------------------------------------------------- */

   \                                 In  segment CODE, align 2, keep-with-next, root
   2539          VOIDFUNC ATA_rfTxStopSsmWatchdog_C(void)
   \                     ATA_rfTxStopSsmWatchdog_C:
   2540          {
   2541              /* LLR-Ref: 010 */
   2542              ATA_timer2Close_C();
   \   00000000   ........           JMP     ATA_timer2Close_C
   2543          }

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ATA_rfTxClose_C
        0      2   -> ATA_timer2Close_C
        0      2   -> ATA_timer3Close_C
      0      2   ATA_rfTxConfigureTxSSM_C
      2      2   ATA_rfTxDFifoError_ISR_C
      4      2   ATA_rfTxDFifoFillLevelReached_ISR_C
      0      2   ATA_rfTxEnd_C
        0      2   -> ATA_globalsClkSwitchExt_C
        0      2   -> ATA_globalsClkSwitchFrc_C
        0      2   -> ATA_globalsClkSwitchMrc_C
        0      2   -> ATA_globalsClkSwitchSrc_C
        0      2   -> ATA_timer3Close_C
      1      2   ATA_rfTxFevcoCalculation_C
        1      2   -> ATA_eepReadBytes_C
      0      2   ATA_rfTxFillDFifo_C
      0      2   ATA_rfTxFillSFifo_C
      0      2   ATA_rfTxFrequencySettings_C
      2      2   ATA_rfTxInitCurrentService_C
        2      2   -> ATA_eepReadBytes_C
        2      2   -> ATA_globalsCopySramSpace_C
      1      2   ATA_rfTxInitFrontEnd_C
        1      2   -> ATA_eepReadBytes_C
        1      2   -> ATA_rfTxFevcoCalculation_C
      0      2   ATA_rfTxInitTxSSM_C
        0      2   -> ATA_rfTxConfigureTxSSM_C
        0      2   -> ATA_rfTxFrequencySettings_C
        0      2   -> ATA_rfTxSetupTxModulator_C
      0      2   ATA_rfTxInit_C
      4      2   ATA_rfTxModulatorTelegramFinish_ISR_C
      0      2   ATA_rfTxOpenTimer3forTxing_C
      0      2   ATA_rfTxProcessing_C
        0      2   -- Indirect call
      2      2   ATA_rfTxSFifoError_ISR_C
      4      2   ATA_rfTxSFifoFillLevelReached_ISR_C
      0      2   ATA_rfTxSetupTxModulator_C
      0      2   ATA_rfTxShutdown_C
        0      2   -> ATA_globalsWaitNus_ASM
        0      2   -> ATA_rfTxEnd_C
        0      2   -> ATA_rfTxStartShutDownSSM_C
        0      2   -> ATA_rfTxStopSsmWatchdog_C
      4      2   ATA_rfTxSsmRdy_ISR_C
      1      2   ATA_rfTxStartSSM_C
        1      2   -> ATA_rfTxStartSsmWatchdog_C
      0      2   ATA_rfTxStartSendTelegramSSM_C
      0      2   ATA_rfTxStartShutDownSSM_C
      8      2   ATA_rfTxStartSsmWatchdog_C
        8      2   -> ATA_timer2Open_C
        8      2 ?ML_FLASH_SRAM_16EC_16_L07
      0      2   ATA_rfTxStartTxBufSSM_C
        0      2   -> ATA_rfTxStartSSM_C
      0      2   ATA_rfTxStartTxModulator_C
        0      2   -> ATA_rfTxOpenTimer3forTxing_C
        0      2   -> ATA_rfTxStartSendTelegramSSM_C
      0      2   ATA_rfTxStartTxTransSSM_C
        0      2   -> ATA_rfTxStartSSM_C
      1      2   ATA_rfTxStartTx_C
        1      2   -> ATA_rfTxInitCurrentService_C
      0      2   ATA_rfTxStopSsmWatchdog_C
        0      2   -> ATA_timer2Close_C
      0      2   ATA_rfTxStop_C
        0      2   -> ATA_rfTxShutdown_C
      0      2   ATA_rfTxTransparentMode_C
      0      2   ATA_rfTxWait4AVCC_C
      0      2   ATA_rfTxWait4FillLevel_C
      0      2   ATA_rfTxWait4SSMrdy_C
        0      2   -> ATA_rfTxStopSsmWatchdog_C
      0      2   ATA_rfTxWait4TransmissionComplete_C
      0      2   ATA_rfTxWait4XTO_C
        0      2   -> ATA_globalsClkSwitchXTO_C


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {128, 0, 255, 0, (void (*)(void))0,
       6  ??Subroutine8_0
      12  ??Subroutine9_0
      36  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       4  ?Subroutine3
       4  ?Subroutine4
       2  ?Subroutine5
      18  ?Subroutine6
       2  ?Subroutine7
      46  ATA_rfTxClose_C
     182  ATA_rfTxConfigureTxSSM_C
      48  ATA_rfTxDFifoError_ISR_C
      38  ATA_rfTxDFifoFillLevelReached_ISR_C
     146  ATA_rfTxEnd_C
     104  ATA_rfTxFevcoCalculation_C
      50  ATA_rfTxFillDFifo_C
      50  ATA_rfTxFillSFifo_C
     162  ATA_rfTxFrequencySettings_C
     196  ATA_rfTxInitCurrentService_C
     210  ATA_rfTxInitFrontEnd_C
      98  ATA_rfTxInitTxSSM_C
      96  ATA_rfTxInit_C
      48  ATA_rfTxModulatorTelegramFinish_ISR_C
      52  ATA_rfTxOpenTimer3forTxing_C
      28  ATA_rfTxProcessing_C
      46  ATA_rfTxSFifoError_ISR_C
      38  ATA_rfTxSFifoFillLevelReached_ISR_C
      86  ATA_rfTxSetupTxModulator_C
     130  ATA_rfTxShutdown_C
      40  ATA_rfTxSsmRdy_ISR_C
     112  ATA_rfTxStartSSM_C
      54  ATA_rfTxStartSendTelegramSSM_C
      54  ATA_rfTxStartShutDownSSM_C
      24  ATA_rfTxStartSsmWatchdog_C
       2  ATA_rfTxStartTxBufSSM_C
     100  ATA_rfTxStartTxModulator_C
       4  ATA_rfTxStartTxTransSSM_C
     168  ATA_rfTxStartTx_C
       4  ATA_rfTxStopSsmWatchdog_C
      26  ATA_rfTxStop_C
       2  ATA_rfTxTransparentMode_C
      54  ATA_rfTxWait4AVCC_C
      72  ATA_rfTxWait4FillLevel_C
     158  ATA_rfTxWait4SSMrdy_C
      82  ATA_rfTxWait4TransmissionComplete_C
      66  ATA_rfTxWait4XTO_C
       1  _A_CMCR
       1  _A_DDRD
       1  _A_DFC
       1  _A_DFD
       1  _A_DFI
       1  _A_DFL
       1  _A_FEALR
       1  _A_FEANT
       1  _A_FEAT
       1  _A_FEBT
       1  _A_FECR
       1  _A_FEEN1
       1  _A_FEEN2
       1  _A_FEMS
       1  _A_FEPAC
       1  _A_FESR
       1  _A_FETN4
       1  _A_FEVCO
       1  _A_FEVCT
       1  _A_FFREQ1H
       1  _A_FFREQ1L
       1  _A_FFREQ1M
       1  _A_FFREQ2H
       1  _A_FFREQ2L
       1  _A_FFREQ2M
       1  _A_FSCR
       1  _A_FSEN
       1  _A_FSFCR
       1  _A_GACDIVH
       1  _A_GACDIVL
       1  _A_MSMCR1
       1  _A_MSMCR2
       1  _A_MSMCR3
       1  _A_MSMCR4
       1  _A_PORTD
       1  _A_PRR0
       1  _A_PRR1
       1  _A_PRR2
       1  _A_SFC
       1  _A_SFD
       1  _A_SFI
       1  _A_SFL
       1  _A_SREG
       1  _A_SSMCR
       1  _A_SSMFBR
       1  _A_SSMIFR
       1  _A_SSMIMR
       1  _A_SSMRR
       1  _A_SSMSR
       1  _A_SUPCR
       1  _A_SUPFR
       1  _A_T2IFR
       1  _A_T3CORH
       1  _A_T3CORL
       1  _A_T3CR
       1  _A_T3IMR
       1  _A_T3MRA
       1  _A_T3MRB
       1  _A_TMCIH
       1  _A_TMCIL
       1  _A_TMCPH
       1  _A_TMCPL
       1  _A_TMCR1
       1  _A_TMCR2
       1  _A_TMCSB
       1  _A_TMSR
       1  _A_TMSSC
       1  _A_TMTLH
       1  _A_TMTLL
       1  _A_TRCDR
       1  _A_TRCIDH
       1  _A_TRCIDL
       2  g_pRfTxBufStateMachine
       2  g_pRfTxTransStateMachine
       7  g_sRfTx
      20  g_sRfTxBufStateMachineLut
      33  g_sRfTxCurrentService
       3  g_sRfTxFlowCtrl
      16  g_sRfTxTransStateMachineLut

 
     7 bytes in segment .flowctrl
    40 bytes in segment .rftx
    72 bytes in segment ABSOLUTE
 2 972 bytes in segment CODE
    44 bytes in segment NEAR_F
 
 3 016 bytes of CODE memory
    47 bytes of DATA memory (+ 72 bytes shared)

Errors: none
Warnings: none
