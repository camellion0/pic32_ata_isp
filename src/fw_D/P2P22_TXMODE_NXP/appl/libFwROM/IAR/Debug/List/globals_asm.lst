###############################################################################
#                                                                             #
#     IAR Assembler V6.70.1.929/W32 for Atmel AVR 05/Apr/2016  13:30:37       #
#     Copyright 2015 IAR Systems AB.                                          #
#                                                                             #
#           Target option =  Relative jumps do not wrap                       #
#           Source file   =  C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\globals\src\globals_asm.s90#
#           List file     =  C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List\globals_asm.lst#
#           Object file   =  C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj\globals_asm.r90#
#           Command line  =  C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\globals\src\globals_asm.s90 #
#                            -v3                                              #
#                            -OC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj #
#                            -s+ -w+ -r -DHAVE_BITREVERSAL -M<>               #
#                            -LC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List #
#                            -t8 -u_enhancedCore -D__HAS_ENHANCED_CORE__=1    #
#                            -D__HAS_MUL__=1                                  #
#                            -IC:\Program Files (x86)\IAR Systems\Embedded Workbench 7.3\avr\INC\ #
#                            -IC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\..\..\..\firmware\stdc\src\ #
#                            -IC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\..\..\..\firmware\globals\src\ #
#                            -IC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\..\..\..\firmware\eep\src\ #
#                            -IC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\..\..\..\firmware\rf\src\ #
#                            -IC:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\..\..\..\firmware\calib\src\ #
#                            -D__MEMORY_MODEL__=2                             #
#                                                                             #
###############################################################################

      1    00000000              //lint -e9059
      2    00000000              /* *ASM***************************************
                                 *********************************
      3    00000000                Use of this software is subject to Atmel's
                                  Software License Agreement.
      4    00000000              ----------------------------------------------
                                 ---------------------------------
      5    00000000                $URL: http://svnservulm.corp.atmel.com/svn/C
                                 DB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/
                                 Branches/P2_Gen2_Merge/firmware/globals/src/gl
                                 obals_asm.s90 $
      6    00000000                $LastChangedRevision: 328482 $
      7    00000000                $LastChangedDate: 2015-07-22 13:17:23 -0600
                                  (Wed, 22 Jul 2015) $
      8    00000000                $LastChangedBy: grueter $
      9    00000000              ----------------------------------------------
                                 ---------------------------------
     10    00000000                Project:      ATA5700
     11    00000000                Target MCU:   ATA5700
     12    00000000                Compiler:     IAR Assembler for AVR
                                  6.30.1
     13    00000000              ----------------------------------------------
                                 ---------------------------------
     14    00000000              
     15    00000000              **********************************************
                                 ********************************
     16    00000000              * Copyright 2011, Atmel Automotive GmbH       
                                                                 *
     17    00000000              *                                             
                                                                 *
     18    00000000              * This software is owned by the Atmel
                                  Automotive GmbH                        
                                  *
     19    00000000              * and is protected by and subject to worldwide
                                  patent protection.             *
     20    00000000              * Atmel hereby grants to licensee a personal, 
                                                                 *
     21    00000000              * non-exclusive, non-transferable license to
                                  copy, use, modify, create        *
     22    00000000              * derivative works of, and compile the Atmel
                                  Source Code and derivative       *
     23    00000000              * works for the sole purpose of creating
                                  custom software in support of       
                                  *
     24    00000000              * licensee product to be used only in
                                  conjunction with a Atmel integrated    
                                  *
     25    00000000              * circuit as specified in the applicable
                                  agreement. Any reproduction,        
                                  *
     26    00000000              * modification, translation, compilation, or
                                  representation of this           *
     27    00000000              * software except as specified above is
                                  prohibited without the express       
                                  *
     28    00000000              * written permission of Atmel.                
                                                                 *
     29    00000000              *                                             
                                                                 *
     30    00000000              * Disclaimer: ATMEL MAKES NO WARRANTY OF ANY
                                  KIND,EXPRESS OR IMPLIED,         *
     31    00000000              * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT
                                  NOT LIMITED TO, THE IMPLIED    *
     32    00000000              * WARRANTIES OF MERCHANTABILITY AND FITNESS
                                  FOR A PARTICULAR PURPOSE.         *
     33    00000000              * Atmel reserves the right to make changes
                                  without further notice to the      *
     34    00000000              * materials described herein. Atmel does not
                                  assume any liability arising     *
     35    00000000              * out of the application or use of any product
                                  or circuit described herein.   *
     36    00000000              * Atmel does not authorize its products for
                                  use as critical components in     *
     37    00000000              * life-support systems where a malfunction or
                                  failure may reasonably be       *
     38    00000000              * expected to result in significant injury to
                                  the user. The inclusion of      *
     39    00000000              * Atmel products in a life-support systems
                                  application implies that the       *
     40    00000000              * manufacturer assumes all risk of such use
                                  and in doing so indemnifies       *
     41    00000000              * Atmel against all charges.                  
                                                                 *
     42    00000000              *                                             
                                                                 *
     43    00000000              * Use may be limited by and subject to the
                                  applicable Atmel software          *
     44    00000000              * license agreement.                          
                                                                 *
     45    00000000              **********************************************
                                 *********************************/
     46    00000000              /* \file globals_asm.s90
     47    00000000              */
     48    00000000              //lint -restore
     49    00000000              
     50    00000000                  NAME globals_asm
     51    00000000              
     52    00000000                  PUBLIC ATA_globalsWaitNus_ASM
     53    00000000                  PUBLIC ATA_globalsMulS8U8_ASM
     54    00000000                  PUBLIC ATA_globalsMulU16U16_ASM
     55    00000000              
     56    00000000              /* ===========================================
                                 ================================*/
     57    00000000              /*   INCLUDES                                 
                                                                 */
     58    00000000              /* ===========================================
                                 ================================*/
     59    00000000              #include "regs.inc"
     60    00000000              
     61    00000000              /* ===========================================
                                 ================================*/
     62    00000000              /*   DEFINES                                  
                                                                 */
     63    00000000              /* ===========================================
                                 ================================*/
     64    00000000              /* ===========================================
                                 ================================*/
     65    00000000              /*   Modul Globals                            
                                                                 */
     66    00000000              /* ===========================================
                                 ================================*/
     67    00000000              /* ===========================================
                                 ================================*/
     68    00000000              /*   IMPLEMENTATION                           
                                                                 */
     69    00000000              /* ===========================================
                                 ================================*/
     70    00000000              
     71    00000000              /* -------------------------------------------
                                 --------------------------------*/
     72    00000000              /** \brief <b>ATA_globalsMulS8U8_ASM</b>
     73    00000000                  multiplies an signed 8 bit val with an
                                  unsigned 8 bit value.
     74    00000000              
     75    00000000              \param[in]  Factor1 is stored in R16
     76    00000000              \param[in]  Factor2 is stored in R17
     77    00000000              
     78    00000000              \return     Result is stored in R17:R16
     79    00000000              
     80    00000000              \StackUsageInBytes{XXX}
     81    00000000              
     82    00000000              \image html ATA_globalsMulS8U8_ASM.png
     83    00000000              
     84    00000000              \internal
     85    00000000              \Derived{Yes}
     86    00000000              
     87    00000000              \Rationale{This function provides basic
                                  multiplication functionality by using
                                  a
     88    00000000                         specific AVR instruction for better
                                  performance}
     89    00000000              
     90    00000000              \Traceability   N/A
     91    00000000              \endinternal
     92    00000000              \n
     93    00000000              */
     94    00000000              /* -------------------------------------------
                                 --------------------------------*/
     95    00000000              RSEG CODE:CODE:ROOT(1)
     96    00000000              ATA_globalsMulS8U8_ASM:
     97    00000000 920F             PUSH    R0
     98    00000002 921F             PUSH    R1
     99    00000004 0301             MULSU   R16 , R17    ; Multiply factor1
                                                           with factor2
    100    00000006 2D00             MOV     R16 , R0
    101    00000008 2D11             MOV     R17 , R1
    102    0000000A 901F             POP     R1
    103    0000000C 900F             POP     R0
    104    0000000E 9508             RET
    105    00000010              
    106    00000010              /* -------------------------------------------
                                 --------------------------------*/
    107    00000010              /** \brief <b>ATA_globalsWaitNus_ASM</b>
    108    00000010                  waits "bWaitNus" us. Parameter "bWaitNus"
                                  is passed via R16.\n\n
    109    00000010                  Note:
    110    00000010                  This function is based on a cycle count of
                                  the used AVR instructions and
    111    00000010                  the FRC as system clock.
    112    00000010                  This function must not be used with any
                                  other system clock source different
    113    00000010                  from FRC, since the given number of
                                  microseconds to wait will not
    114    00000010                  correspond to the real microseconds
                                  elapsed.
    115    00000010              
    116    00000010              \param[in]  bWaitNus is number of us (FRC
                                  based) to wait stored in R16
    117    00000010              
    118    00000010              \return     N/A
    119    00000010              
    120    00000010              \StackUsageInBytes{XXX}
    121    00000010              
    122    00000010              \image html ATA_globalsWaitNus_ASM.png
    123    00000010              
    124    00000010              \internal
    125    00000010              \Derived{Yes}
    126    00000010              
    127    00000010              \Rationale{This function provides basic
                                  utility functionality}
    128    00000010              
    129    00000010              \Traceability   N/A
    130    00000010              \endinternal
    131    00000010              \n
    132    00000010              */
    133    00000010              /* -------------------------------------------
                                 --------------------------------*/
    134    00000000              RSEG CODE:CODE:ROOT(1)
    135    00000000              ATA_globalsWaitNus_ASM:
    136    00000000              WAITNUS_START:
    137    00000000 3000             CPI     R16 , 0x00          ; check for
                                                                  0x00 in
                                                                  R16
    138    00000002 F011             BREQ    END_WAITNUS         ; loop
                                                                  end
    139    00000004 950A             DEC     R16                 ; decrement
                                                                  R16
    140    00000006 CFFC             RJMP    WAITNUS_START
    141    00000008              END_WAITNUS:
    142    00000008 9508             RET
    143    0000000A              
    144    0000000A              /* -------------------------------------------
                                 --------------------------------*/
    145    0000000A              /** \brief <b>ATA_globalsMpy16u_ASM</b>
    146    0000000A                  This subroutine multiplies the two 16 bit
                                  register variables r19:r18
    147    0000000A                  and r17:r16. The result is placed in
                                  r19:r18:r17:r16.
    148    0000000A                  
    149    0000000A                  \param factor1 is stored in R17:R16
    150    0000000A                  \param factor2 is stored in R19:R18
    151    0000000A                  
    152    0000000A                  \return product is stored in R19:R18:R17:R
                                 16
    153    0000000A              */
    154    0000000A              /* -------------------------------------------
                                 --------------------------------*/
    155    00000000              RSEG CODE:CODE:ROOT(1)
    156    00000000              ATA_globalsMulU16U16_ASM:
    157    00000000 ........         CALL    ATA_globalsMpy16u_ASM
    158    00000004 2F02             MOV     R16 , R18
    159    00000006 2F13             MOV     R17 , R19
    160    00000008 2F24             MOV     R18 , R20
    161    0000000A 2F35             MOV     R19 , R21
    162    0000000C              
    163    0000000C 9508             RET
    164    0000000E              
    165    0000000E              /* startDoxyExclude */    
    166    0000000E              /* -------------------------------------------
                                 --------------------------------*/
    167    0000000E              /** \brief <b>ATA_globalsMpy16u_ASM</b>
    168    0000000E                  This subroutine multiplies the two 16 bit
                                  register variables r19:r18
    169    0000000E                  and r17:r16. The result is placed in
                                  r21:r20:r19:r18.
    170    0000000E                  Number of words  :14 + return
    171    0000000E                  Number of cycles :153 + return
    172    0000000E                  Low registers used   :None
    173    0000000E                  High registers used  :7 (r18,r19,r16/r18,r
                                 17/r19,r20,r21,r22)
    174    0000000E                  .def    mc16uL  =r16        ;multiplicand
                                  low byte
    175    0000000E                  .def    mc16uH  =r17        ;multiplicand
                                  high byte
    176    0000000E                  .def    mp16uL  =r18        ;multiplier
                                  low byte
    177    0000000E                  .def    mp16uH  =r19        ;multiplier
                                  high byte
    178    0000000E                  .def    m16u0   =r18        ;result byte 0
                                  (LSB)
    179    0000000E                  .def    m16u1   =r19        ;result byte
                                  1
    180    0000000E                  .def    m16u2   =r20        ;result byte
                                  2
    181    0000000E                  .def    m16u3   =r21        ;result byte 3
                                  (MSB)
    182    0000000E                  .def    mcnt16u =r22        ;loop
                                  counter
    183    0000000E                 
    184    0000000E                  \param factor1 is stored in R17:R16
    185    0000000E                  \param factor2 is stored in R19:R18
    186    0000000E               
    187    0000000E                  \return product is stored in R21:R20:R19:R
                                 18
    188    0000000E              */
    189    0000000E              /* -------------------------------------------
                                 --------------------------------*/
    190    00000000              RSEG CODE:CODE:ROOT(1)
    191    00000000              ATA_globalsMpy16u_ASM:
    192    00000000 936F             PUSH    R22                               
                              
    193    00000002 2755             CLR     R21          ; clear 2 highest
                                                           bytes of result     
                                                                       
                                                           
    194    00000004 2744             CLR     R20                               
                              
    195    00000006 E160             LDI     R22 , 16     ; init loop counter  
                                                                               
                                                                    
    196    00000008 9536             LSR     R19                               
                              
    197    0000000A 9527             ROR     R18                               
                              
    198    0000000C              M16U_1:                                       
                                                       
    199    0000000C F410             BRCC    NOAD8        ; if bit 0 of
                                                           multiplier set      
                                                                           
                                                           
    200    0000000E 0F40             ADD     R20 , R16    ; add multiplicand
                                                           Low to byte 2 of res
                                                                      
                                                           
    201    00000010 1F51             ADC     R21 , R17    ; add multiplicand
                                                           high to byte 3 of
                                                           res           
                                                           
    202    00000012              NOAD8:                                        
                                                       
    203    00000012 9557             ROR     R21          ; shift right result
                                                           byte 3              
                                                                     
    204    00000014 9547             ROR     R20          ; rotate right result
                                                           byte 2              
                                                                    
    205    00000016 9537             ROR     R19          ; rotate result byte
                                                           1 and multiplier
                                                           High         
                                                           
    206    00000018 9527             ROR     R18          ; rotate result byte
                                                           0 and multiplier Low
                                                                     
    207    0000001A 956A             DEC     R22          ; decrement loop
                                                           counter             
                                                                        
                                                           
    208    0000001C F7B9             BRNE    M16U_1       ; if not done, loop
                                                           more                
                                                                     
                                                           
    209    0000001E 916F             POP     R22                               
                              
    210    00000020 9508             RET
    211    00000022              /* stopDoxyExclude */
    212    00000022              
    213    00000022                  END
##############################
#          CRC:D3CD          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 74          #
##############################



