///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.70.1.929 for Atmel AVR           05/Apr/2016  13:30:44
// Copyright 1996-2015 IAR Systems AB.
// Network license: DVRIAR01.corpp.atmel.com (STD)
//
//    Source file  =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\timer4\src\timer4.c
//    Command line =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\timer4\src\timer4.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj
//        -lC
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
//        -lA
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
//        --initializers_in_flash --no_cse --no_inline --no_code_motion
//        --no_cross_call --no_clustering --no_tbaa --debug --64k_flash
//        -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 6.0\avr\inc\" --eeprom_size 1152 --clib
//        -Ohz
//    List file    =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List\timer4.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME timer4

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBLIC ATA_timer4Close_C
        PUBLIC ATA_timer4Init_C
        PUBLIC ATA_timer4Open_C
        PUBWEAK _A_PRR1
        PUBWEAK _A_T4CORH
        PUBWEAK _A_T4CORL
        PUBWEAK _A_T4CR
        PUBWEAK _A_T4IFR
        PUBWEAK _A_T4IMR
        PUBWEAK _A_T4MRA
        PUBWEAK _A_T4MRB
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC g_sTimer4
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
// C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\timer4\src\timer4.c
//    1 //lint -e9059
//    2 /* *C**************************************************************************
//    3   Use of this software is subject to Atmel's Software License Agreement.
//    4 -------------------------------------------------------------------------------
//    5   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2_Gen2_Merge/firmware/timer4/src/timer4.c $
//    6   $LastChangedRevision: 328482 $
//    7   $LastChangedDate: 2015-07-22 13:17:23 -0600 (Wed, 22 Jul 2015) $
//    8   $LastChangedBy: grueter $
//    9 -------------------------------------------------------------------------------
//   10   Project:      ATA5700
//   11   Target MCU:   ATA5700
//   12   Compiler:     IAR C/C++ Compiler for AVR 6.30.1
//   13 -------------------------------------------------------------------------------
//   14   
//   15 ******************************************************************************
//   16 * Copyright 2011, Atmel Automotive GmbH                                       *
//   17 *                                                                             *
//   18 * This software is owned by the Atmel Automotive GmbH                         *
//   19 * and is protected by and subject to worldwide patent protection.             *
//   20 * Atmel hereby grants to licensee a personal,                                 *
//   21 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   22 * derivative works of, and compile the Atmel Source Code and derivative       *
//   23 * works for the sole purpose of creating custom software in support of        *
//   24 * licensee product to be used only in conjunction with a Atmel integrated     *
//   25 * circuit as specified in the applicable agreement. Any reproduction,         *
//   26 * modification, translation, compilation, or representation of this           *
//   27 * software except as specified above is prohibited without the express        *
//   28 * written permission of Atmel.                                                *
//   29 *                                                                             *
//   30 * Disclaimer: ATMEL MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,         *
//   31 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   32 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   33 * Atmel reserves the right to make changes without further notice to the      *
//   34 * materials described herein. Atmel does not assume any liability arising     *
//   35 * out of the application or use of any product or circuit described herein.   *
//   36 * Atmel does not authorize its products for use as critical components in     *
//   37 * life-support systems where a malfunction or failure may reasonably be       *
//   38 * expected to result in significant injury to the user. The inclusion of      *
//   39 * Atmel products in a life-support systems application implies that the       *
//   40 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   41 * Atmel against all charges.                                                  *
//   42 *                                                                             *
//   43 * Use may be limited by and subject to the applicable Atmel software          *
//   44 * license agreement.                                                          *
//   45 ******************************************************************************/
//   46 /** \file timer4.c
//   47 */
//   48 //lint -restore
//   49 
//   50 /*---------------------------------------------------------------------------*/
//   51 /*  INCLUDES                                                                 */
//   52 /*---------------------------------------------------------------------------*/
//   53 #include "timer4.h"

        ASEGN ABSOLUTE:DATA:NOROOT,021H
// union <unnamed> volatile __io _A_PRR1
_A_PRR1:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,034H
// union <unnamed> volatile __io _A_T4CR
_A_T4CR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,082H
// union <unnamed> volatile __io _A_T4CORL
_A_T4CORL:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,083H
// union <unnamed> volatile __io _A_T4CORH
_A_T4CORH:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,086H
// union <unnamed> volatile __io _A_T4MRA
_A_T4MRA:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,087H
// union <unnamed> volatile __io _A_T4MRB
_A_T4MRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,088H
// union <unnamed> volatile __io _A_T4IMR
_A_T4IMR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,01d2H
// union <unnamed> volatile __ext_io _A_T4IFR
_A_T4IFR:
        DS8 1
//   54 
//   55 /*---------------------------------------------------------------------------*/
//   56 /*  DEFINES                                                                  */
//   57 /*---------------------------------------------------------------------------*/
//   58 /*---------------------------------------------------------------------------*/
//   59 /*  Modul Globals                                                            */
//   60 /*---------------------------------------------------------------------------*/
//   61 /** \brief <b>g_sTimer4</b>
//   62     contains the configuration settings for Timer4.
//   63 */
//   64 #pragma location = ".tmr4ram"

        RSEG `.tmr4ram`:DATA:NOROOT(0)
//   65 __no_init sTmr4Config g_sTimer4;
g_sTimer4:
        DS8 7
//   66 
//   67 /*---------------------------------------------------------------------------*/
//   68 /*  IMPLEMENTATION                                                           */
//   69 /*---------------------------------------------------------------------------*/
//   70 /*---------------------------------------------------------------------------*/
//   71 /** \brief <b>ATA_timer4Init_C</b>
//   72     shall initialize Timer4 data structure sTmr4Config.
//   73 
//   74     Variable Usage:
//   75     \li [out] ::g_sTimer4  Global Timer 4 component data
//   76 
//   77     \image html ATA_timer4Init_C.png
//   78 
//   79     \internal
//   80         \li 010:   Set all ::g_sTimer4 attributes to 0.
//   81 
//   82         \Derived{Yes}
//   83 
//   84         \Rationale{Since the hardware SRAM initialization is turned off, all SRAM
//   85                    variables need initialization prior to its usage}
//   86 
//   87         \Traceability   N/A
//   88     \endinternal
//   89 \n
//   90 */
//   91 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
//   92 VOIDFUNC ATA_timer4Init_C(void)
ATA_timer4Init_C:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_timer4Init_C
          CFI NoCalls
//   93 {
//   94     g_sTimer4.bStatus  = 0x00U;
        LDI     R16, 0
        STS     g_sTimer4, R16
//   95     g_sTimer4.fpCompIsr = (timerIRQHandler)0x0000U;
        STS     (g_sTimer4 + 1), R16
        STS     (g_sTimer4 + 2), R16
//   96     g_sTimer4.fpOvfIsr  = (timerIRQHandler)0x0000U;
        STS     (g_sTimer4 + 3), R16
        STS     (g_sTimer4 + 4), R16
//   97     g_sTimer4.fpCapIsr  = (timerIRQHandler)0x0000U;
        STS     (g_sTimer4 + 5), R16
        STS     (g_sTimer4 + 6), R16
//   98 }
        RET
          CFI EndBlock cfiBlock0
//   99 
//  100 /*---------------------------------------------------------------------------*/
//  101 /** \brief <b>ATA_timer4Open_C</b>
//  102     shall open and initialize Timer 4, in case it is not yet locked.
//  103 
//  104     \param[in]      pTimer4Params    Asynchronous timer configuration settings
//  105     \return OK on success, FAIL on failure
//  106     
//  107     Variable Usage:
//  108     \li [in,out] ::g_sTimer4 Global Timer 4 component data
//  109     
//  110     \image html ATA_timer4Open_C.png
//  111 
//  112     \internal
//  113              Note:
//  114              Power up of Timer 4 via register PRR1 needs to occur before any 
//  115              Timer 4 register is accessed in order for the intended action to 
//  116              take effect.
//  117 
//  118              IF Timer 4 is not locked, i.e. not already used by another component,
//  119              THEN
//  120     \li 010:   Lock Timer 4 by setting the lock status in global variable 
//  121                ::g_sTimer4 in order to synchronize the usage of Timer 4.
//  122 
//  123     \li 020:   Power up Timer 4 by setting bit PRT4 in register PRR1 to 0 to 
//  124                disable the power reduction feature for Timer 4.
//  125 
//  126     \li 030:   Disable and reset Timer 4 by writing a 1 to the bit T4RES in
//  127                register T4CR and a 0 to bit T4ENA.
//  128 
//  129     \li 040:   Store the given function pointer parameters "ovf", "comp" and "cap"
//  130                of parameter "pTimer4Params"
//  131                to the global variable ::g_sTimer4 in order for those functions 
//  132                to be called when the corresponding interrupt, overflow and compare 
//  133                and capture, is triggered.
//  134 
//  135     \li 050:   Clear Timer 4 interrupt flags T4COF, T4OFF and T4ICF in register
//  136                T4IFR.
//  137 
//  138     \li 060:   Set Timer 4 registers T4CORH, T4CORL, T4MRA, T4MRB T4IMR and T4CR 
//  139                to the given attributes of parameter "pTimer4Params".
//  140 
//  141              ENDIF
//  142 
//  143     \li 070: Return OK to the calling function if Timer 4 was successfully 
//  144              configured.
//  145              Return FAIL if Timer 4 was already locked and therefore could 
//  146              not be configured.
//  147 
//  148     \Derived{No}
//  149 
//  150     \Rationale{N/A}
//  151 
//  152     \Traceability{Primus2P-887,Primus2P-1328}
//  153     \endinternal
//  154 \n
//  155 */
//  156 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
//  157 UINT8FUNC ATA_timer4Open_C(const sTimerAsyn16BitParams * const pTimer4Params)
ATA_timer4Open_C:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ATA_timer4Open_C
          CFI NoCalls
//  158 {
//  159     uint8_t fRetVal = FAIL;
        LDI     R18, 1
//  160     
//  161     if( !(g_sTimer4.bStatus & TMR4LOCK) )
        LDI     R30, LOW(g_sTimer4)
        LDI     R31, (g_sTimer4) >> 8
        LD      R19, Z
        SBRC    R19, 7
        RJMP    ??ATA_timer4Open_C_0
//  162     {
//  163         /* LLR-Ref: 010 */
//  164         g_sTimer4.bStatus |= TMR4LOCK;
        ORI     R19, 0x80
        ST      Z, R19
//  165       
//  166         /* LLR-Ref: 020 */
//  167         ATA_POWERON_C(PRR1, PRT4)
        CBI     0x01, 0x03
//  168         
//  169         /* LLR-Ref: 030 */
//  170         T4CR &= ~BM_T4ENA;
        CBI     0x14, 0x07
//  171         T4CR = BM_T3RES;
        LDI     R18, 32
        OUT     0x14, R18
//  172 
//  173         /* LLR-Ref: 040 */
//  174         g_sTimer4.fpCompIsr = pTimer4Params->compIsr;
        MOVW    R31:R30, R17:R16
        LDD     R18, Z+8
        LDD     R19, Z+9
        STS     (g_sTimer4 + 1), R18
        STS     (g_sTimer4 + 2), R19
//  175         g_sTimer4.fpOvfIsr = pTimer4Params->ovfIsr;
        LDD     R18, Z+6
        LDD     R19, Z+7
        STS     (g_sTimer4 + 3), R18
        STS     (g_sTimer4 + 4), R19
//  176         g_sTimer4.fpCapIsr = pTimer4Params->capIsr;
        LDD     R18, Z+10
        LDD     R19, Z+11
        STS     (g_sTimer4 + 5), R18
        STS     (g_sTimer4 + 6), R19
//  177         
//  178         /* LLR-Ref: 050 */
//  179         T4IFR |= ((uint8_t)(BM_T4ICF|BM_T4COF|BM_T4OFF));
        LDS     R18, _A_T4IFR
        ORI     R18, 0x07
        STS     _A_T4IFR, R18
//  180         
//  181         /* LLR-Ref: 060 */
//  182         T4MRA  = pTimer4Params->modeA;
        LDD     R18, Z+1
        STS     _A_T4MRA, R18
//  183         T4MRB  = pTimer4Params->modeB;
        LDD     R18, Z+2
        STS     _A_T4MRB, R18
//  184         T4CORL = pTimer4Params->compL;
        LDD     R18, Z+3
        STS     _A_T4CORL, R18
//  185         T4CORH = pTimer4Params->compH;
        LDD     R18, Z+4
        STS     _A_T4CORH, R18
//  186         T4IMR  = pTimer4Params->irqMask;
        LDD     R18, Z+5
        STS     _A_T4IMR, R18
//  187         T4CR   = pTimer4Params->ctrl;
        LD      R16, Z
        OUT     0x14, R16
//  188         
//  189         fRetVal = OK;
        LDI     R18, 0
//  190     }
//  191     
//  192     /* LLR-Ref: 070 */
//  193     return fRetVal;
??ATA_timer4Open_C_0:
        MOV     R16, R18
        RET
          CFI EndBlock cfiBlock1
        REQUIRE _A_PRR1
        REQUIRE _A_T4CR
        REQUIRE _A_T4IFR
        REQUIRE _A_T4MRA
        REQUIRE _A_T4MRB
        REQUIRE _A_T4CORL
        REQUIRE _A_T4CORH
        REQUIRE _A_T4IMR
//  194 }
//  195 
//  196 
//  197 /* ---------------------------------------------------------------------------*/
//  198 /** \brief <b>ATA_timer4Close_C</b>
//  199     shall stop Timer 4 and enable the power reduction feature of Timer 4.
//  200 
//  201     Variable Usage:
//  202     \li [out] ::g_sTimer4  Global Timer 4 component data
//  203 
//  204     \image html ATA_timer4Close_C.png
//  205 
//  206     \internal
//  207              Note:
//  208              Disabling of the Power Reduction feature of Timer 4 via register PRR1
//  209              needs to occur before any Timer 4 register is accessed in order for the
//  210              intended actions to take effect.
//  211              Enabling of the Power Reduction feature of Timer 4 via register PRR1 
//  212              needs to occur after any Timer 4 register is accessed in order for the 
//  213              intended action to take effect.
//  214 
//  215     \li 005: Disable the power reduction feature of Timer 4 by setting bit PRT4 in 
//  216              register PRR1 to 0.
//  217 
//  218     \li 010: Disable Timer 4 by setting all bits of register T4CR to 0,
//  219              except bit T4RES which is set to 1 to reset the prescaler and counter
//  220              value.
//  221 
//  222     \li 020: Unlock Timer 4 by setting the status indication of the global variable
//  223              ::g_sTimer4 to 0.
//  224 
//  225     \li 030: Enable the power reduction feature of Timer 4 by setting bit PRT4 in 
//  226              register PRR1 to 1.
//  227 
//  228     \Derived{No}
//  229 
//  230     \Rationale{N/A}
//  231 
//  232     \Traceability{Primus2P-888}
//  233     \endinternal
//  234 \n
//  235 */
//  236 /* ---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
//  237 VOIDFUNC ATA_timer4Close_C(void)
ATA_timer4Close_C:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ATA_timer4Close_C
          CFI NoCalls
//  238 {
//  239     /* LLR-Ref: 005 */
//  240     ATA_POWERON_C(PRR1, PRT4)
        CBI     0x01, 0x03
//  241   
//  242     /* LLR-Ref: 010 */
//  243     T4CR = BM_T4RES;
        LDI     R16, 32
        OUT     0x14, R16
//  244     
//  245     /* LLR-Ref: 020 */
//  246     g_sTimer4.bStatus = 0x00;
        LDI     R16, 0
        STS     g_sTimer4, R16
//  247   
//  248     /* LLR-Ref: 030 */
//  249     ATA_POWEROFF_C(PRR1, PRT4);
        SBI     0x01, 0x03
//  250 }
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_PRR1
        REQUIRE _A_T4CR

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//  251 
// 
//   7 bytes in segment .tmr4ram
//   8 bytes in segment ABSOLUTE
// 160 bytes in segment CODE
// 
// 160 bytes of CODE memory
//   7 bytes of DATA memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
