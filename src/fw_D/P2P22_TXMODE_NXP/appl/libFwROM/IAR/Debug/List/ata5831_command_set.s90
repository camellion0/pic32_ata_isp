///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V6.70.1.929 for Atmel AVR           05/Apr/2016  13:30:40
// Copyright 1996-2015 IAR Systems AB.
// Network license: DVRIAR01.corpp.atmel.com (STD)
//
//    Source file  =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\spi\src\ata5831_command_set.c
//    Command line =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\spi\src\ata5831_command_set.c
//        -v3 --enhanced_core -ms -o
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\Obj
//        -lC
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
//        -lA
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List
//        --initializers_in_flash --no_cse --no_inline --no_code_motion
//        --no_cross_call --no_clustering --no_tbaa --debug --64k_flash
//        -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files (x86)\IAR
//        Systems\Embedded Workbench 6.0\avr\inc\" --eeprom_size 1152 --clib
//        -Ohz
//    List file    =  
//        C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\appl\libFwROM\IAR\Debug\List\ata5831_command_set.s90
//
///////////////////////////////////////////////////////////////////////////////

        NAME ata5831_command_set

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__cpu", "3"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B3_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B5_L09
        EXTERN ?PROLOGUE3_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE5_L09
        EXTERN ?Register_R4_is_cg_reg

        PUBLIC ATA_5831CalibrateAndCheck_C
        PUBLIC ATA_5831Close_C
        PUBLIC ATA_5831CustomerConfigurableCommand_C
        PUBLIC ATA_5831GetEventBytes_C
        PUBLIC ATA_5831GetFlashVersion_C
        PUBLIC ATA_5831GetRomVersion_C
        PUBLIC ATA_5831GetRssiValue_C
        PUBLIC ATA_5831InitSramService_C
        PUBLIC ATA_5831Init_C
        PUBLIC ATA_5831OffCommand_C
        PUBLIC ATA_5831PatchSpi_C
        PUBLIC ATA_5831ReadEeprom_C
        PUBLIC ATA_5831ReadFillLevelRssiFifo_C
        PUBLIC ATA_5831ReadFillLevelRxFifo_C
        PUBLIC ATA_5831ReadFillLevelTxFifo_C
        PUBLIC ATA_5831ReadRssiFifo_C
        PUBLIC ATA_5831ReadRxFifo_C
        PUBLIC ATA_5831ReadSramRegister_C
        PUBLIC ATA_5831ReadTemperatureValue_C
        PUBLIC ATA_5831SetSystemMode_C
        PUBLIC ATA_5831SetVoltageMonitor_C
        PUBLIC ATA_5831StartRssiMeasurement_C
        PUBLIC ATA_5831Start_C
        PUBLIC ATA_5831SystemReset_C
        PUBLIC ATA_5831TriggerEepromSecureWrite_C
        PUBLIC ATA_5831WriteEeprom_C
        PUBLIC ATA_5831WriteSramRegister_C
        PUBLIC ATA_5831WriteTxFifo_C
        PUBLIC ATA_5831WriteTxPreambleFifo_C
        PUBWEAK _A_PORTD
        PUBWEAK _A_SFFR
        PUBWEAK _A_SFIR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TRCDR
        PUBWEAK _A_TRCIDH
        PUBWEAK _A_TRCIDL
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC g_sAta5831
        
          CFI Names cfiNames0
          CFI StackFrame CFA_Y Y DATA
          CFI StackFrame CFA_SP SP DATA
          CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
          CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
          CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
          CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
          CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
          CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
          CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
          CFI ResourceParts SP SPH, SPL
          CFI ResourceParts Y R29, R28
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Y+0
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 Undefined
          CFI R17 Undefined
          CFI R18 Undefined
          CFI R19 Undefined
          CFI R20 Undefined
          CFI R21 Undefined
          CFI R22 Undefined
          CFI R23 Undefined
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 Undefined
          CFI R31 Undefined
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign 1
          CFI ReturnAddress ?Ret CODE
          CFI CFA_Y Notused
          CFI CFA_SP SP+2
          CFI ?RetPad 0
          CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
          CFI ?RetLow Frame(CFA_SP, 0)
          CFI ?Ret Concat
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R13 SameValue
          CFI R14 SameValue
          CFI R15 SameValue
          CFI R16 SameValue
          CFI R17 SameValue
          CFI R18 SameValue
          CFI R19 SameValue
          CFI R20 SameValue
          CFI R21 SameValue
          CFI R22 SameValue
          CFI R23 SameValue
          CFI R24 SameValue
          CFI R25 SameValue
          CFI R26 SameValue
          CFI R27 SameValue
          CFI R28 Undefined
          CFI R29 Undefined
          CFI R30 SameValue
          CFI R31 SameValue
          CFI ?RetHighByteMask SameValue
          CFI SPH Undefined
          CFI SPL Undefined
          CFI Y SameValue
          CFI EndCommon cfiCommon1
        
        EXTERN ATA_5831CommandTimer1Isr_ASM
        EXTERN ATA_globalsWaitNus_ASM
        EXTERN ATA_spiClose_C
        EXTERN ATA_spiDeselect_C
        EXTERN ATA_spiOpen_C
        EXTERN ATA_spiSelect_C
        EXTERN ATA_timer1Open_C
        EXTERN g_sDebug
        EXTERN g_sSpiConfig

// C:\Users\grueter\Documents\CDB_\Apps\SW_Lib\Car_Access\CARS_GEN2\ATAB5702A\Branches\P2_Gen2_Merge\firmware\spi\src\ata5831_command_set.c
//    1 //lint -e9059
//    2 /* *C**************************************************************************
//    3   Use of this software is subject to Atmel's Software License Agreement.
//    4 -------------------------------------------------------------------------------
//    5   $URL: http://svnservulm.corp.atmel.com/svn/CDB/Apps/SW_Lib/Car_Access/CARS_GEN2/ATAB5702A/Branches/P2_Gen2_Merge/firmware/spi/src/ata5831_command_set.c $
//    6   $LastChangedRevision: 328482 $
//    7   $LastChangedDate: 2015-07-22 13:17:23 -0600 (Wed, 22 Jul 2015) $
//    8   $LastChangedBy: grueter $
//    9 -------------------------------------------------------------------------------
//   10   Project:      ATA5700
//   11   Target MCU:   ATA5700
//   12   Compiler:     IAR C/C++ Compiler for AVR 6.30.1
//   13 -------------------------------------------------------------------------------
//   14 
//   15 ******************************************************************************
//   16 * Copyright 2011, Atmel Automotive GmbH                                       *
//   17 *                                                                             *
//   18 * This software is owned by the Atmel Automotive GmbH                         *
//   19 * and is protected by and subject to worldwide patent protection.             *
//   20 * Atmel hereby grants to licensee a personal,                                 *
//   21 * non-exclusive, non-transferable license to copy, use, modify, create        *
//   22 * derivative works of, and compile the Atmel Source Code and derivative       *
//   23 * works for the sole purpose of creating custom software in support of        *
//   24 * licensee product to be used only in conjunction with a Atmel integrated     *
//   25 * circuit as specified in the applicable agreement. Any reproduction,         *
//   26 * modification, translation, compilation, or representation of this           *
//   27 * software except as specified above is prohibited without the express        *
//   28 * written permission of Atmel.                                                *
//   29 *                                                                             *
//   30 * Disclaimer: ATMEL MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,         *
//   31 * WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    *
//   32 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.         *
//   33 * Atmel reserves the right to make changes without further notice to the      *
//   34 * materials described herein. Atmel does not assume any liability arising     *
//   35 * out of the application or use of any product or circuit described herein.   *
//   36 * Atmel does not authorize its products for use as critical components in     *
//   37 * life-support systems where a malfunction or failure may reasonably be       *
//   38 * expected to result in significant injury to the user. The inclusion of      *
//   39 * Atmel products in a life-support systems application implies that the       *
//   40 * manufacturer assumes all risk of such use and in doing so indemnifies       *
//   41 * Atmel against all charges.                                                  *
//   42 *                                                                             *
//   43 * Use may be limited by and subject to the applicable Atmel software          *
//   44 * license agreement.                                                          *
//   45 ******************************************************************************/
//   46 /** \file ata5831_command_set.c
//   47 */
//   48 //lint -restore
//   49 
//   50 /*---------------------------------------------------------------------------*/
//   51 /*  INCLUDES                                                                 */
//   52 /*---------------------------------------------------------------------------*/
//   53 #include "ata5831_command_set.h"

        ASEGN ABSOLUTE:DATA:NOROOT,02bH
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04dH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0fcH
// union <unnamed> volatile __io _A_TRCIDL
_A_TRCIDL:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0fdH
// union <unnamed> volatile __io _A_TRCIDH
_A_TRCIDH:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0ffH
// union <unnamed> volatile __io _A_TRCDR
_A_TRCDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0157H
// union <unnamed> volatile __ext_io _A_SFFR
_A_SFFR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,0158H
// union <unnamed> volatile __ext_io _A_SFIR
_A_SFIR:
        DS8 1
//   54 #include "spi.h"
//   55 #include "../../timer1/src/timer1.h"
//   56 
//   57 /*---------------------------------------------------------------------------*/
//   58 /*  DEFINES                                                                  */
//   59 /*---------------------------------------------------------------------------*/
//   60 
//   61 /*---------------------------------------------------------------------------*/
//   62 /*  Modul Globals                                                            */
//   63 /*---------------------------------------------------------------------------*/
//   64 /** \brief <b>g_sAta5831</b>
//   65     contains the ATA5831 specific SPI settings.
//   66 */
//   67 #pragma location = ".ata5831"

        RSEG `.ata5831`:DATA:NOROOT(0)
//   68 __no_init sAta5831CommandSet g_sAta5831;
g_sAta5831:
        DS8 18
//   69 
//   70 /** \brief <b>m_bAta5831Buffer</b>
//   71     contains the ATA5831 specific SPI header information.
//   72 */
//   73 #pragma location = ".ata5831"

        RSEG `.ata5831`:DATA:NOROOT(0)
//   74 static __no_init uint8_t m_bAta5831Buffer[3];
m_bAta5831Buffer:
        DS8 3
//   75 
//   76 /*---------------------------------------------------------------------------*/
//   77 /*  IMPLEMENTATION                                                           */
//   78 /*---------------------------------------------------------------------------*/
//   79 
//   80 static UINT8FUNC ATA_5831SpiDataExchangeWithChecksum_C(uint8_t bData);
//   81 static VOIDFUNC ATA_5831DoCheckSumProcessing_C(void);
//   82 
//   83 /*---------------------------------------------------------------------------*/
//   84 /** \brief <b>ATA_5831GetRssiValue_C</b>
//   85     shall read the current Rssi average and peak values from the ATA5831 via
//   86     SPI interface.
//   87 
//   88     \param[out]     pData           ATA5831 response data
//   89 
//   90     Variable Usage:
//   91     \li [in] ::g_sSpiConfig Global SPI component data
//   92     \li [out] ::g_sAta5831 Global ATA5831 component data
//   93     \li [out] ::g_sDebug Global Debug component data
//   94 
//   95     \image html ATA_5831GetRssiValue_C.png
//   96 
//   97     \internal
//   98     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//   99                 continue
//  100              ELSE
//  101                 goto 090
//  102     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 .bConfig[0]
//  103                 goto 020
//  104              ELSE
//  105                 goto 040
//  106     \li 020: Configure data structure ::g_sAta5831
//  107     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and return
//  108 
//  109     \li 040: Start SPI command by setting NSS to low via function ::ATA_spiSelect_C
//  110     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  111     \li 060: Write ID and read data bytes via SPI using function ::ATA_5831SpiDataExchangeWithChecksum_C
//  112              read back the event bytes via SPI and store it in variable
//  113                 - ::g_sAta5831 .bEventsSystem
//  114                 - ::g_sAta5831 .bEventsEvent
//  115     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  116     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C and return
//  117     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable ::g_sDebug .bErrorCode
//  118 
//  119     \Derived{No}
//  120 
//  121     \Rationale{N/A}
//  122 
//  123     \Traceability{Primus2P-984,Primus2P-989}
//  124     \endinternal
//  125 \n
//  126 */
//  127 /*---------------------------------------------------------------------------*/
//  128 VOIDFUNC ATA_5831GetRssiValue_C(uint8_t *pData)
//  129 {
//  130     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831GetRssiValue_C, g_sAta5831.bConfig);
//  131     /* LLR-Ref: 005 */
//  132     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  133         /* LLR-Ref: 010 */
//  134         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {   /* with interupt usage */
//  135             /* LLR-Ref: 020 */
//  136             g_sAta5831.pDataPtr        = pData;
//  137             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  138             g_sAta5831.bId             = ATA5831_ID_GET_RSSI_VALUE;
//  139             g_sAta5831.bTelegramLength = 4U;
//  140             /* LLR-Ref: 030 */
//  141             ATA_5831Start_C();
//  142         }
//  143         else {                  /* spi checksum usage enabled */
//  144             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  145             /* LLR-Ref: 040 */
//  146             ATA_spiSelect_C();
//  147 
//  148             /* LLR-Ref: 050 */
//  149             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  150 
//  151             /* LLR-Ref: 060 */
//  152             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_GET_RSSI_VALUE | BIT_MASK_7);
//  153             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  154             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  155             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  156             ATA_5831DoCheckSumProcessing_C();
//  157 
//  158             /* LLR-Ref: 070 */
//  159             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  160 
//  161             /* LLR-Ref: 080 */
//  162             ATA_spiDeselect_C();
//  163         }
//  164     }
//  165     else {
//  166         /* LLR-Ref: 090 */
//  167         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  168         g_sDebug.bSsmErrorCode = 0x00U;
//  169     }
//  170 }
//  171 
//  172 
//  173 /*---------------------------------------------------------------------------*/
//  174 /** \brief <b>ATA_5831StartRssiMeasurement_C</b>
//  175     shall start a Rssi measurement on the ATA5831 via SPI interface.
//  176 
//  177     \param[in] bConfig Service/Channel configuration for RSSI Measurement
//  178 
//  179     Variable Usage:
//  180     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  181     \li [out] ::g_sAta5831 Global ATA5831 component data
//  182     \li [out] ::g_sDebug Global Debug component data
//  183     \li [in] ::g_sSpiConfig Global SPI component data 
//  184     
//  185     \image html ATA_5831StartRssiMeasurement_C.png
//  186 
//  187     \internal
//  188     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  189                 continue
//  190              ELSE
//  191                 goto 090
//  192     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 .bConfig[0]
//  193                 goto 020
//  194              ELSE
//  195                 goto 040
//  196     \li 020: Configure data structure ::g_sAta5831
//  197     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and return
//  198     \li 040: Start the SPI command by setting NSS to low via function ::ATA_spiSelect_C
//  199     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  200     \li 060: Write ID and read data bytes via SPI using function ::ATA_5831SpiDataExchangeWithChecksum_C
//  201              read back the event bytes via SPI and store it in variable
//  202                 - ::g_sAta5831 .bEventsSystem
//  203                 - ::g_sAta5831 .bEventsEvent
//  204     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  205     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C and return
//  206     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable ::g_sDebug .bErrorCode
//  207 
//  208     \Derived{No}
//  209 
//  210     \Rationale{N/A}
//  211 
//  212     \Traceability{Primus2P-983,Primus2P-989}
//  213     \endinternal
//  214 \n
//  215 */
//  216 /*---------------------------------------------------------------------------*/
//  217 VOIDFUNC ATA_5831StartRssiMeasurement_C(svcChConfig_t bConfig)
//  218 {
//  219     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831StartRssiMeasurement_C, g_sAta5831.bConfig);
//  220 
//  221     /* LLR-Ref: 005 */
//  222     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  223         /* LLR-Ref: 010 */
//  224         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  225             /* LLR-Ref: 020 */
//  226             m_bAta5831Buffer[0]        = bConfig;
//  227             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  228             /* set command.type to read for correct reading of events */
//  229             /* ---Primus2P-2917--- */
//  230             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
//  231                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  232             /* ---Primus2P-2917--- */
//  233             g_sAta5831.bId             = ATA5831_ID_START_RSSI_MEAS;
//  234             g_sAta5831.bTelegramLength = 2U;
//  235             /* LLR-Ref: 030 */
//  236             ATA_5831Start_C();
//  237         }
//  238         else {                  /* spi checksum usage enabled */
//  239             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  240             /* LLR-Ref: 040 */
//  241             ATA_spiSelect_C();
//  242 
//  243             /* LLR-Ref: 050 */
//  244             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  245 
//  246             /* LLR-Ref: 060 */
//  247             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_START_RSSI_MEAS | BIT_MASK_7);
//  248             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bConfig);
//  249             ATA_5831DoCheckSumProcessing_C();
//  250 
//  251             /* LLR-Ref: 070 */
//  252             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  253 
//  254             /* LLR-Ref: 080 */
//  255             ATA_spiDeselect_C();
//  256         }
//  257     }
//  258     else {
//  259         /* LLR-Ref: 090 */
//  260         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  261     }
//  262 
//  263 }
//  264 
//  265 /*---------------------------------------------------------------------------*/
//  266 /** \brief <b>ATA_5831InitSramService_C</b>
//  267     shall initialize a SRAM service with EEPROM content on ATA5831
//  268 
//  269     \param[in]      bSramSvc            SRAM service number
//  270     \param[in]      bEepromSvc          EEPROM service number
//  271 
//  272     Variable Usage:
//  273     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  274     \li [out] ::g_sAta5831 Global ATA5831 component data
//  275     \li [out] ::g_sDebug Global Debug component data
//  276     \li [in] ::g_sSpiConfig Global SPI component data
//  277 
//  278     \image html ATA_5831InitSramService_C.png
//  279 
//  280     \internal
//  281     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  282                 continue
//  283              ELSE
//  284                 goto 090
//  285     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 .bConfig[0]
//  286                 goto 020
//  287              ELSE
//  288                 goto 040
//  289     \li 020: Configure data structure ::g_sAta5831
//  290     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and return
//  291     \li 040: Start the SPI command by setting NSS to low via function ::ATA_spiSelect_C
//  292     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  293     \li 060: Write ID and read data bytes via SPI using function ::ATA_5831SpiDataExchangeWithChecksum_C
//  294              read back the event bytes via SPI and store it in variable
//  295                 - ::g_sAta5831 .bEventsSystem
//  296                 - ::g_sAta5831 .bEventsEvent
//  297     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  298     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C and return
//  299     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable ::g_sDebug .bErrorCode
//  300 
//  301     \Derived{No}
//  302 
//  303     \Rationale{N/A}
//  304 
//  305     \Traceability{Primus2P-982,Primus2P-989}
//  306     \endinternal
//  307 \n
//  308 */
//  309 /*---------------------------------------------------------------------------*/
//  310 VOIDFUNC ATA_5831InitSramService_C(uint8_t bSramSvc, uint8_t bEepromSvc)
//  311 {
//  312     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831InitSramService_C, g_sAta5831.bConfig);
//  313 
//  314     /* LLR-Ref: 005 */
//  315     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  316         /* LLR-Ref: 010 */
//  317         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  318             /* LLR-Ref: 020 */
//  319             m_bAta5831Buffer[0]        = bSramSvc;
//  320             m_bAta5831Buffer[1]        = bEepromSvc;
//  321             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  322             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
//  323                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  324             g_sAta5831.bId             = ATA5831_ID_INIT_SRAM_SERVICE;
//  325             g_sAta5831.bTelegramLength = 3U;
//  326 
//  327             /* LLR-Ref: 030 */
//  328             ATA_5831Start_C();
//  329         }
//  330         else {                  /* spi checksum usage enabled */
//  331             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  332             /* LLR-Ref: 040 */
//  333             ATA_spiSelect_C();
//  334 
//  335             /* LLR-Ref: 050 */
//  336             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  337 
//  338             /* LLR-Ref: 060 */
//  339             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_INIT_SRAM_SERVICE | BIT_MASK_7);
//  340             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bSramSvc);
//  341                                        ATA_5831SpiDataExchangeWithChecksum_C(bEepromSvc);
//  342             ATA_5831DoCheckSumProcessing_C();
//  343 
//  344             /* LLR-Ref: 070 */
//  345             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  346 
//  347             /* LLR-Ref: 080 */
//  348             ATA_spiDeselect_C();
//  349         }
//  350     }
//  351     else {
//  352         /* LLR-Ref: 090 */
//  353         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  354     }
//  355 }
//  356 
//  357 /*---------------------------------------------------------------------------*/
//  358 /** \brief <b>ATA_5831ReadTemperatureValue_C</b>
//  359     shall read the currently available temperature value on ATA5831
//  360 
//  361     \param[out]     pData           Temperature value reference
//  362     
//  363     Variable Usage:
//  364     \li [out] ::g_sAta5831 Global ATA5831 component data
//  365     \li [out] ::g_sDebug Global Debug component data
//  366     \li [in] ::g_sSpiConfig Global SPI component data
//  367 
//  368     \image html ATA_5831ReadTemperatureValue_C.png
//  369 
//  370     \internal
//  371     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  372                 continue
//  373              ELSE
//  374                 goto 090
//  375     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 .bConfig[0]
//  376                 goto 020
//  377              ELSE
//  378                 goto 040
//  379     \li 020: Configure data structure ::g_sAta5831
//  380     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and return
//  381     \li 040: Start the SPI command by setting NSS to low via function ::ATA_spiSelect_C
//  382     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  383     \li 060: Write ID and read data bytes via SPI using function ::ATA_5831SpiDataExchangeWithChecksum_C
//  384              read back the event bytes via SPI and store it in variable
//  385                 - ::g_sAta5831 .bEventsSystem
//  386                 - ::g_sAta5831 .bEventsEvent
//  387     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  388     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C and return
//  389     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable ::g_sDebug .bErrorCode
//  390 
//  391     \Derived{No}
//  392 
//  393     \Rationale{N/A}
//  394 
//  395     \Traceability{Primus2P-981,Primus2P-989}
//  396 
//  397     \endinternal
//  398 \n
//  399 */
//  400 /*---------------------------------------------------------------------------*/
//  401 VOIDFUNC ATA_5831ReadTemperatureValue_C(uint8_t *pData)
//  402 {
//  403     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadTemperatureValue_C, g_sAta5831.bConfig);
//  404 
//  405     /* LLR-Ref: 005 */
//  406     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  407         /* LLR-Ref: 010 */
//  408         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  409             /* LLR-Ref: 020 */
//  410             g_sAta5831.pDataPtr        = pData;
//  411             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  412             g_sAta5831.bId             = ATA5831_ID_READ_TEMPERATURE;
//  413             g_sAta5831.bTelegramLength = 4U;
//  414 
//  415             /* LLR-Ref: 030 */
//  416             ATA_5831Start_C();
//  417         }
//  418         else {                  /* spi checksum usage enabled */
//  419             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  420             /* LLR-Ref: 040 */
//  421             ATA_spiSelect_C();
//  422 
//  423             /* LLR-Ref: 050 */
//  424             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  425 
//  426             /* LLR-Ref: 060 */
//  427             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_TEMPERATURE | BIT_MASK_7);
//  428             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
//  429             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
//  430             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
//  431             ATA_5831DoCheckSumProcessing_C();
//  432 
//  433             /* LLR-Ref: 070 */
//  434             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  435 
//  436             /* LLR-Ref: 080 */
//  437             ATA_spiDeselect_C();
//  438         }
//  439     }
//  440     else {
//  441         /* LLR-Ref: 090 */
//  442         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  443     }
//  444 }
//  445 
//  446 /*---------------------------------------------------------------------------*/
//  447 /** \brief <b>ATA_5831OffCommand_C</b>
//  448     shall switch the ATA5831 in OFF mode via SPI interface
//  449 
//  450     Variable Usage:
//  451     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  452     \li [out] ::g_sAta5831 Global ATA5831 component data
//  453     \li [out] ::g_sDebug Global Debug component data
//  454     \li [in] ::g_sSpiConfig Global SPI component data
//  455 
//  456     \image html ATA_5831OffCommand_C.png
//  457 
//  458     \internal
//  459     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  460                 continue
//  461              ELSE
//  462                 goto 090
//  463     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 .bConfig[0]
//  464                 goto 020
//  465              ELSE
//  466                 goto 040
//  467     \li 020: Configure data structure ::g_sAta5831
//  468     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and return
//  469     \li 040: Start the SPI command by setting NSS to low via function ::ATA_spiSelect_C
//  470     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  471     \li 060: Write ID and read data bytes via SPI using function ::ATA_5831SpiDataExchangeWithChecksum_C
//  472              read back the event bytes via SPI and store it in variable
//  473                 - ::g_sAta5831 .bEventsSystem
//  474                 - ::g_sAta5831 .bEventsEvent
//  475     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  476     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C and return
//  477     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable ::g_sDebug .bErrorCode
//  478 
//  479     \Derived{No}
//  480 
//  481     \Rationale{N/A}
//  482 
//  483     \Traceability{Primus2P-980,Primus2P-989}
//  484     \endinternal
//  485 \n
//  486 */
//  487 /*---------------------------------------------------------------------------*/
//  488 VOIDFUNC ATA_5831OffCommand_C(void)
//  489 {
//  490     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831OffCommand_C, g_sAta5831.bConfig);
//  491     /* LLR-Ref: 005 */
//  492     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  493         /* LLR-Ref: 010 */
//  494         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  495             /* LLR-Ref: 020 */
//  496             m_bAta5831Buffer[0]        = 0x00U;
//  497             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  498             /* set command.type to read for correct reading of events */
//  499             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  500             g_sAta5831.bId             = ATA5831_ID_OFF_COMMAND;
//  501             g_sAta5831.bTelegramLength = 2U;
//  502 
//  503             /* LLR-Ref: 030 */
//  504             ATA_5831Start_C();
//  505         }
//  506         else {                  /* spi checksum usage enabled */
//  507             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  508             /* LLR-Ref: 040 */
//  509             ATA_spiSelect_C();
//  510 
//  511             /* LLR-Ref: 050 */
//  512             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  513 
//  514             /* LLR-Ref: 060 */
//  515             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_OFF_COMMAND | BIT_MASK_7);
//  516             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  517             ATA_5831DoCheckSumProcessing_C();
//  518 
//  519             /* LLR-Ref: 070 */
//  520             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  521 
//  522             /* LLR-Ref: 080 */
//  523             ATA_spiDeselect_C();
//  524         }
//  525     }
//  526     else {
//  527         /* LLR-Ref: 090 */
//  528         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  529     }
//  530 }
//  531 
//  532 /*---------------------------------------------------------------------------*/
//  533 /** \brief <b>ATA_5831SetVoltageMonitor_C</b>
//  534     shall configure the voltage monitor of ATA5831 via SPI interface
//  535 
//  536     \param[in]      bValue              Voltage Monitor configuration
//  537 
//  538     Variable Usage:
//  539     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  540     \li [out] ::g_sAta5831 Global ATA5831 component data
//  541     \li [out] ::g_sDebug Global Debug component data
//  542     \li [in] ::g_sSpiConfig Global SPI component data
//  543 
//  544     \image html ATA_5831SetVoltageMonitor_C.png
//  545 
//  546     \internal
//  547     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  548                 continue
//  549              ELSE
//  550                 goto 090
//  551     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
//  552                 .bConfig[0] goto 020
//  553              ELSE
//  554                 goto 040
//  555     \li 020: Configure data structure ::g_sAta5831
//  556     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
//  557              return
//  558     \li 040: Start the SPI command by setting NSS to low via function
//  559              ::ATA_spiSelect_C
//  560     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  561     \li 060: Write ID and read data bytes via SPI using function 
//  562              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
//  563              SPI and store it in variable
//  564                 - ::g_sAta5831 .bEventsSystem
//  565                 - ::g_sAta5831 .bEventsEvent
//  566     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  567     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
//  568              and return
//  569     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
//  570              ::g_sDebug .bErrorCode
//  571 
//  572     \Derived{No}
//  573 
//  574     \Rationale{N/A}
//  575 
//  576     \Traceability{Primus2P-979,Primus2P-989}
//  577     \endinternal
//  578 \n
//  579 */
//  580 /*---------------------------------------------------------------------------*/
//  581 VOIDFUNC ATA_5831SetVoltageMonitor_C(uint8_t bValue)
//  582 {
//  583     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831SetVoltageMonitor_C, g_sAta5831.bConfig);
//  584 
//  585     /* LLR-Ref: 005 */
//  586     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  587         /* LLR-Ref: 010 */
//  588         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  589             /* LLR-Ref: 020 */
//  590             m_bAta5831Buffer[0]        = bValue;
//  591             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  592             /* set patch spi command.type to read for correct reading of events */
//  593             /* ---Primus2P-2916--- */
//  594             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
//  595                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  596             g_sAta5831.bId             = ATA5831_ID_SET_VOLTAGE_MONITOR;
//  597             /* ---Primus2P-2916--- */
//  598             g_sAta5831.bTelegramLength = 2U;
//  599 
//  600             /* LLR-Ref: 030 */
//  601             ATA_5831Start_C();
//  602         } else {                /* spi checksum usage enabled */
//  603             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  604             /* LLR-Ref: 040 */
//  605             ATA_spiSelect_C();
//  606 
//  607             /* LLR-Ref: 050 */
//  608             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  609 
//  610             /* LLR-Ref: 060 */
//  611             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_SET_VOLTAGE_MONITOR | BIT_MASK_7);
//  612             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bValue);
//  613             ATA_5831DoCheckSumProcessing_C();
//  614 
//  615             /* LLR-Ref: 070 */
//  616             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  617 
//  618             /* LLR-Ref: 080 */
//  619             ATA_spiDeselect_C();
//  620         }
//  621     }
//  622     else {
//  623         /* LLR-Ref: 090 */
//  624         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  625     }
//  626 }
//  627 
//  628 /*---------------------------------------------------------------------------*/
//  629 /** \brief <b>ATA_5831TriggerEepromSecureWrite_C</b>
//  630     shall start a secure eeprom write mechanism on ATA5831 via SPI interface
//  631 
//  632     Variable Usage:
//  633     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  634     \li [out] ::g_sAta5831 Global ATA5831 component data
//  635     \li [out] ::g_sDebug Global Debug component data
//  636     \li [in] ::g_sSpiConfig Global SPI component data
//  637 
//  638     \image html ATA_5831TriggerEepromSecureWrite_C.png
//  639 
//  640     \internal
//  641     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  642                 continue
//  643             ELSE
//  644                 goto 090
//  645     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
//  646                 .bConfig[0] goto 020
//  647             ELSE
//  648                 goto 040
//  649     \li 020: Configure data structure ::g_sAta5831
//  650     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
//  651             return
//  652     \li 040: Start the SPI command by setting NSS to low via function 
//  653             ::ATA_spiSelect_C
//  654     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  655     \li 060: Write ID and read data bytes via SPI using function 
//  656             ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
//  657             SPI and store it in variable
//  658                 - ::g_sAta5831 .bEventsSystem
//  659                 - ::g_sAta5831 .bEventsEvent
//  660     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  661     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
//  662             and return
//  663     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
//  664             ::g_sDebug .bErrorCode
//  665     
//  666     \Derived{No}
//  667     
//  668     \Rationale{N/A}
//  669     
//  670     \Traceability{Primus2P-978,Primus2P-989}
//  671     \endinternal
//  672 \n
//  673 */
//  674 /*---------------------------------------------------------------------------*/
//  675 VOIDFUNC ATA_5831TriggerEepromSecureWrite_C(void)
//  676 {
//  677     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831TriggerEepromSecureWrite_C, g_sAta5831.bConfig);
//  678 
//  679     /* LLR-Ref: 005 */
//  680     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  681         /* LLR-Ref: 010 */
//  682         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  683             /* LLR-Ref: 020 */
//  684             m_bAta5831Buffer[0]        = 0xAAU;
//  685             m_bAta5831Buffer[1]        = 0xCCU;
//  686             m_bAta5831Buffer[2]        = 0xF0U;
//  687             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  688             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
//  689                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  690             g_sAta5831.bId             = ATA5831_ID_TRIGGER_EEP_SECURE_WRITE;
//  691             g_sAta5831.bTelegramLength = 4U;
//  692 
//  693             /* LLR-Ref: 030 */
//  694             ATA_5831Start_C();
//  695         } else {                /* spi checksum usage enabled */
//  696             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  697             /* LLR-Ref: 040 */
//  698             ATA_spiSelect_C();
//  699 
//  700             /* LLR-Ref: 050 */
//  701             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  702 
//  703             /* LLR-Ref: 060 */
//  704             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_TRIGGER_EEP_SECURE_WRITE | BIT_MASK_7);
//  705             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0xAAU);
//  706                                        ATA_5831SpiDataExchangeWithChecksum_C(0xCCU);
//  707                                        ATA_5831SpiDataExchangeWithChecksum_C(0xF0U);
//  708             ATA_5831DoCheckSumProcessing_C();
//  709 
//  710             /* LLR-Ref: 070 */
//  711             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  712 
//  713             /* LLR-Ref: 080 */
//  714             ATA_spiDeselect_C();
//  715         }
//  716     }
//  717     else {
//  718         /* LLR-Ref: 090 */
//  719         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  720     }
//  721 }
//  722 
//  723 /*---------------------------------------------------------------------------*/
//  724 /** \brief <b>ATA_5831SystemReset_C</b>
//  725     shall reset the ATA5831 via SPI interface
//  726 
//  727     Variable Usage:
//  728     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  729     \li [out] ::g_sAta5831 Global ATA5831 component data
//  730     \li [out] ::g_sDebug Global Debug component data
//  731     \li [in] ::g_sSpiConfig Global SPI component data
//  732 
//  733     \image html ATA_5831SystemReset_C.png
//  734 
//  735     \internal
//  736     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  737                 continue
//  738              ELSE
//  739                 goto 090
//  740     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
//  741                 .bConfig[0] goto 020
//  742              ELSE
//  743                 goto 040
//  744     \li 020: Configure data structure ::g_sAta5831
//  745     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
//  746              return
//  747     \li 040: Start the SPI command by setting NSS to low via function 
//  748              ::ATA_spiSelect_C
//  749     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  750     \li 060: Write ID and read data bytes via SPI using function 
//  751              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
//  752              SPI and store it in variable
//  753                 - ::g_sAta5831 .bEventsSystem
//  754                 - ::g_sAta5831 .bEventsEvent
//  755     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  756     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
//  757              and return
//  758     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
//  759              ::g_sDebug .bErrorCode
//  760 
//  761     \Derived{No}
//  762 
//  763     \Rationale{N/A}
//  764 
//  765     \Traceability{Primus2P-977,Primus2P-989}
//  766     \endinternal
//  767 \n
//  768 */
//  769 /*---------------------------------------------------------------------------*/
//  770 VOIDFUNC ATA_5831SystemReset_C(void)
//  771 {
//  772     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831SystemReset_C, g_sAta5831.bConfig);
//  773     /* LLR-Ref: 005 */
//  774     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  775         /* LLR-Ref: 010 */
//  776         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  777             /* LLR-Ref: 020 */
//  778             m_bAta5831Buffer[0]        = 0U;
//  779             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  780             /* set patch spi command.type to read for correct reading of events */
//  781             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  782             g_sAta5831.bId             = ATA5831_ID_SYSTEM_RESET;
//  783             g_sAta5831.bTelegramLength = 2U;
//  784             /* LLR-Ref: 030 */
//  785             ATA_5831Start_C();
//  786         } else {                /* spi checksum usage enabled */
//  787             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  788 
//  789             /* LLR-Ref: 040 */
//  790             ATA_spiSelect_C();
//  791 
//  792             /* LLR-Ref: 050 */
//  793             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  794             /* LLR-Ref: 060 */
//  795             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_SYSTEM_RESET | BIT_MASK_7);
//  796             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  797             ATA_5831DoCheckSumProcessing_C();
//  798 
//  799             /* LLR-Ref: 070 */
//  800             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  801 
//  802             /* LLR-Ref: 080 */
//  803             ATA_spiDeselect_C();
//  804         }
//  805     }
//  806     else {
//  807         /* LLR-Ref: 090 */
//  808         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  809     }
//  810 }
//  811 
//  812 /*---------------------------------------------------------------------------*/
//  813 /** \brief <b>ATA_5831CustomerConfigurableCommand_C</b>
//  814     shall send the SPI Command "Customer Configurable Command" to ATA5831
//  815 
//  816     Variable Usage:
//  817     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
//  818     \li [out] ::g_sAta5831 Global ATA5831 component data
//  819     \li [out] ::g_sDebug Global Debug component data
//  820     \li [in] ::g_sSpiConfig Global SPI component data
//  821 
//  822     \image html ATA_5831CustomerConfigurableCommand_C.png
//  823 
//  824     \internal
//  825     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  826                 continue
//  827              ELSE
//  828                 goto 090
//  829     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
//  830                 .bConfig[0] goto 020
//  831              ELSE
//  832                 goto 040
//  833     \li 020: Configure data structure ::g_sAta5831
//  834     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
//  835              return
//  836     \li 040: Start the SPI command by setting NSS to low via function 
//  837              ::ATA_spiSelect_C
//  838     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  839     \li 060: Write ID and read data bytes via SPI using function 
//  840              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via
//  841              SPI and store it in variable
//  842                 - ::g_sAta5831 .bEventsSystem
//  843                 - ::g_sAta5831 .bEventsEvent
//  844     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  845     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
//  846              and return
//  847     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
//  848              ::g_sDebug .bErrorCode
//  849 
//  850     \Derived{No}
//  851 
//  852     \Rationale{N/A}
//  853 
//  854     \Traceability{Primus2P-976,Primus2P-989}
//  855     \endinternal
//  856 \n
//  857 */
//  858 /*---------------------------------------------------------------------------*/
//  859 VOIDFUNC ATA_5831CustomerConfigurableCommand_C(void)
//  860 {
//  861     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831CustomerConfigurableCommand_C, g_sAta5831.bConfig);
//  862     /* LLR-Ref: 005 */
//  863     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  864         /* LLR-Ref: 010 */
//  865         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  866             /* LLR-Ref: 020 */
//  867             m_bAta5831Buffer[0]        = 0U;
//  868             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  869             /* set patch spi command.type to read for correct reading of events */
//  870             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  871             g_sAta5831.bId             = ATA5831_ID_CUSTOM_COMMAND;
//  872             g_sAta5831.bTelegramLength = 2U;
//  873 
//  874             /* LLR-Ref: 030 */
//  875             ATA_5831Start_C();
//  876         } else {                /* spi checksum usage enabled */
//  877             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  878             /* LLR-Ref: 040 */
//  879             ATA_spiSelect_C();
//  880 
//  881             /* LLR-Ref: 050 */
//  882             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  883 
//  884             /* LLR-Ref: 060 */
//  885             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_CUSTOM_COMMAND | BIT_MASK_7);
//  886             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
//  887             ATA_5831DoCheckSumProcessing_C();
//  888 
//  889             /* LLR-Ref: 070 */
//  890             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  891 
//  892             /* LLR-Ref: 080 */
//  893             ATA_spiDeselect_C();
//  894         }
//  895     }
//  896     else {
//  897         /* LLR-Ref: 090 */
//  898         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  899     }
//  900 }
//  901 
//  902 /*---------------------------------------------------------------------------*/
//  903 /** \brief <b>ATA_5831PatchSpi_C</b>
//  904     shall send the SPI Command "Patch SPI" to ATA5831
//  905 
//  906     \param[in]      bValue              SPI command parameter
//  907 
//  908     Variable Usage>
//  909     \li [in,out] ::m_bAta5831Buffer  Global ATA5831 SPI header information
//  910     \li [out] ::g_sAta5831        Global ATA5831 component data
//  911     \li [out] ::g_sDebug          Global Debug component data
//  912     \li [in] ::g_sSpiConfig      Global SPI component data
//  913 
//  914     \image html ATA_5831PatchSpi_C.png
//  915 
//  916     \internal
//  917     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
//  918                 continue
//  919              ELSE
//  920                 goto 090
//  921     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
//  922                 .bConfig[0] goto 020
//  923              ELSE
//  924                 goto 040
//  925     \li 020: Configure data structure ::g_sAta5831
//  926     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
//  927              return
//  928     \li 040: Start the SPI command by setting NSS to low via function 
//  929              ::ATA_spiSelect_C
//  930     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
//  931     \li 060: Write ID and read data bytes via SPI using function 
//  932              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via
//  933              SPI and store it in variable
//  934                 - ::g_sAta5831 .bEventsSystem
//  935                 - ::g_sAta5831 .bEventsEvent
//  936     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
//  937     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
//  938              and return
//  939     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
//  940              ::g_sDebug .bErrorCode
//  941 
//  942     \Derived{No}
//  943 
//  944     \Rationale{N/A}
//  945 
//  946     \Traceability{Primus2P-975,Primus2P-989}
//  947     \endinternal
//  948 \n
//  949 */
//  950 /*---------------------------------------------------------------------------*/
//  951 VOIDFUNC ATA_5831PatchSpi_C(uint8_t bValue)
//  952 {
//  953     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831PatchSpi_C, g_sAta5831.bConfig);
//  954     /* LLR-Ref: 005 */
//  955     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
//  956         /* LLR-Ref: 010 */
//  957         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
//  958             /* LLR-Ref: 020 */
//  959             m_bAta5831Buffer[0]        = bValue;
//  960 
//  961             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
//  962             /* set command.type to read for correct reading of events */
//  963             /* ---Primus2P-2915--- */
//  964             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
//  965                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
//  966             /* ---Primus2P-2915--- */
//  967             g_sAta5831.bId             = ATA5831_ID_PATCH_SPI;
//  968             g_sAta5831.bTelegramLength = 2U;
//  969 
//  970             /* LLR-Ref: 030 */
//  971             ATA_5831Start_C();
//  972         } else {                /* spi checksum usage enabled */
//  973             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
//  974             /* LLR-Ref: 040 */
//  975             ATA_spiSelect_C();
//  976 
//  977             /* LLR-Ref: 050 */
//  978             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
//  979 
//  980             /* LLR-Ref: 060 */
//  981             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_PATCH_SPI | BIT_MASK_7);
//  982             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bValue);
//  983             ATA_5831DoCheckSumProcessing_C();
//  984 
//  985             /* LLR-Ref: 070 */
//  986             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
//  987 
//  988             /* LLR-Ref: 080 */
//  989             ATA_spiDeselect_C();
//  990         }
//  991     }
//  992     else {
//  993         /* LLR-Ref: 090 */
//  994         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
//  995     }
//  996 }
//  997 
//  998 /*---------------------------------------------------------------------------*/
//  999 /** \brief <b>ATA_5831CalibrateAndCheck_C</b>
// 1000     shall trigger a tune and check action on ATA5831
// 1001 
// 1002     \param[in]      bTuneCheckConfig        Action to be triggered
// 1003     \param[in]      bServiceChannelConfig   Service/Channel configuration
// 1004     
// 1005     Variable Usage>
// 1006     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
// 1007     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1008     \li [out] ::g_sDebug Global Debug component data
// 1009     \li [in]  ::g_sSpiConfig Global SPI component data
// 1010 
// 1011     \image html ATA_5831CalibrateAndCheck_C.png
// 1012 
// 1013     \internal
// 1014     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1015                 continue
// 1016              ELSE
// 1017                 goto 090
// 1018     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 1019                 .bConfig[0] goto 020
// 1020              ELSE
// 1021                 goto 040
// 1022     \li 020: Configure data structure ::g_sAta5831
// 1023     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1024              return
// 1025     \li 040: Start the SPI command by setting NSS to low via function 
// 1026              ::ATA_spiSelect_C
// 1027     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1028     \li 060: Write ID and read data bytes via SPI using function 
// 1029              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1030              SPI and store it in variable
// 1031                 - ::g_sAta5831 .bEventsSystem
// 1032                 - ::g_sAta5831 .bEventsEvent
// 1033     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1034     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1035              and return
// 1036     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1037              ::g_sDebug .bErrorCode
// 1038 
// 1039     \Derived{No}
// 1040 
// 1041     \Rationale{N/A}
// 1042 
// 1043     \Traceability{Primus2P-974,Primus2P-989}
// 1044     \endinternal
// 1045 \n
// 1046 */
// 1047 /*---------------------------------------------------------------------------*/
// 1048 VOIDFUNC ATA_5831CalibrateAndCheck_C(
// 1049     tuneCheckConfig_t bTuneCheckConfig,
// 1050     svcChConfig_t bServiceChannelConfig
// 1051 )
// 1052 {
// 1053     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831CalibrateAndCheck_C, g_sAta5831.bConfig);
// 1054     /* LLR-Ref: 005 */
// 1055     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1056         /* LLR-Ref: 010 */
// 1057         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1058             /* LLR-Ref: 020 */
// 1059             m_bAta5831Buffer[0]        = bTuneCheckConfig;
// 1060             m_bAta5831Buffer[1]        = bServiceChannelConfig;
// 1061             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
// 1062             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1063                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1064             g_sAta5831.bId             = ATA5831_ID_CALIBRATE_AND_CHECK;
// 1065             g_sAta5831.bTelegramLength = 3U;
// 1066 
// 1067             /* LLR-Ref: 030 */
// 1068             ATA_5831Start_C();
// 1069         } else {                /* spi checksum usage enabled */
// 1070             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1071             /* LLR-Ref: 040 */
// 1072             ATA_spiSelect_C();
// 1073 
// 1074             /* LLR-Ref: 050 */
// 1075             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1076 
// 1077             /* LLR-Ref: 060 */
// 1078             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_CALIBRATE_AND_CHECK | BIT_MASK_7);
// 1079             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bTuneCheckConfig);
// 1080                                        ATA_5831SpiDataExchangeWithChecksum_C(bServiceChannelConfig);
// 1081             ATA_5831DoCheckSumProcessing_C();
// 1082 
// 1083             /* LLR-Ref: 070 */
// 1084             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1085 
// 1086             /* LLR-Ref: 080 */
// 1087             ATA_spiDeselect_C();
// 1088         }
// 1089     }
// 1090     else {
// 1091         /* LLR-Ref: 090 */
// 1092         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1093     }
// 1094 }
// 1095 
// 1096 /*---------------------------------------------------------------------------*/
// 1097 /** \brief <b>ATA_5831SetSystemMode_C</b>
// 1098     shall trigger a system mode switching on ATA5831
// 1099 
// 1100     \param[in]      bSystemModeConfig       Action to be triggered
// 1101     \param[in]      bServiceChannelConfig   Service/Channel configuration
// 1102 
// 1103     Variable Usage:
// 1104     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
// 1105     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1106     \li [out] ::g_sDebug Global Debug component data
// 1107     \li [in] ::g_sSpiConfig Global SPI component data
// 1108     
// 1109     \image html ATA_5831SetSystemMode_C.png
// 1110 
// 1111     \internal
// 1112     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1113                 continue
// 1114              ELSE
// 1115                 goto 090
// 1116     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 1117                 .bConfig[0] goto 020
// 1118              ELSE
// 1119                 goto 040
// 1120     \li 020: Configure data structure ::g_sAta5831
// 1121     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1122              return
// 1123     \li 040: Start the SPI command by setting NSS to low via function 
// 1124              ::ATA_spiSelect_C
// 1125     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1126     \li 060: Write ID and read data bytes via SPI using function 
// 1127              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1128              SPI and store it in variable
// 1129                 - ::g_sAta5831 .bEventsSystem
// 1130                 - ::g_sAta5831 .bEventsEvent
// 1131     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1132     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
// 1133              and return
// 1134     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1135              ::g_sDebug .bErrorCode
// 1136 
// 1137     \Derived{No}
// 1138 
// 1139     \Rationale{N/A}
// 1140 
// 1141     \Traceability{Primus2P-973,Primus2P-989}
// 1142     \endinternal
// 1143 \n
// 1144 */
// 1145 /*---------------------------------------------------------------------------*/
// 1146 VOIDFUNC ATA_5831SetSystemMode_C(
// 1147     sysModeConfig_t bSystemModeConfig,
// 1148     svcChConfig_t bServiceChannelConfig
// 1149 )
// 1150 {
// 1151     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831SetSystemMode_C, g_sAta5831.bConfig);
// 1152     /* LLR-Ref: 005 */
// 1153     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1154         /* LLR-Ref: 010 */
// 1155         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1156             /* LLR-Ref: 020 */
// 1157             m_bAta5831Buffer[0]        = bSystemModeConfig;
// 1158             m_bAta5831Buffer[1]        = bServiceChannelConfig;
// 1159             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
// 1160             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1161                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1162 
// 1163             g_sAta5831.bId             = ATA5831_ID_SET_SYSTEM_MODE;
// 1164             g_sAta5831.bTelegramLength = 3U;
// 1165 
// 1166             /* LLR-Ref: 030 */
// 1167             ATA_5831Start_C();
// 1168         } else {                /* spi checksum usage enabled */
// 1169             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1170             /* LLR-Ref: 040 */
// 1171             ATA_spiSelect_C();
// 1172 
// 1173             /* LLR-Ref: 050 */
// 1174             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1175 
// 1176             /* LLR-Ref: 060 */
// 1177             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_SET_SYSTEM_MODE | BIT_MASK_7);
// 1178             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bSystemModeConfig);
// 1179                                        ATA_5831SpiDataExchangeWithChecksum_C(bServiceChannelConfig);
// 1180             ATA_5831DoCheckSumProcessing_C();
// 1181 
// 1182             /* LLR-Ref: 070 */
// 1183             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1184 
// 1185             /* LLR-Ref: 080 */
// 1186             ATA_spiDeselect_C();
// 1187         }
// 1188     }
// 1189     else {
// 1190         /* LLR-Ref: 090 */
// 1191         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1192     }
// 1193 }
// 1194 
// 1195 /*---------------------------------------------------------------------------*/
// 1196 /** \brief <b>ATA_5831WriteTxPreambleFifo_C</b>
// 1197     shall send Preamble data to the ATA5831 via SPI interface.
// 1198 
// 1199     \param[in] pData Pointer to preamble data
// 1200     \param[in] bLen Preamble data length
// 1201 
// 1202     Variable Usage:
// 1203     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1204     \li [out] ::g_sDebug Global Debug component data
// 1205     \li [in] ::g_sSpiConfig Global SPI component data
// 1206 
// 1207     \image html ATA_5831WriteTxPreambleFifo_C.png
// 1208 
// 1209     \internal
// 1210     \li 005: IF SPI initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1211                 continue
// 1212              ELSE
// 1213                 goto 090
// 1214     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 1215                 .bConfig[0] goto 020
// 1216              ELSE
// 1217                 goto 040
// 1218     \li 020: Configure data structure ::g_sAta5831
// 1219     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1220              return
// 1221     \li 040: Start the SPI command by setting NSS to low via function 
// 1222              ::ATA_spiSelect_C
// 1223     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1224     \li 060: Write ID and read data bytes via SPI using function 
// 1225              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1226              SPI and store it in variable
// 1227                 - ::g_sAta5831 .bEventsSystem
// 1228                 - ::g_sAta5831 .bEventsEvent
// 1229     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1230     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1231              and return
// 1232     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1233              ::g_sDebug .bErrorCode
// 1234 
// 1235     \Derived{No}
// 1236 
// 1237     \Rationale{N/A}
// 1238 
// 1239     \Traceability{Primus2P-972,Primus2P-989}
// 1240     \endinternal
// 1241 \n
// 1242 */
// 1243 /*---------------------------------------------------------------------------*/
// 1244 VOIDFUNC ATA_5831WriteTxPreambleFifo_C(uint8_t bLen, uint8_t *pData)
// 1245 {
// 1246     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831WriteTxPreambleFifo_C, g_sAta5831.bConfig);
// 1247     /* LLR-Ref: 005 */
// 1248     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1249         /* LLR-Ref: 010 */
// 1250         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1251             /* LLR-Ref: 020 */
// 1252             g_sAta5831.pDataPtr        = pData;
// 1253             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1254                                         | BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 1255                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1256             g_sAta5831.bId             = ATA5831_ID_WRITE_TX_PREAMBLE_FIFO;
// 1257             g_sAta5831.bLength         = bLen;
// 1258             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 2U;
// 1259 
// 1260             /* LLR-Ref: 030 */
// 1261             ATA_5831Start_C();
// 1262         } else {                /* spi checksum usage enabled */
// 1263             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1264             /* LLR-Ref: 040 */
// 1265             ATA_spiSelect_C();
// 1266 
// 1267             /* LLR-Ref: 050 */
// 1268             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1269 
// 1270             /* LLR-Ref: 060 */
// 1271             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_WRITE_TX_PREAMBLE_FIFO | BIT_MASK_7);
// 1272             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 1273             for(uint8_t i = 0; i< bLen; i++) {
// 1274                  ATA_5831SpiDataExchangeWithChecksum_C(*pData++);
// 1275             }
// 1276             ATA_5831DoCheckSumProcessing_C();
// 1277 
// 1278             /* LLR-Ref: 070 */
// 1279             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1280 
// 1281             /* LLR-Ref: 080 */
// 1282             ATA_spiDeselect_C();
// 1283         }
// 1284     }
// 1285     else {
// 1286         /* LLR-Ref: 090 */
// 1287         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1288     }
// 1289 }
// 1290 
// 1291 /*---------------------------------------------------------------------------*/
// 1292 /** \brief <b>ATA_5831WriteTxFifo_C</b>
// 1293     shall send Tx data to the ATA5831 via SPI interface.
// 1294     
// 1295     \param[in]      pData                   Pointer to Tx data
// 1296     \param[in]      bLen                    Tx data length
// 1297 
// 1298     Variable Usage:
// 1299     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1300     \li [out] ::g_sDebug Global Debug component data
// 1301     \li [in] ::g_sSpiConfig Global SPI component data
// 1302 
// 1303     \image html ATA_5831WriteTxFifo_C.png
// 1304 
// 1305     \internal
// 1306     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1307                 continue
// 1308              ELSE
// 1309                 goto 090
// 1310     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 1311                 .bConfig[0] goto 020
// 1312              ELSE
// 1313                 goto 040
// 1314     \li 020: Configure data structure ::g_sAta5831
// 1315     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1316              return
// 1317     \li 040: Start the SPI command by setting NSS to low via function 
// 1318              ::ATA_spiSelect_C
// 1319     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1320     \li 060: Write ID and read data bytes via SPI using function 
// 1321              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1322              SPI and store it in variable
// 1323                 - ::g_sAta5831 .bEventsSystem
// 1324                 - ::g_sAta5831 .bEventsEvent
// 1325     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1326     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1327              and return
// 1328     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1329              ::g_sDebug .bErrorCode
// 1330 
// 1331     Derived{No}
// 1332 
// 1333     \Rationale{N/A}
// 1334 
// 1335     \Traceability{Primus2P-971,Primus2P-989}
// 1336     \endinternal
// 1337 \n
// 1338 */
// 1339 /*---------------------------------------------------------------------------*/
// 1340 VOIDFUNC ATA_5831WriteTxFifo_C(uint8_t bLen, uint8_t *pData)
// 1341 {
// 1342     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831WriteTxFifo_C, g_sAta5831.bConfig);
// 1343     /* LLR-Ref: 005 */
// 1344     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1345         /* LLR-Ref: 010 */
// 1346         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1347             /* LLR-Ref: 020 */
// 1348             g_sAta5831.pDataPtr        = pData;
// 1349             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1350                                         | BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 1351                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1352 
// 1353             g_sAta5831.bId             = ATA5831_ID_WRITE_TX_FIFO;
// 1354             g_sAta5831.bLength         = bLen;
// 1355             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 2U;
// 1356 
// 1357             /* LLR-Ref: 030 */
// 1358             ATA_5831Start_C();
// 1359         } else {                /* spi checksum usage enabled */
// 1360             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1361             /* LLR-Ref: 040 */
// 1362             ATA_spiSelect_C();
// 1363 
// 1364             /* LLR-Ref: 050 */
// 1365             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1366 
// 1367             /* LLR-Ref: 060 */
// 1368             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_WRITE_TX_FIFO | BIT_MASK_7);
// 1369             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 1370             for(uint8_t i = 0; i< bLen; i++) {
// 1371                  ATA_5831SpiDataExchangeWithChecksum_C(*pData++);
// 1372             }
// 1373             ATA_5831DoCheckSumProcessing_C();
// 1374 
// 1375             /* LLR-Ref: 070 */
// 1376             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1377 
// 1378             /* LLR-Ref: 080 */
// 1379             ATA_spiDeselect_C();
// 1380         }
// 1381     }
// 1382     else {
// 1383         /* LLR-Ref: 090 */
// 1384         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1385     }
// 1386 }
// 1387 
// 1388 /*---------------------------------------------------------------------------*/
// 1389 /** \brief <b>ATA_5831ReadEeprom_C</b>
// 1390     shall read eeprom content from ATA5831 via SPI interface.
// 1391 
// 1392     \param[out]     pData                   Data read from ATA5831 EEPROM
// 1393     \param[in]      wAddress                ATA5831 EEPROM Address to be read from 
// 1394 
// 1395     Variable Usage:
// 1396     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1397     \li [out] ::g_sDebug Global Debug component data
// 1398     \li [in] ::g_sSpiConfig Global SPI component data
// 1399 
// 1400     \image html ATA_5831ReadEeprom_C.png
// 1401 
// 1402     \internal
// 1403     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1404                 continue
// 1405              ELSE
// 1406                 goto 090
// 1407     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 1408                 .bConfig[0] goto 020
// 1409              ELSE
// 1410                 goto 040
// 1411     \li 020: Configure data structure ::g_sAta5831
// 1412     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1413              return
// 1414     \li 040: Start the SPI command by setting NSS to low via function ::ATA_spiSelect_C
// 1415     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1416     \li 060: Write ID and read data bytes via SPI using function 
// 1417              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1418              SPI and store it in variable
// 1419                 - ::g_sAta5831 .bEventsSystem
// 1420                 - ::g_sAta5831 .bEventsEvent
// 1421     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1422     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1423              and return
// 1424     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1425              ::g_sDebug .bErrorCode
// 1426 
// 1427     \Derived{No}
// 1428 
// 1429     \Rationale{N/A}
// 1430 
// 1431     \Traceability{Primus2P-970,Primus2P-989}
// 1432     \endinternal
// 1433 \n
// 1434 */
// 1435 /*---------------------------------------------------------------------------*/
// 1436 VOIDFUNC ATA_5831ReadEeprom_C(uint16_t wAddress, uint8_t *pData)
// 1437 {
// 1438     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadEeprom_C, g_sAta5831.bConfig);
// 1439     /* LLR-Ref: 005 */
// 1440     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1441         /* LLR-Ref: 010 */
// 1442         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1443             /* LLR-Ref: 020 */
// 1444             g_sAta5831.pDataPtr        = pData;
// 1445             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_ADDRESS_INDICATOR
// 1446                                         | BM_SATA5831_CONFIG_DUMMY_INDICATOR
// 1447                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1448             g_sAta5831.bId             = ATA5831_ID_READ_EEPROM;
// 1449             g_sAta5831.bLength         = 1U;
// 1450             /* ---Primus2P-2922--- */
// 1451             g_sAta5831.wAddress        = wAddress;
// 1452             /* ---Primus2P-2922--- */
// 1453             g_sAta5831.bTelegramLength = 5U;
// 1454 
// 1455             /* LLR-Ref: 030 */
// 1456             ATA_5831Start_C();
// 1457         } else {                /* spi checksum usage enabled */
// 1458             uint8_t bAddressHigh = (uint8_t)(wAddress >> 8U);
// 1459             uint8_t bAddressLow  = (uint8_t)(wAddress & 0x00FFU);
// 1460 
// 1461             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1462             /* LLR-Ref: 040 */
// 1463             ATA_spiSelect_C();
// 1464 
// 1465             /* LLR-Ref: 050 */
// 1466             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1467 
// 1468             /* LLR-Ref: 060 */
// 1469             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_EEPROM | BIT_MASK_7);
// 1470             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bAddressHigh);
// 1471                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressLow);
// 1472                                        ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
// 1473             *pData                   = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
// 1474             ATA_5831DoCheckSumProcessing_C();
// 1475 
// 1476             /* LLR-Ref: 070 */
// 1477             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1478 
// 1479             /* LLR-Ref: 080 */
// 1480             ATA_spiDeselect_C();
// 1481         }
// 1482     }
// 1483     else {
// 1484         /* LLR-Ref: 090 */
// 1485         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1486     }
// 1487 }
// 1488 
// 1489 /*---------------------------------------------------------------------------*/
// 1490 /** \brief <b>ATA_5831WriteEeprom_C</b>
// 1491     shall write data to ATA5831 eeprom via SPI interface.
// 1492 
// 1493     \param[in]      wAddress                ATA5831 EEPROM address to write to 
// 1494     \param[in]      bData                   Data to write to ATA5831 EEPROM
// 1495 
// 1496     Variable Usage:
// 1497     \li [in,out] ::m_bAta5831Buffer Global ATA5831 SPI header information
// 1498     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1499     \li [out] ::g_sDebug Global Debug component data
// 1500     \li [in] ::g_sSpiConfig Global SPI component data
// 1501 
// 1502     \image html ATA_5831WriteEeprom_C.png
// 1503 
// 1504     \internal
// 1505     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1506                 continue
// 1507              ELSE
// 1508                 goto 090
// 1509     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 1510                 .bConfig[0] goto 020
// 1511              ELSE
// 1512                 goto 040
// 1513     \li 020: Configure data structure ::g_sAta5831
// 1514     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1515              return
// 1516     \li 040: Start the SPI command by setting NSS to low via function 
// 1517              ::ATA_spiSelect_C
// 1518     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1519     \li 060: Write ID and read data bytes via SPI using function 
// 1520              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1521              SPI and store it in variable
// 1522                 - ::g_sAta5831 .bEventsSystem
// 1523                 - ::g_sAta5831 .bEventsEvent
// 1524     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1525     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1526              and return
// 1527     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1528              ::g_sDebug .bErrorCode
// 1529 
// 1530     \Derived{No}
// 1531 
// 1532     \Rationale{N/A}
// 1533 
// 1534     \Traceability{Primus2P-969,Primus2P-989}
// 1535     \endinternal
// 1536 \n
// 1537 */
// 1538 /*---------------------------------------------------------------------------*/
// 1539 VOIDFUNC ATA_5831WriteEeprom_C(uint16_t wAddress, uint8_t bData)
// 1540 {
// 1541     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831WriteEeprom_C, g_sAta5831.bConfig);
// 1542     /* LLR-Ref: 005 */
// 1543     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1544         /* LLR-Ref: 010 */
// 1545         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1546             /* LLR-Ref: 020 */
// 1547             m_bAta5831Buffer[0]        = bData;
// 1548             g_sAta5831.pDataPtr        = m_bAta5831Buffer;
// 1549             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1550                                         | BM_SATA5831_CONFIG_ADDRESS_INDICATOR
// 1551                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1552             g_sAta5831.bId             = ATA5831_ID_WRITE_EEPROM;
// 1553             g_sAta5831.wAddress        = wAddress;
// 1554             g_sAta5831.bTelegramLength = 4U;
// 1555 
// 1556             /* LLR-Ref: 030 */
// 1557             ATA_5831Start_C();
// 1558         } else {                /* spi checksum usage enabled */
// 1559             uint8_t bAddressHigh = (uint8_t)(wAddress >> 8U);
// 1560             uint8_t bAddressLow  = (uint8_t)(wAddress & 0x00FFU);
// 1561 
// 1562             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1563             /* LLR-Ref: 040 */
// 1564             ATA_spiSelect_C();
// 1565 
// 1566             /* LLR-Ref: 050 */
// 1567             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1568 
// 1569             /* LLR-Ref: 060 */
// 1570             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_WRITE_EEPROM | BIT_MASK_7);
// 1571             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bAddressHigh);
// 1572                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressLow);
// 1573                                        ATA_5831SpiDataExchangeWithChecksum_C(bData);
// 1574             ATA_5831DoCheckSumProcessing_C();
// 1575 
// 1576             /* LLR-Ref: 070 */
// 1577             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1578 
// 1579             /* LLR-Ref: 080 */
// 1580             ATA_spiDeselect_C();
// 1581         }
// 1582     }
// 1583     else {
// 1584         /* LLR-Ref: 090 */
// 1585         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1586     }
// 1587 }
// 1588 
// 1589 /*---------------------------------------------------------------------------*/
// 1590 /** \brief <b>ATA_5831ReadSramRegister_C</b>
// 1591     shall read data from ATA5831 sram or register via SPI interface.
// 1592 
// 1593     \param[out]     pData                   SRAM/Register data read from ATA5831
// 1594     \param[in]      wAddress                ATA5831 SRAM/Register start address to be read from
// 1595     \param[in]      bLen                    Number of SRAM/Register bytes to read from ATA5831
// 1596 
// 1597     Variable Usage:
// 1598     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1599     \li [out] ::g_sDebug Global Debug component data
// 1600     \li [in] ::g_sSpiConfig Global SPI component data
// 1601 
// 1602     \image html ATA_5831ReadSramRegister_C.png
// 1603 
// 1604     \internal
// 1605     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1606                 continue
// 1607              ELSE
// 1608                 goto 090
// 1609     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 1610                 .bConfig[0] goto 020
// 1611              ELSE
// 1612                 goto 040
// 1613     \li 020: Configure data structure ::g_sAta5831
// 1614     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1615              return
// 1616     \li 040: Start the SPI command by setting NSS to low via function 
// 1617              ::ATA_spiSelect_C
// 1618     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1619     \li 060: Write ID and read data bytes via SPI using function 
// 1620              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1621              SPI and store it in variable
// 1622                 - ::g_sAta5831 .bEventsSystem
// 1623                 - ::g_sAta5831 .bEventsEvent
// 1624     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1625     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1626              and return
// 1627     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1628              ::g_sDebug .bErrorCode
// 1629 
// 1630     \Derived{No}
// 1631 
// 1632     \Rationale{N/A}
// 1633 
// 1634     \Traceability{Primus2P-968,Primus2P-989}
// 1635     \endinternal
// 1636 \n
// 1637 */
// 1638 /*---------------------------------------------------------------------------*/
// 1639 VOIDFUNC ATA_5831ReadSramRegister_C(uint16_t wAddress, uint8_t bLen, uint8_t *pData)
// 1640 {
// 1641     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadSramRegister_C, g_sAta5831.bConfig);
// 1642     /* LLR-Ref: 005 */
// 1643     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1644         /* LLR-Ref: 010 */
// 1645         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1646             /* LLR-Ref: 020 */
// 1647             g_sAta5831.pDataPtr        = pData;
// 1648             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_ADDRESS_INDICATOR
// 1649                                         | BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 1650                                         | BM_SATA5831_CONFIG_DUMMY_INDICATOR
// 1651                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1652             g_sAta5831.bId             = ATA5831_ID_READ_REGISTER_SRAM;
// 1653             g_sAta5831.bLength         = bLen;
// 1654             /* ---Primus2P-2924--- */
// 1655             g_sAta5831.wAddress        = wAddress;
// 1656             /* ---Primus2P-2924--- */
// 1657             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 5U;
// 1658 
// 1659             /* LLR-Ref: 030 */
// 1660             ATA_5831Start_C();
// 1661         } else {                /* spi checksum usage enabled */
// 1662             uint8_t bAddressHigh = (uint8_t)(wAddress >> 8U);
// 1663             uint8_t bAddressLow  = (uint8_t)(wAddress & 0x00FFU);
// 1664 
// 1665             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1666             /* LLR-Ref: 040 */
// 1667             ATA_spiSelect_C();
// 1668 
// 1669             /* LLR-Ref: 050 */
// 1670             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1671 
// 1672             /* LLR-Ref: 060 */
// 1673             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_REGISTER_SRAM | BIT_MASK_7);
// 1674             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 1675                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressHigh);
// 1676                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressLow);
// 1677                                        ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
// 1678             for(uint8_t i = 0; i< bLen; i++) {
// 1679                  *pData++ = ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
// 1680             }
// 1681             ATA_5831DoCheckSumProcessing_C();
// 1682 
// 1683             /* LLR-Ref: 070 */
// 1684             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1685 
// 1686             /* LLR-Ref: 080 */
// 1687             ATA_spiDeselect_C();
// 1688         }
// 1689     }
// 1690     else {
// 1691         /* LLR-Ref: 090 */
// 1692         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1693     }
// 1694 }
// 1695 
// 1696 /*---------------------------------------------------------------------------*/
// 1697 /** \brief <b>ATA_5831WriteSramRegister_C</b>
// 1698     shall write data to ATA5831 sram or register via SPI interface.
// 1699 
// 1700     \param[in] wAddress ATA5831 SRAM/Register start address to be written to
// 1701     \param[in] bLen Number of SRAM/Register bytes to write
// 1702     \param[in] pData SRAM/Register data to write
// 1703 
// 1704     Variable Usage:
// 1705     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1706     \li [out] ::g_sDebug Global Debug component data
// 1707     \li [in] ::g_sSpiConfig Global SPI component data
// 1708 
// 1709     \image html ATA_5831WriteSramRegister_C.png
// 1710 
// 1711     \internal
// 1712     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1713                 continue
// 1714              ELSE
// 1715                 goto 090
// 1716     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 1717                 .bConfig[0] goto 020
// 1718              ELSE
// 1719                 goto 040
// 1720     \li 020: Configure data structure ::g_sAta5831
// 1721     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1722              return
// 1723     \li 040: Start the SPI command by setting NSS to low via function 
// 1724              ::ATA_spiSelect_C
// 1725     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1726     \li 060: Write ID and read data bytes via SPI using function 
// 1727              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1728              SPI and store it in variable
// 1729                 - ::g_sAta5831 .bEventsSystem
// 1730                 - ::g_sAta5831 .bEventsEvent
// 1731     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1732     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1733              and return
// 1734     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1735              ::g_sDebug .bErrorCode
// 1736 
// 1737     \Derived{No}
// 1738 
// 1739     \Rationale{N/A}
// 1740 
// 1741     \Traceability{Primus2P-967,Primus2P-989}
// 1742     \endinternal
// 1743 \n
// 1744 */
// 1745 /*---------------------------------------------------------------------------*/
// 1746 VOIDFUNC ATA_5831WriteSramRegister_C(uint16_t wAddress, uint8_t bLen, uint8_t *pData)
// 1747 {
// 1748     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831WriteSramRegister_C, g_sAta5831.bConfig);
// 1749     /* LLR-Ref: 005 */
// 1750     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1751         /* LLR-Ref: 010 */
// 1752         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1753             /* LLR-Ref: 020 */
// 1754             g_sAta5831.pDataPtr        = pData;
// 1755             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_READ_WRITE_INDICATOR
// 1756                                         | BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 1757                                         | BM_SATA5831_CONFIG_ADDRESS_INDICATOR
// 1758                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1759 
// 1760             g_sAta5831.bId             = ATA5831_ID_WRITE_REGISTER_SRAM;
// 1761             g_sAta5831.wAddress        = wAddress;
// 1762             g_sAta5831.bLength         = bLen;
// 1763             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 4U;
// 1764 
// 1765             /* LLR-Ref: 030 */
// 1766             ATA_5831Start_C();
// 1767         } else {                /* spi checksum usage enabled */
// 1768             uint8_t bAddressHigh = (uint8_t)(wAddress >> 8U);
// 1769             uint8_t bAddressLow  = (uint8_t)(wAddress & 0x00FFU);
// 1770 
// 1771             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1772             /* LLR-Ref: 040 */
// 1773             ATA_spiSelect_C();
// 1774 
// 1775             /* LLR-Ref: 050 */
// 1776             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1777 
// 1778             /* LLR-Ref: 060 */
// 1779             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_WRITE_REGISTER_SRAM | BIT_MASK_7);
// 1780             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 1781                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressHigh);
// 1782                                        ATA_5831SpiDataExchangeWithChecksum_C(bAddressLow);
// 1783 
// 1784             for(uint8_t i = 0; i< bLen; i++) {
// 1785                  ATA_5831SpiDataExchangeWithChecksum_C(*pData++);
// 1786             }
// 1787             ATA_5831DoCheckSumProcessing_C();
// 1788 
// 1789             /* LLR-Ref: 070 */
// 1790             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1791 
// 1792             /* LLR-Ref: 080 */
// 1793             ATA_spiDeselect_C();
// 1794         }
// 1795     }
// 1796     else {
// 1797         /* LLR-Ref: 090 */
// 1798         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1799     }
// 1800 }
// 1801 
// 1802 /*---------------------------------------------------------------------------*/
// 1803 /** \brief <b>ATA_5831ReadRxFifo_C</b>
// 1804     shall read Rx data from the ATA5831 via SPI interface.
// 1805 
// 1806     \param[out] pData Pointer to where the Rx FIFO data shall be stored
// 1807     \param[in] bLen Number of bytes to be read from Rx FIFO
// 1808 
// 1809     Variable Usage:
// 1810     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1811     \li [out] ::g_sDebug Global Debug component data
// 1812     \li [in] ::g_sSpiConfig Global SPI component data
// 1813 
// 1814     \image html ATA_5831ReadRxFifo_C.png
// 1815 
// 1816     \internal
// 1817     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1818                 continue
// 1819              ELSE
// 1820                 goto 090
// 1821     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 1822                 .bConfig[0] goto 020
// 1823              ELSE
// 1824                 goto 040
// 1825     \li 020: Configure data structure ::g_sAta5831
// 1826     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1827              return
// 1828     \li 040: Start the SPI command by setting NSS to low via function 
// 1829              ::ATA_spiSelect_C
// 1830     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1831     \li 060: Write ID and read data bytes via SPI using function 
// 1832              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 1833              SPI and store it in variable 
// 1834                 - ::g_sAta5831 .bEventsSystem
// 1835                 - ::g_sAta5831 .bEventsEvent
// 1836     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1837     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1838              and return
// 1839     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1840              ::g_sDebug .bErrorCode
// 1841 
// 1842     \Derived{No}
// 1843 
// 1844     \Rationale{N/A}
// 1845 
// 1846     \Traceability{Primus2P-966,Primus2P-989}
// 1847     \endinternal
// 1848 \n
// 1849 */
// 1850 /*---------------------------------------------------------------------------*/
// 1851 VOIDFUNC ATA_5831ReadRxFifo_C(uint8_t bLen, uint8_t *pData)
// 1852 {
// 1853     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadRxFifo_C, g_sAta5831.bConfig);
// 1854     /* LLR-Ref: 005 */
// 1855     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1856         /* LLR-Ref: 010 */
// 1857         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1858             /* LLR-Ref: 020 */
// 1859             g_sAta5831.pDataPtr        = pData;
// 1860             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 1861                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG
// 1862                                         | BM_SATA5831_CONFIG_DUMMY_INDICATOR;
// 1863 
// 1864             g_sAta5831.bId             = ATA5831_ID_READ_RX_FIFO;
// 1865             g_sAta5831.bLength         = bLen;
// 1866             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 3U;
// 1867             /* LLR-Ref: 030 */
// 1868             ATA_5831Start_C();
// 1869         } else {                /* spi checksum usage enabled */
// 1870             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1871             /* LLR-Ref: 040 */
// 1872             ATA_spiSelect_C();
// 1873 
// 1874             /* LLR-Ref: 050 */
// 1875             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1876 
// 1877             /* LLR-Ref: 060 */
// 1878             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_RX_FIFO | BIT_MASK_7);
// 1879             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 1880                                        ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 1881             for(uint8_t i = 0; i< bLen; i++) {
// 1882                 *pData++ = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 1883             }
// 1884             ATA_5831DoCheckSumProcessing_C();
// 1885 
// 1886             /* LLR-Ref: 070 */
// 1887             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1888 
// 1889             /* LLR-Ref: 080 */
// 1890             ATA_spiDeselect_C();
// 1891         }
// 1892     }
// 1893     else {
// 1894         /* LLR-Ref: 090 */
// 1895         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1896     }
// 1897 }
// 1898 
// 1899 /*---------------------------------------------------------------------------*/
// 1900 /** \brief <b>ATA_5831ReadFillLevelRxFifo_C</b>
// 1901     shall read the fill level of DFIFO of ATA5831 via SPI interface.
// 1902 
// 1903     \param[out]     pData                   Pointer to where the Rx FIFO Fill Level shall be stored
// 1904 
// 1905     Variable Usage:
// 1906     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1907     \li [out] ::g_sDebug Global Debug component data
// 1908     \li [in] ::g_sSpiConfig Global SPI component data
// 1909 
// 1910     \image html ATA_5831ReadFillLevelRxFifo_C.png
// 1911 
// 1912     \internal
// 1913     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 1914                 continue
// 1915              ELSE
// 1916                 goto 090
// 1917     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 1918                 .bConfig[0] goto 020
// 1919              ELSE
// 1920                 goto 040
// 1921     \li 020: Configure data structure ::g_sAta5831
// 1922     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 1923              return
// 1924     \li 040: Start the SPI command by setting NSS to low via function 
// 1925              ::ATA_spiSelect_C
// 1926     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 1927     \li 060: Write ID and read data bytes via SPI using function 
// 1928              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via
// 1929              SPI and store it in variable
// 1930                 - ::g_sAta5831 .bEventsSystem
// 1931                 - ::g_sAta5831 .bEventsEvent
// 1932     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 1933     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 1934              and return
// 1935     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 1936              ::g_sDebug .bErrorCode
// 1937 
// 1938     \Derived{No}
// 1939 
// 1940     \Rationale{N/A}
// 1941 
// 1942     \Traceability{Primus2P-961,Primus2P-989}
// 1943     \endinternal
// 1944 \n
// 1945 */
// 1946 /*---------------------------------------------------------------------------*/
// 1947 VOIDFUNC ATA_5831ReadFillLevelRxFifo_C(uint8_t *pData)
// 1948 {
// 1949     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadFillLevelRxFifo_C, g_sAta5831.bConfig);
// 1950     /* LLR-Ref: 005 */
// 1951     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 1952         /* LLR-Ref: 010 */
// 1953         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 1954             /* LLR-Ref: 020 */
// 1955             g_sAta5831.pDataPtr        = pData;
// 1956             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 1957 
// 1958             g_sAta5831.bId             = ATA5831_ID_READ_FILL_LEVEL_RX_FIFO;
// 1959             g_sAta5831.bTelegramLength = 3U;
// 1960 
// 1961             /* LLR-Ref: 030 */
// 1962             ATA_5831Start_C();
// 1963         } else {                /* spi checksum usage enabled */
// 1964             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 1965             /* LLR-Ref: 040 */
// 1966             ATA_spiSelect_C();
// 1967 
// 1968             /* LLR-Ref: 050 */
// 1969             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 1970 
// 1971             /* LLR-Ref: 060 */
// 1972             g_sAta5831.bEventsSystem   = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_FILL_LEVEL_RX_FIFO | BIT_MASK_7);
// 1973             g_sAta5831.bEventsEvent    = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 1974             *pData++                   = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 1975             ATA_5831DoCheckSumProcessing_C();
// 1976 
// 1977             /* LLR-Ref: 070 */
// 1978             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 1979 
// 1980             /* LLR-Ref: 080 */
// 1981             ATA_spiDeselect_C();
// 1982         }
// 1983     }
// 1984     else {
// 1985         /* LLR-Ref: 090 */
// 1986         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 1987     }
// 1988 }
// 1989 
// 1990 /*---------------------------------------------------------------------------*/
// 1991 /** \brief <b>ATA_5831ReadFillLevelTxFifo_C</b>
// 1992     shall read the fill level of DFIFO of ATA5831 via SPI interface.
// 1993 
// 1994     \param[out]     pData                   Pointer to where the Tx FIFO Fill Level shall be stored
// 1995 
// 1996     Variable Usage:
// 1997     \li [out] ::g_sAta5831 Global ATA5831 component data
// 1998     \li [out] ::g_sDebug Global Debug component data
// 1999     \li [in] ::g_sSpiConfig Global SPI component data
// 2000     
// 2001     \image html ATA_5831ReadFillLevelTxFifo_C.png
// 2002 
// 2003     \internal
// 2004     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2005                 continue
// 2006              ELSE
// 2007                 goto 090
// 2008     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 2009                 .bConfig[0] goto 020
// 2010              ELSE
// 2011                 goto 040
// 2012     \li 020: Configure data structure ::g_sAta5831
// 2013     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2014              return
// 2015 
// 2016     \li 040: Start the SPI command by setting NSS to low via function 
// 2017              ::ATA_spiSelect_C
// 2018     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2019     \li 060: Write ID and read data bytes via SPI using function 
// 2020              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2021              SPI and store it in variable
// 2022                 - ::g_sAta5831 .bEventsSystem
// 2023                 - ::g_sAta5831 .bEventsEvent
// 2024     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2025     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 2026              and return
// 2027     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2028              ::g_sDebug .bErrorCode
// 2029 
// 2030     \Derived{No}
// 2031 
// 2032     \Rationale{N/A}
// 2033 
// 2034     \Traceability{Primus2P-962,Primus2P-989}
// 2035     \endinternal
// 2036 \n
// 2037 */
// 2038 /*---------------------------------------------------------------------------*/
// 2039 VOIDFUNC ATA_5831ReadFillLevelTxFifo_C(uint8_t *pData)
// 2040 {
// 2041     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadFillLevelTxFifo_C, g_sAta5831.bConfig);
// 2042     /* LLR-Ref: 005 */
// 2043     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2044         /* LLR-Ref: 010 */
// 2045         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2046             /* LLR-Ref: 020 */
// 2047             g_sAta5831.pDataPtr        = pData;
// 2048             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 2049             g_sAta5831.bId             = ATA5831_ID_READ_FILL_LEVEL_TX_FIFO;
// 2050             g_sAta5831.bTelegramLength = 3U;
// 2051 
// 2052             /* LLR-Ref: 030 */
// 2053             ATA_5831Start_C();
// 2054         } else {                /* spi checksum usage enabled */
// 2055             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2056             /* LLR-Ref: 040 */
// 2057             ATA_spiSelect_C();
// 2058 
// 2059             /* LLR-Ref: 050 */
// 2060             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2061 
// 2062             /* LLR-Ref: 060 */
// 2063             g_sAta5831.bEventsSystem   = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_FILL_LEVEL_TX_FIFO | BIT_MASK_7);
// 2064             g_sAta5831.bEventsEvent    = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2065             *pData++                   = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2066             ATA_5831DoCheckSumProcessing_C();
// 2067 
// 2068             /* LLR-Ref: 070 */
// 2069             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2070 
// 2071             /* LLR-Ref: 080 */
// 2072             ATA_spiDeselect_C();
// 2073         }
// 2074     }
// 2075     else {
// 2076         /* LLR-Ref: 090 */
// 2077         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2078     }
// 2079 }
// 2080 
// 2081 /*---------------------------------------------------------------------------*/
// 2082 /** \brief <b>ATA_5831ReadFillLevelRssiFifo_C</b>
// 2083     shall read the fill level of SFIFO of ATA5831 via SPI interface.
// 2084 
// 2085     \param[out]     pData                   Pointer to where the RSSI FIFO Fill Level shall be stored
// 2086 
// 2087     Variable Usage:
// 2088     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2089     \li [out] ::g_sDebug Global Debug component data
// 2090     \li [in] ::g_sSpiConfig Global SPI component data
// 2091 
// 2092     \image html ATA_5831ReadFillLevelRssiFifo_C.png
// 2093 
// 2094     \internal
// 2095     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2096                 continue
// 2097              ELSE
// 2098                 goto 090
// 2099     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 2100                 .bConfig[0] goto 020
// 2101              ELSE
// 2102                 goto 040
// 2103     \li 020: Configure data structure ::g_sAta5831
// 2104     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2105              return
// 2106     \li 040: Start the SPI command by setting NSS to low via function 
// 2107              ::ATA_spiSelect_C
// 2108     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2109     \li 060: Write ID and read data bytes via SPI using function 
// 2110              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2111              SPI and store it in variable
// 2112                 - ::g_sAta5831 .bEventsSystem
// 2113                 - ::g_sAta5831 .bEventsEvent
// 2114     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2115     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 2116              and return
// 2117     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2118              ::g_sDebug .bErrorCode
// 2119 
// 2120     \Derived{No}
// 2121 
// 2122     \Rationale{N/A}
// 2123 
// 2124     \Traceability{Primus2P-963,Primus2P-989}
// 2125     \endinternal
// 2126 \n
// 2127 */
// 2128 /*---------------------------------------------------------------------------*/
// 2129 VOIDFUNC ATA_5831ReadFillLevelRssiFifo_C(uint8_t *pData)
// 2130 {
// 2131     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadFillLevelRssiFifo_C, g_sAta5831.bConfig);
// 2132     /* LLR-Ref: 005 */
// 2133     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2134         /* LLR-Ref: 010 */
// 2135         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2136             /* LLR-Ref: 020 */
// 2137             g_sAta5831.pDataPtr        = pData;
// 2138             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 2139             g_sAta5831.bId             = ATA5831_ID_READ_FILL_LEVEL_RSSI_FIFO;
// 2140             g_sAta5831.bTelegramLength = 3U;
// 2141 
// 2142             /* LLR-Ref: 030 */
// 2143             ATA_5831Start_C();
// 2144         } else {                /* spi checksum usage enabled */
// 2145             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2146             /* LLR-Ref: 040 */
// 2147             ATA_spiSelect_C();
// 2148 
// 2149             /* LLR-Ref: 050 */
// 2150             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2151 
// 2152             /* LLR-Ref: 060 */
// 2153             g_sAta5831.bEventsSystem   = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_FILL_LEVEL_RSSI_FIFO | BIT_MASK_7);
// 2154             g_sAta5831.bEventsEvent    = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2155             *pData++                = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2156             ATA_5831DoCheckSumProcessing_C();
// 2157 
// 2158             /* LLR-Ref: 070 */
// 2159             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2160 
// 2161             /* LLR-Ref: 080 */
// 2162             ATA_spiDeselect_C();
// 2163         }
// 2164     }
// 2165     else {
// 2166         /* LLR-Ref: 090 */
// 2167         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2168     }
// 2169 }
// 2170 
// 2171 /*---------------------------------------------------------------------------*/
// 2172 /** \brief <b>ATA_5831GetEventBytes_C</b>
// 2173     shall read the event bytes from the ATA5831 via SPI interface.
// 2174 
// 2175     Variable Usage:
// 2176     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2177     \li [out] ::g_sDebug Global Debug component data
// 2178     \li [in] ::g_sSpiConfig Global SPI component data
// 2179 
// 2180     \image html ATA_5831GetEventBytes_C.png
// 2181 
// 2182     \internal
// 2183     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2184                 continue
// 2185              ELSE
// 2186                 goto 090
// 2187     \li 010: IF SPi functionality with interrupt usage is selected in ::g_sAta5831 
// 2188                 .bConfig[0] goto 020
// 2189              ELSE
// 2190                 goto 040
// 2191     \li 020: Configure data structure ::g_sAta5831
// 2192     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2193              return
// 2194     \li 040: Start the SPI command by setting NSS to low via function 
// 2195              ::ATA_spiSelect_C
// 2196     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2197     \li 060: Write ID and read data bytes via SPI using function 
// 2198              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2199              SPI and store it in variable
// 2200                 - ::g_sAta5831 .bEventsSystem
// 2201                 - ::g_sAta5831 .bEventsEvent
// 2202     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2203     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 2204              and return
// 2205     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2206              ::g_sDebug .bErrorCode
// 2207 
// 2208     \Derived{No}
// 2209 
// 2210     \Rationale{N/A}
// 2211 
// 2212     \Traceability{Primus2P-964,Primus2P-989}
// 2213     \endinternal
// 2214 \n
// 2215 */
// 2216 /*---------------------------------------------------------------------------*/
// 2217 VOIDFUNC ATA_5831GetEventBytes_C(void)
// 2218 {
// 2219     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831GetEventBytes_C, g_sAta5831.bConfig);
// 2220     /* LLR-Ref: 005 */
// 2221     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2222         /* LLR-Ref: 010 */
// 2223         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2224             /* LLR-Ref: 020 */
// 2225             g_sAta5831.pDataPtr        = &g_sAta5831.bEventsPower;
// 2226             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 2227             g_sAta5831.bId             = ATA5831_ID_GET_EVENT_BYTES;
// 2228             g_sAta5831.bTelegramLength = 4U;
// 2229 
// 2230             /* LLR-Ref: 030 */
// 2231             ATA_5831Start_C();
// 2232         } else {                /* spi checksum usage enabled */
// 2233             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2234             /* LLR-Ref: 040 */
// 2235             ATA_spiSelect_C();
// 2236 
// 2237             /* LLR-Ref: 050 */
// 2238             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2239 
// 2240             /* LLR-Ref: 060 */
// 2241             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_GET_EVENT_BYTES | BIT_MASK_7);
// 2242             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2243             g_sAta5831.bEventsPower  = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2244             g_sAta5831.bEventsConfig = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2245             ATA_5831DoCheckSumProcessing_C();
// 2246 
// 2247             /* LLR-Ref: 070 */
// 2248             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2249 
// 2250             /* LLR-Ref: 080 */
// 2251             ATA_spiDeselect_C();
// 2252         }
// 2253     }
// 2254     else {
// 2255         /* LLR-Ref: 090 */
// 2256         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2257     }
// 2258 }
// 2259 
// 2260 /*---------------------------------------------------------------------------*/
// 2261 /** \brief <b>ATA_5831ReadRssiFifo_C</b>
// 2262     shall read Rssi data from the ATA5831 via SPI interface.
// 2263 
// 2264     \param[out]     pData                   Pointer to where RSSI/Preamble buffer data shall be stored
// 2265     \param[in]      bLen                    Number of bytes to read from the RSSI/Preamble buffer
// 2266 
// 2267     Variable Usage:
// 2268     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2269     \li [out] ::g_sDebug Global Debug component data
// 2270     \li [in] ::g_sSpiConfig Global SPI component data
// 2271     
// 2272     \image html ATA_5831ReadRssiFifo_C.png
// 2273 
// 2274     \internal
// 2275     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2276                 continue
// 2277              ELSE
// 2278                 goto 090
// 2279     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 2280                 .bConfig[0] goto 020
// 2281              ELSE
// 2282                 goto 040
// 2283     \li 020: Configure data structure ::g_sAta5831
// 2284     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2285              return
// 2286     \li 040: Start the SPI command by setting NSS to low via function 
// 2287              ::ATA_spiSelect_C
// 2288     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2289     \li 060: Write ID and read data bytes via SPI using function 
// 2290              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2291              SPI and store it in variable
// 2292                 - ::g_sAta5831 .bEventsSystem
// 2293                 - ::g_sAta5831 .bEventsEvent
// 2294     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2295     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
// 2296              and return
// 2297     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2298              ::g_sDebug .bErrorCode
// 2299 
// 2300     \Derived{No}
// 2301 
// 2302     \Rationale{N/A}
// 2303 
// 2304     \Traceability{Primus2P-965,Primus2P-989}
// 2305     \endinternal
// 2306 \n
// 2307 */
// 2308 /*---------------------------------------------------------------------------*/
// 2309 VOIDFUNC ATA_5831ReadRssiFifo_C(uint8_t bLen, uint8_t *pData)
// 2310 {
// 2311     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831ReadRssiFifo_C, g_sAta5831.bConfig);
// 2312     /* LLR-Ref: 005 */
// 2313     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2314         /* LLR-Ref: 010 */
// 2315         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2316             /* LLR-Ref: 020 */
// 2317             g_sAta5831.pDataPtr        = pData;
// 2318             g_sAta5831.bConfig         =  BM_SATA5831_CONFIG_LENGTH_INDICATOR
// 2319                                         | BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG
// 2320                                         | BM_SATA5831_CONFIG_DUMMY_INDICATOR;
// 2321             g_sAta5831.bId             = ATA5831_ID_READ_RSSI_FIFO;
// 2322             g_sAta5831.bLength         = bLen;
// 2323             g_sAta5831.bTelegramLength = g_sAta5831.bLength + 3U;
// 2324             /* LLR-Ref: 030 */
// 2325             ATA_5831Start_C();
// 2326         } else {                /* spi checksum usage enabled */
// 2327             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2328             /* LLR-Ref: 040 */
// 2329             ATA_spiSelect_C();
// 2330 
// 2331             /* LLR-Ref: 050 */
// 2332             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2333 
// 2334             /* LLR-Ref: 060 */
// 2335             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_READ_RSSI_FIFO | BIT_MASK_7);
// 2336             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(bLen);
// 2337                                     ATA_5831SpiDataExchangeWithChecksum_C(0x00U);
// 2338             for(uint8_t i = 0; i< bLen; i++) {
// 2339                 *pData++ = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2340             }
// 2341             ATA_5831DoCheckSumProcessing_C();
// 2342 
// 2343             /* LLR-Ref: 070 */
// 2344             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2345 
// 2346             /* LLR-Ref: 080 */
// 2347             ATA_spiDeselect_C();
// 2348         }
// 2349     }
// 2350     else {
// 2351         /* LLR-Ref: 090 */
// 2352         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2353     }
// 2354 }
// 2355 
// 2356 /*---------------------------------------------------------------------------*/
// 2357 /** \brief <b>ATA_5831GetRomVersion_C</b>
// 2358     shall read the rom version information from the ATA5831 via SPI interface.
// 2359 
// 2360     \param[out]     pData                   Pointer to where the ROM version of ATA5831 shall be stored
// 2361 
// 2362     Variable Usage:
// 2363     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2364     \li [out] ::g_sDebug Global Debug component data
// 2365     \li [in] ::g_sSpiConfig Global SPI component data
// 2366     
// 2367     \image html ATA_5831GetRomVersion_C.png
// 2368 
// 2369     \internal
// 2370     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2371                 continue
// 2372              ELSE
// 2373                 goto 090
// 2374     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831 
// 2375                 .bConfig[0] goto 020
// 2376              ELSE
// 2377                 goto 040
// 2378     \li 020: Configure data structure ::g_sAta5831
// 2379     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2380              return
// 2381     \li 040: Start the SPI command by setting NSS to low via function 
// 2382              ::ATA_spiSelect_C
// 2383     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2384     \li 060: Write ID and read data bytes via SPI using function 
// 2385              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2386              SPI and store it in variable
// 2387                 - ::g_sAta5831 .bEventsSystem
// 2388                 - ::g_sAta5831 .bEventsEvent
// 2389     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2390     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C
// 2391              and return
// 2392     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2393              ::g_sDebug .bErrorCode
// 2394 
// 2395     \Derived{No}
// 2396 
// 2397     \Rationale{N/A}
// 2398 
// 2399     \Traceability{Primus2P-959,Primus2P-989}
// 2400     \endinternal
// 2401 \n
// 2402 */
// 2403 /*---------------------------------------------------------------------------*/
// 2404 VOIDFUNC ATA_5831GetRomVersion_C(uint8_t *pData)
// 2405 {
// 2406     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831GetRomVersion_C, g_sAta5831.bConfig);
// 2407     /* LLR-Ref: 005 */
// 2408     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2409         /* LLR-Ref: 010 */
// 2410         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2411             /* LLR-Ref: 020 */
// 2412             g_sAta5831.pDataPtr        = pData;
// 2413             g_sAta5831.bConfig         = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 2414             g_sAta5831.bId             = ATA5831_ID_GET_ROM_VERSION;
// 2415             g_sAta5831.bTelegramLength = 3U;
// 2416 
// 2417             /* LLR-Ref: 030 */
// 2418             ATA_5831Start_C();
// 2419         } else {                /* spi checksum usage enabled */
// 2420             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2421             /* LLR-Ref: 040 */
// 2422             ATA_spiSelect_C();
// 2423 
// 2424             /* LLR-Ref: 050 */
// 2425             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2426 
// 2427             /* LLR-Ref: 060 */
// 2428             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_GET_ROM_VERSION | BIT_MASK_7);
// 2429             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2430             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2431             ATA_5831DoCheckSumProcessing_C();
// 2432 
// 2433             /* LLR-Ref: 070 */
// 2434             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2435 
// 2436             /* LLR-Ref: 080 */
// 2437             ATA_spiDeselect_C();
// 2438         }
// 2439     }
// 2440     else {
// 2441         /* LLR-Ref: 090 */
// 2442         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2443     }
// 2444 }
// 2445 
// 2446 /*---------------------------------------------------------------------------*/
// 2447 /** \brief <b>ATA_5831GetFlashVersion_C</b>
// 2448     shall read the flash version information from the ATA5831 via SPI interface.
// 2449 
// 2450     \param[out] pData Pointer to where the FLASH version of ATA5831 shall be stored
// 2451 
// 2452     Variable Usage:
// 2453     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2454     \li [out] ::g_sDebug Global Debug component data
// 2455     \li [in] ::g_sSpiConfig Global SPI component data
// 2456 
// 2457     \image html ATA_5831GetFlashVersion_C.png
// 2458 
// 2459     \internal
// 2460     \li 005: IF SPI is initialized (check with flag ::g_sSpiConfig .bStatus[7])
// 2461                 continue
// 2462              ELSE
// 2463                 goto 090
// 2464     \li 010: IF SPI functionality with interrupt usage is selected in ::g_sAta5831
// 2465                 .bConfig[0] goto 020
// 2466              ELSE
// 2467                 goto 040
// 2468     \li 020: Configure data structure ::g_sAta5831
// 2469     \li 030: Start SPI communication by calling function ::ATA_5831Start_C and 
// 2470              return
// 2471     \li 040: Start the SPI command by setting NSS to low via function 
// 2472              ::ATA_spiSelect_C
// 2473     \li 050: Wait ::g_sAta5831 .bNssLowSckDelay us before starting data transmission
// 2474     \li 060: Write ID and read data bytes via SPI using function 
// 2475              ::ATA_5831SpiDataExchangeWithChecksum_C read back the event bytes via 
// 2476              SPI and store it in variable
// 2477                 - ::g_sAta5831 .bEventsSystem
// 2478                 - ::g_sAta5831 .bEventsEvent
// 2479     \li 070: Wait ::g_sAta5831 .bSckNssHighDelay us after last data transmission
// 2480     \li 080: Close SPI communication be setting NSS to high via ::ATA_spiDeselect_C 
// 2481              and return
// 2482     \li 090: Signal error code DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED via variable 
// 2483              ::g_sDebug .bErrorCode
// 2484 
// 2485     \Derived{No}
// 2486 
// 2487     \Rationale{N/A}
// 2488 
// 2489     \Traceability{Primus2P-960,Primus2P-989}
// 2490     \endinternal
// 2491 \n
// 2492 */
// 2493 /*---------------------------------------------------------------------------*/
// 2494 VOIDFUNC ATA_5831GetFlashVersion_C(uint8_t *pData)
// 2495 {
// 2496     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831GetFlashVersion_C, g_sAta5831.bConfig);
// 2497     /* LLR-Ref: 005 */
// 2498     if (g_sSpiConfig.bStatus & BM_SPICONFIG_STATUS_INITIALIZATION_STATUS) {
// 2499         /* LLR-Ref: 010 */
// 2500         if (g_sAta5831.bConfig & BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG) {    /* with interupt usage */
// 2501             /* LLR-Ref: 020 */
// 2502             g_sAta5831.pDataPtr         = pData;
// 2503             g_sAta5831.bConfig          = BM_SATA5831_CONFIG_TELEGRAM_MODE_FLAG;
// 2504             g_sAta5831.bId              = ATA5831_ID_GET_FLASH_VERSION;
// 2505             g_sAta5831.bTelegramLength  = 6U;
// 2506 
// 2507             /* LLR-Ref: 030 */
// 2508             ATA_5831Start_C();
// 2509         } else {                /* spi checksum usage enabled */
// 2510             g_sAta5831.bChecksumMiso = g_sAta5831.bChecksumMosi = 0x00U;
// 2511             /* LLR-Ref: 040 */
// 2512             ATA_spiSelect_C();
// 2513 
// 2514             /* LLR-Ref: 050 */
// 2515             ATA_globalsWaitNus_ASM(g_sAta5831.bNssLowSckDelay);
// 2516 
// 2517             /* LLR-Ref: 060 */
// 2518             g_sAta5831.bEventsSystem = ATA_5831SpiDataExchangeWithChecksum_C(ATA5831_ID_GET_FLASH_VERSION | BIT_MASK_7);
// 2519             g_sAta5831.bEventsEvent  = ATA_5831SpiDataExchangeWithChecksum_C(0x00);
// 2520 
// 2521             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00); /* rom version */
// 2522             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00); /* flash version high byte */
// 2523             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00); /* flash version low byte */
// 2524             *pData++                 = ATA_5831SpiDataExchangeWithChecksum_C(0x00); /* customer specific version */
// 2525             ATA_5831DoCheckSumProcessing_C();
// 2526 
// 2527             /* LLR-Ref: 070 */
// 2528             ATA_globalsWaitNus_ASM(g_sAta5831.bSckNssHighDelay);
// 2529 
// 2530             /* LLR-Ref: 080 */
// 2531             ATA_spiDeselect_C();
// 2532         }
// 2533     }
// 2534     else {
// 2535         /* LLR-Ref: 090 */
// 2536         g_sDebug.bErrorCode = DEBUG_ERROR_CODE_SPI_NOT_INITIALIZED;
// 2537     }
// 2538 }
// 2539 
// 2540 
// 2541 /*---------------------------------------------------------------------------*/
// 2542 /** \brief <b>ATA_5831Init_C</b>
// 2543     shall shall initialize the variable g_sAta5831
// 2544     \param[in] bConfig ATA5831 component configuration 
// 2545     \param[in] bNssSck Defines the delay between falling edge of NSS and beginning of first SCK cycle in MRC cycles
// 2546     \param[in] bSckNss Defines the delay between last SCK cycle and rising edge of NSS in MRC cycles
// 2547 
// 2548     Variable Usage:
// 2549     \li [out] ::g_sAta5831 Global ATA5831 component data
// 2550    
// 2551     \image html ATA_5831Start_C.png
// 2552 
// 2553     \internal
// 2554     \li 010: Initialize variable ::g_sAta5831 according to the function parameters
// 2555     \li 020: Open SPI using function ::ATA_spiOpen_C
// 2556 
// 2557     \Derived{Yes}
// 2558 
// 2559     \Rationale{This function is a helper function in order to implement the ATA5831
// 2560                component handling}
// 2561 
// 2562     \Traceability   N/A
// 2563     \endinternal
// 2564 \n
// 2565 */
// 2566 /*---------------------------------------------------------------------------*/
// 2567 VOIDFUNC ATA_5831Init_C(uint8_t bConfig, uint8_t bNssSck, uint8_t bSckNss)
// 2568 {
// 2569     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831Init_C, bConfig);
// 2570     /* LLR-Ref: 010*/
// 2571     g_sAta5831.bConfig          = bConfig;
// 2572     g_sAta5831.pDataPtr         = 0x0000U;
// 2573     g_sAta5831.bNssLowSckDelay  = bNssSck;
// 2574     g_sAta5831.bSckNssHighDelay = bSckNss;
// 2575     g_sAta5831.bEventsSystem    = 0x00U;
// 2576     g_sAta5831.bEventsEvent     = 0x00U;
// 2577     g_sAta5831.bEventsPower     = 0x00U;
// 2578     g_sAta5831.bEventsConfig    = 0x00U;
// 2579     g_sAta5831.bChecksumMiso    = 0x00U;
// 2580     g_sAta5831.bChecksumMosi    = 0x00U;
// 2581     
// 2582     /* LLR-Ref: 020*/
// 2583     ATA_spiOpen_C((BM_SPE | BM_MSTR | BM_SPR0),0U);
// 2584 }
// 2585 
// 2586 /*---------------------------------------------------------------------------*/
// 2587 /** \brief <b>ATA_5831Close_C</b>
// 2588     shall close the ATA5831 command set.
// 2589 
// 2590     \image html ATA_5831Close_C.png
// 2591 
// 2592     \internal
// 2593     \li 010: Close the SPI interface using ::ATA_spiClose_C
// 2594 
// 2595     \Derived{Yes}
// 2596 
// 2597     \Rationale{This function is a helper function in order to implement the ATA5831
// 2598                component handling}
// 2599 
// 2600     \Traceability   N/A
// 2601     \endinternal
// 2602 \n
// 2603 */
// 2604 /*---------------------------------------------------------------------------*/
// 2605 VOIDFUNC ATA_5831Close_C(void)
// 2606 {
// 2607     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831Close_C, 0);
// 2608     /* LLR-Ref: 010 */
// 2609     ATA_spiClose_C();
// 2610 }
// 2611 
// 2612 /*---------------------------------------------------------------------------*/
// 2613 /** \brief <b>ATA_5831Start_C</b>
// 2614     shall start the spi communication with interrupt usage.
// 2615 
// 2616     Variable Usage:
// 2617     \li [in,out]  ::g_sAta5831            Global ATA5831 component data
// 2618     \li [out]     ::g_sSpiConfig          Global SPI component data
// 2619 
// 2620     \image html ATA_5831Start_C.png
// 2621 
// 2622         Note
// 2623         For the SPI Master for ATA5831 to work correctly with e.g. the MRC,
// 2624         the timer 1 clock needs to be reassigned to use the MRC as input clock,
// 2625         i.e. BM_T1CS1|BM_T1CS0.
// 2626 
// 2627     \internal
// 2628     \li 010: Initialize ::g_sSpiConfig .pAddress and ::g_sAta5831 .bRxLength for 
// 2629              interrupt routines
// 2630     \li 020: Set NSS low to indicate SPI communication
// 2631     \li 030: Clear SPI interrupt flags in SFFR Register
// 2632     \li 040: Enable Timer 1
// 2633                 - Power up timer 1 by clearing PRR1.PRT1
// 2634                 - Initialize T1COR register with content of ::g_sAta5831 
// 2635                   .bNssLowSckDelay
// 2636                 - Reset timer 1 by setting T1CR.T1RES
// 2637                 - Open timer 1 by using function ::ATA_timer1Open_C
// 2638 
// 2639     \Derived{Yes}
// 2640 
// 2641     \Rationale{This function is a helper function in order to implement the ATA5831
// 2642                component handling}
// 2643 
// 2644     \Traceability   N/A
// 2645     \endinternal
// 2646 \n
// 2647 */
// 2648 /*---------------------------------------------------------------------------*/
// 2649 VOIDFUNC ATA_5831Start_C(void)
// 2650 {
// 2651     /* Timer 1 configuration parameters */
// 2652     sTimerAsyn8BitParams sTimer1Params;
// 2653   
// 2654     ATA_SET_FUNCTION_TRACE_POINT_C(ATA_5831Start_C, 0);
// 2655 
// 2656     /* LLR-Ref: 010 */
// 2657     g_sSpiConfig.pAddress = g_sAta5831.pDataPtr;
// 2658     g_sAta5831.bRxLength  = g_sAta5831.bTelegramLength;
// 2659     
// 2660     /* LLR-Ref: 020 */
// 2661     PORTD &= (uint8_t)~BM_SPI_NSS_PIN;
// 2662 
// 2663     /* LLR-Ref: 030 */
// 2664     SFFR  |= BM_TFC | BM_RFC;
// 2665     SFIR   = 0x07U;
// 2666 
// 2667     /* LLR-Ref: 040 */
// 2668     sTimer1Params.ctrl = BM_T1ENA;
// 2669     sTimer1Params.mode = BM_T1CS0;
// 2670     sTimer1Params.comp = g_sAta5831.bNssLowSckDelay;
// 2671     sTimer1Params.irqMask = BM_T1CIM;
// 2672     sTimer1Params.ovfIsr = (timerIRQHandler)0x0000;
// 2673     sTimer1Params.compIsr = ATA_5831CommandTimer1Isr_ASM;
// 2674     
// 2675     ATA_timer1Open_C(&sTimer1Params);
// 2676 
// 2677 }
// 2678 
// 2679 /*---------------------------------------------------------------------------*/
// 2680 /** \brief <b>ATA_5831SpiDataExchangeWithChecksum_C</b>
// 2681     sends a byte via SPI interface and returns the response.
// 2682 
// 2683     \param[in]      bData                   Data byte to be sent
// 2684     \return         Received data byte
// 2685     
// 2686     Variable Usage:
// 2687     \li [in,out] ::g_sAta5831 Global ATA5831 component data
// 2688 
// 2689     \image html ATA_5831SpiDataExchangeWithChecksum_C.png
// 2690 
// 2691     \internal
// 2692 
// 2693     \li 010: Write given byte "bData" to the SPI interface via regiser SPDR and add
// 2694              byte to future checksum byte ::g_sAta5831 .bChecksumMosi.
// 2695 
// 2696     \li 020: Wait until serial transfer of byte "bData" is completed. 
// 2697 
// 2698     \li 030: Read byte from SPI interface via register SPDR and add
// 2699              content to received data (until now) in ::g_sAta5831 .bChecksumMiso to 
// 2700              compute the SPI checksum
// 2701 
// 2702     \Derived{No}
// 2703 
// 2704     \Rationale{N/A}
// 2705 
// 2706     \Traceability{Primus2P-2532}
// 2707     \endinternal
// 2708 \n
// 2709 */
// 2710 /*---------------------------------------------------------------------------*/

        RSEG CODE:CODE:ROOT(1)
// 2711 static UINT8FUNC ATA_5831SpiDataExchangeWithChecksum_C(uint8_t bData)
ATA_5831SpiDataExchangeWithChecksum_C:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ATA_5831SpiDataExchangeWithChecksum_C
          CFI NoCalls
// 2712 {
// 2713     uint8_t bMisoData = 0U;
// 2714     
// 2715     /* LLR-Ref: 010 */
// 2716     SPDR = bData;
        OUT     0x2E, R16
// 2717     g_sAta5831.bChecksumMosi += bData;
        LDS     R17, (g_sAta5831 + 17)
        ADD     R17, R16
        STS     (g_sAta5831 + 17), R17
// 2718     
// 2719     /* LLR-Ref: 020 */
// 2720     while(!(SPSR & BM_SPIF));
??ATA_5831SpiDataExchangeWithChecksum_C_0:
        IN      R16, 0x2D
        SBRS    R16, 7
        RJMP    ??ATA_5831SpiDataExchangeWithChecksum_C_0
// 2721     
// 2722     /* LLR-Ref: 030 */
// 2723     bMisoData = SPDR;
        IN      R16, 0x2E
// 2724     g_sAta5831.bChecksumMiso += bMisoData;
        LDS     R17, (g_sAta5831 + 16)
        ADD     R17, R16
        STS     (g_sAta5831 + 16), R17
// 2725     
// 2726     return bMisoData;
        RET
          CFI EndBlock cfiBlock0
        REQUIRE _A_SPDR
        REQUIRE _A_SPSR
// 2727 }

        RSEG CODE:CODE:ROOT(1)
ATA_5831DoCheckSumProcessing_C:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 17)
        COM     R16
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDS     R16, (g_sAta5831 + 16)
        CPI     R16, 255
        BREQ    ??ATA_5831DoCheckSumProcessing_C_0
        LDI     R16, 30
        STS     g_sDebug, R16
        LDI     R16, 0
        STS     (g_sDebug + 1), R16
??ATA_5831DoCheckSumProcessing_C_0:
        RET
          CFI EndBlock cfiBlock1

        RSEG CODE:CODE:ROOT(1)
ATA_5831Start_C:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ATA_5831Start_C
        SBIW    R29:R28, 8
          CFI CFA_Y Y+8
        IN      R18, 0x3F
        CLI
        LDI     R16, 0
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831Start_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831Start_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sAta5831
        LDS     R17, (g_sAta5831 + 1)
        STS     (g_sSpiConfig + 3), R16
        STS     (g_sSpiConfig + 4), R17
        LDS     R16, (g_sAta5831 + 14)
        STS     (g_sAta5831 + 13), R16
        CBI     0x0B, 0x01
        LDS     R16, _A_SFFR
        ORI     R16, 0x88
        STS     _A_SFFR, R16
        LDI     R16, 7
        STS     _A_SFIR, R16
        LDI     R16, 128
        ST      Y, R16
        LDI     R16, 1
        STD     Y+1, R16
        LDS     R16, (g_sAta5831 + 2)
        STD     Y+2, R16
        LDI     R16, 2
        STD     Y+3, R16
        LDI     R16, LOW(0)
        STD     Y+4, R16
        STD     Y+5, R16
        LDI     R16, LOW(ATA_5831CommandTimer1Isr_ASM/2)
        LDI     R17, (ATA_5831CommandTimer1Isr_ASM/2) >> 8
        STD     Y+6, R16
        STD     Y+7, R17
        MOVW    R17:R16, R29:R28
          CFI FunCall ATA_timer1Open_C
        CALL    ATA_timer1Open_C
        ADIW    R29:R28, 8
          CFI CFA_Y Y+0
        RET
          CFI EndBlock cfiBlock2
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        REQUIRE _A_PORTD
        REQUIRE _A_SFFR
        REQUIRE _A_SFIR

        RSEG CODE:CODE:ROOT(1)
ATA_5831GetRssiValue_C:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ATA_5831GetRssiValue_C
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R27:R26, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831GetRssiValue_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831GetRssiValue_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831GetRssiValue_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831GetRssiValue_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 28
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 4
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831GetRssiValue_C_2
??ATA_5831GetRssiValue_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 156
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X+, R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831GetRssiValue_C_2
??ATA_5831GetRssiValue_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
        LDI     R16, 0
        STS     (g_sDebug + 1), R16
??ATA_5831GetRssiValue_C_2:
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine1

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+2
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
        LD      R26, Y+
          CFI CFA_Y Y+1
          CFI R26 SameValue
        LD      R27, Y+
          CFI CFA_Y Y+0
          CFI R27 SameValue
        RET
          CFI EndBlock cfiBlock4

        RSEG CODE:CODE:ROOT(1)
ATA_5831StartRssiMeasurement_C:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ATA_5831StartRssiMeasurement_C
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        MOV     R24, R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831StartRssiMeasurement_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831StartRssiMeasurement_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831StartRssiMeasurement_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831StartRssiMeasurement_C_1
        STS     m_bAta5831Buffer, R24
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 27
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 2
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831StartRssiMeasurement_C_2
??ATA_5831StartRssiMeasurement_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 155
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831StartRssiMeasurement_C_2
??ATA_5831StartRssiMeasurement_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831StartRssiMeasurement_C_2:
          CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine3
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine3

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+1
          CFI R24 Frame(CFA_Y, -1)
        LD      R24, Y+
          CFI CFA_Y Y+0
          CFI R24 SameValue
        RET
          CFI EndBlock cfiBlock6

        RSEG CODE:CODE:ROOT(1)
ATA_5831InitSramService_C:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ATA_5831InitSramService_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831InitSramService_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831InitSramService_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831InitSramService_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831InitSramService_C_1
        STS     m_bAta5831Buffer, R24
        STS     (m_bAta5831Buffer + 1), R17
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 26
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831InitSramService_C_2
??ATA_5831InitSramService_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 154
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831InitSramService_C_2
??ATA_5831InitSramService_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831InitSramService_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock7
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadTemperatureValue_C:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ATA_5831ReadTemperatureValue_C
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R27:R26, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadTemperatureValue_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadTemperatureValue_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadTemperatureValue_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadTemperatureValue_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 25
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 4
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadTemperatureValue_C_2
??ATA_5831ReadTemperatureValue_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 153
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X+, R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadTemperatureValue_C_2
??ATA_5831ReadTemperatureValue_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadTemperatureValue_C_2:
        RJMP    ?Subroutine1
          CFI EndBlock cfiBlock8
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831OffCommand_C:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ATA_5831OffCommand_C
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831OffCommand_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831OffCommand_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831OffCommand_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831OffCommand_C_1
        LDI     R16, 0
        STS     m_bAta5831Buffer, R16
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 24
        RJMP    ?Subroutine5
??ATA_5831OffCommand_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 152
        RJMP    ?Subroutine4
??ATA_5831OffCommand_C_0:
        RJMP    ?Subroutine0
          CFI EndBlock cfiBlock9
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831SetVoltageMonitor_C:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ATA_5831SetVoltageMonitor_C
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        MOV     R24, R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831SetVoltageMonitor_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831SetVoltageMonitor_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831SetVoltageMonitor_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831SetVoltageMonitor_C_1
        STS     m_bAta5831Buffer, R24
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 23
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 2
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831SetVoltageMonitor_C_2
??ATA_5831SetVoltageMonitor_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 151
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831SetVoltageMonitor_C_2
??ATA_5831SetVoltageMonitor_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831SetVoltageMonitor_C_2:
        RJMP    ?Subroutine3
          CFI EndBlock cfiBlock10
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831TriggerEepromSecureWrite_C:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ATA_5831TriggerEepromSecureWrite_C
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831TriggerEepromSecureWrite_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831TriggerEepromSecureWrite_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831TriggerEepromSecureWrite_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831TriggerEepromSecureWrite_C_1
        LDI     R16, 170
        STS     m_bAta5831Buffer, R16
        LDI     R16, 204
        STS     (m_bAta5831Buffer + 1), R16
        LDI     R16, 240
        STS     (m_bAta5831Buffer + 2), R16
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 22
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 4
        RJMP    ??Subroutine8_0
??ATA_5831TriggerEepromSecureWrite_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 150
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 170
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 204
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R16, 240
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        RJMP    ??Subroutine9_0
??ATA_5831TriggerEepromSecureWrite_C_0:
        RJMP    ?Subroutine0
          CFI EndBlock cfiBlock11
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831SystemReset_C:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ATA_5831SystemReset_C
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831SystemReset_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831SystemReset_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831SystemReset_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831SystemReset_C_1
        LDI     R16, 0
        STS     m_bAta5831Buffer, R16
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 21
        RJMP    ?Subroutine5
??ATA_5831SystemReset_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 149
        RJMP    ?Subroutine4
??ATA_5831SystemReset_C_0:
          CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine0
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
        LDI     R16, 28
        STS     g_sDebug, R16
        RET
          CFI EndBlock cfiBlock13

        RSEG CODE:CODE:ROOT(1)
ATA_5831CustomerConfigurableCommand_C:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ATA_5831CustomerConfigurableCommand_C
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831CustomerConfigurableCommand_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831CustomerConfigurableCommand_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831CustomerConfigurableCommand_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831CustomerConfigurableCommand_C_1
        LDI     R16, 0
        STS     m_bAta5831Buffer, R16
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 20
        RJMP    ?Subroutine5
??ATA_5831CustomerConfigurableCommand_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 148
        RJMP    ?Subroutine4
??ATA_5831CustomerConfigurableCommand_C_0:
        RJMP    ?Subroutine0
          CFI EndBlock cfiBlock14
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 2
          CFI EndBlock cfiBlock15
        REQUIRE ??Subroutine8_0
        ;               // Fall through to label ??Subroutine8_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine8_0:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831TriggerEepromSecureWrite_C ATA_5831Start_C
          CFI FunCall ATA_5831GetEventBytes_C ATA_5831Start_C
          CFI FunCall ATA_5831OffCommand_C ATA_5831Start_C
          CFI FunCall ATA_5831SystemReset_C ATA_5831Start_C
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_5831Start_C
        RJMP    ATA_5831Start_C
          CFI EndBlock cfiBlock16

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI FunCall ATA_5831OffCommand_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831SystemReset_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831OffCommand_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831SystemReset_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
          CFI EndBlock cfiBlock17
        REQUIRE ??Subroutine9_0
        ;               // Fall through to label ??Subroutine9_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine9_0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI FunCall ATA_5831TriggerEepromSecureWrite_C ATA_5831DoCheckSumProcessing_C
          CFI FunCall ATA_5831GetEventBytes_C ATA_5831DoCheckSumProcessing_C
          CFI FunCall ATA_5831OffCommand_C ATA_5831DoCheckSumProcessing_C
          CFI FunCall ATA_5831SystemReset_C ATA_5831DoCheckSumProcessing_C
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_5831TriggerEepromSecureWrite_C ATA_globalsWaitNus_ASM
          CFI FunCall ATA_5831GetEventBytes_C ATA_globalsWaitNus_ASM
          CFI FunCall ATA_5831OffCommand_C ATA_globalsWaitNus_ASM
          CFI FunCall ATA_5831SystemReset_C ATA_globalsWaitNus_ASM
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_5831TriggerEepromSecureWrite_C ATA_spiDeselect_C
          CFI FunCall ATA_5831GetEventBytes_C ATA_spiDeselect_C
          CFI FunCall ATA_5831OffCommand_C ATA_spiDeselect_C
          CFI FunCall ATA_5831SystemReset_C ATA_spiDeselect_C
          CFI FunCall ATA_5831CustomerConfigurableCommand_C ATA_spiDeselect_C
        JMP     ATA_spiDeselect_C
          CFI EndBlock cfiBlock18

        RSEG CODE:CODE:ROOT(1)
ATA_5831PatchSpi_C:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ATA_5831PatchSpi_C
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        MOV     R24, R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831PatchSpi_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831PatchSpi_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831PatchSpi_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831PatchSpi_C_1
        STS     m_bAta5831Buffer, R24
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 15
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 2
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831PatchSpi_C_2
??ATA_5831PatchSpi_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 143
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831PatchSpi_C_2
??ATA_5831PatchSpi_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831PatchSpi_C_2:
        RJMP    ?Subroutine3
          CFI EndBlock cfiBlock19
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831CalibrateAndCheck_C:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ATA_5831CalibrateAndCheck_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831CalibrateAndCheck_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831CalibrateAndCheck_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831CalibrateAndCheck_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831CalibrateAndCheck_C_1
        STS     m_bAta5831Buffer, R24
        STS     (m_bAta5831Buffer + 1), R17
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 14
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831CalibrateAndCheck_C_2
??ATA_5831CalibrateAndCheck_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 142
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831CalibrateAndCheck_C_2
??ATA_5831CalibrateAndCheck_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831CalibrateAndCheck_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock20
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831SetSystemMode_C:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ATA_5831SetSystemMode_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831SetSystemMode_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831SetSystemMode_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831SetSystemMode_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831SetSystemMode_C_1
        STS     m_bAta5831Buffer, R24
        STS     (m_bAta5831Buffer + 1), R17
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 129
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 13
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831SetSystemMode_C_2
??ATA_5831SetSystemMode_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 141
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831SetSystemMode_C_2
??ATA_5831SetSystemMode_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831SetSystemMode_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock21
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831WriteTxPreambleFifo_C:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ATA_5831WriteTxPreambleFifo_C
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOV     R24, R16
        MOVW    R27:R26, R19:R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831WriteTxPreambleFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831WriteTxPreambleFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831WriteTxPreambleFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831WriteTxPreambleFifo_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R19
        LDI     R16, 193
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 12
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 12), R24
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 254
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831WriteTxPreambleFifo_C_2
??ATA_5831WriteTxPreambleFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 140
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R18, 0
        RJMP    ??ATA_5831WriteTxPreambleFifo_C_3
??ATA_5831WriteTxPreambleFifo_C_4:
        LD      R16, X+
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        INC     R18
??ATA_5831WriteTxPreambleFifo_C_3:
        CP      R18, R24
        BRCS    ??ATA_5831WriteTxPreambleFifo_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831WriteTxPreambleFifo_C_2
??ATA_5831WriteTxPreambleFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831WriteTxPreambleFifo_C_2:
        RJMP    ?Subroutine6
          CFI EndBlock cfiBlock22
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831WriteTxFifo_C:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ATA_5831WriteTxFifo_C
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOV     R24, R16
        MOVW    R27:R26, R19:R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831WriteTxFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831WriteTxFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831WriteTxFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831WriteTxFifo_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R19
        LDI     R16, 193
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 11
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 12), R24
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 254
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831WriteTxFifo_C_2
??ATA_5831WriteTxFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 139
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R18, 0
        RJMP    ??ATA_5831WriteTxFifo_C_3
??ATA_5831WriteTxFifo_C_4:
        LD      R16, X+
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        INC     R18
??ATA_5831WriteTxFifo_C_3:
        CP      R18, R24
        BRCS    ??ATA_5831WriteTxFifo_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831WriteTxFifo_C_2
??ATA_5831WriteTxFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831WriteTxFifo_C_2:
        RJMP    ?Subroutine6
          CFI EndBlock cfiBlock23
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadEeprom_C:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ATA_5831ReadEeprom_C
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOVW    R25:R24, R17:R16
        MOVW    R27:R26, R19:R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadEeprom_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadEeprom_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadEeprom_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadEeprom_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R19
        LDI     R16, 49
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 10
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 1
        STS     (g_sAta5831 + 12), R16
        STS     (g_sAta5831 + 10), R24
        STS     (g_sAta5831 + 11), R17
        LDI     R16, 5
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadEeprom_C_2
??ATA_5831ReadEeprom_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 138
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadEeprom_C_2
??ATA_5831ReadEeprom_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadEeprom_C_2:
          CFI EndBlock cfiBlock24
        REQUIRE ?Subroutine6
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine6

        RSEG CODE:CODE:NOROOT(1)
?Subroutine6:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+4
          CFI R24 Frame(CFA_Y, -4)
          CFI R25 Frame(CFA_Y, -3)
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
          CFI EndBlock cfiBlock25

        RSEG CODE:CODE:ROOT(1)
ATA_5831WriteEeprom_C:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ATA_5831WriteEeprom_C
        CALL    ?PROLOGUE3_L09
          CFI R26 Frame(CFA_Y, -1)
          CFI R25 Frame(CFA_Y, -2)
          CFI R24 Frame(CFA_Y, -3)
          CFI CFA_Y Y+3
        MOVW    R25:R24, R17:R16
        MOV     R26, R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831WriteEeprom_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831WriteEeprom_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831WriteEeprom_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831WriteEeprom_C_1
        STS     m_bAta5831Buffer, R26
        LDI     R16, LOW(m_bAta5831Buffer)
        LDI     R17, (m_bAta5831Buffer) >> 8
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 161
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 9
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 10), R24
        STS     (g_sAta5831 + 11), R25
        LDI     R16, 4
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831WriteEeprom_C_2
??ATA_5831WriteEeprom_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 137
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOV     R16, R26
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831WriteEeprom_C_2
??ATA_5831WriteEeprom_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831WriteEeprom_C_2:
        LDI     R30, 3
        JMP     ?EPILOGUE_B3_L09
          CFI EndBlock cfiBlock26
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadSramRegister_C:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function ATA_5831ReadSramRegister_C
        CALL    ?PROLOGUE5_L09
          CFI R4 Frame(CFA_Y, -1)
          CFI R27 Frame(CFA_Y, -2)
          CFI R26 Frame(CFA_Y, -3)
          CFI R25 Frame(CFA_Y, -4)
          CFI R24 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        REQUIRE ?Register_R4_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOV     R4, R18
        MOVW    R27:R26, R21:R20
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadSramRegister_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadSramRegister_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadSramRegister_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadSramRegister_C_1
        STS     g_sAta5831, R20
        STS     (g_sAta5831 + 1), R21
        LDI     R16, 113
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 8
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 12), R4
        STS     (g_sAta5831 + 10), R24
        STS     (g_sAta5831 + 11), R17
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 251
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadSramRegister_C_2
??ATA_5831ReadSramRegister_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 136
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R4
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R18, 0
        RJMP    ??ATA_5831ReadSramRegister_C_3
??ATA_5831ReadSramRegister_C_4:
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X+, R16
        INC     R18
??ATA_5831ReadSramRegister_C_3:
        CP      R18, R4
        BRCS    ??ATA_5831ReadSramRegister_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadSramRegister_C_2
??ATA_5831ReadSramRegister_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadSramRegister_C_2:
          CFI EndBlock cfiBlock27
        REQUIRE ?Subroutine7
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine7

        RSEG CODE:CODE:NOROOT(1)
?Subroutine7:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+5
          CFI R4 Frame(CFA_Y, -1)
          CFI R24 Frame(CFA_Y, -5)
          CFI R25 Frame(CFA_Y, -4)
          CFI R26 Frame(CFA_Y, -3)
          CFI R27 Frame(CFA_Y, -2)
        LDI     R30, 5
        JMP     ?EPILOGUE_B5_L09
          CFI EndBlock cfiBlock28

        RSEG CODE:CODE:ROOT(1)
ATA_5831WriteSramRegister_C:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ATA_5831WriteSramRegister_C
        CALL    ?PROLOGUE5_L09
          CFI R4 Frame(CFA_Y, -1)
          CFI R27 Frame(CFA_Y, -2)
          CFI R26 Frame(CFA_Y, -3)
          CFI R25 Frame(CFA_Y, -4)
          CFI R24 Frame(CFA_Y, -5)
          CFI CFA_Y Y+5
        REQUIRE ?Register_R4_is_cg_reg
        MOVW    R25:R24, R17:R16
        MOV     R4, R18
        MOVW    R27:R26, R21:R20
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831WriteSramRegister_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831WriteSramRegister_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831WriteSramRegister_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831WriteSramRegister_C_1
        STS     g_sAta5831, R20
        STS     (g_sAta5831 + 1), R21
        LDI     R16, 225
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 7
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 10), R24
        STS     (g_sAta5831 + 11), R17
        STS     (g_sAta5831 + 12), R4
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 252
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831WriteSramRegister_C_2
??ATA_5831WriteSramRegister_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 135
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R4
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        MOV     R16, R25
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R18, 0
        RJMP    ??ATA_5831WriteSramRegister_C_3
??ATA_5831WriteSramRegister_C_4:
        LD      R16, X+
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        INC     R18
??ATA_5831WriteSramRegister_C_3:
        CP      R18, R4
        BRCS    ??ATA_5831WriteSramRegister_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831WriteSramRegister_C_2
??ATA_5831WriteSramRegister_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831WriteSramRegister_C_2:
        RJMP    ?Subroutine7
          CFI EndBlock cfiBlock29
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadRxFifo_C:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ATA_5831ReadRxFifo_C
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOV     R24, R16
        MOVW    R27:R26, R19:R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadRxFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadRxFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadRxFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadRxFifo_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R19
        LDI     R16, 81
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 6
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 12), R24
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 253
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadRxFifo_C_2
??ATA_5831ReadRxFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 134
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R18, 0
        RJMP    ??ATA_5831ReadRxFifo_C_3
??ATA_5831ReadRxFifo_C_4:
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X+, R16
        INC     R18
??ATA_5831ReadRxFifo_C_3:
        CP      R18, R24
        BRCS    ??ATA_5831ReadRxFifo_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadRxFifo_C_2
??ATA_5831ReadRxFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadRxFifo_C_2:
        RJMP    ?Subroutine6
          CFI EndBlock cfiBlock30
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadFillLevelRxFifo_C:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ATA_5831ReadFillLevelRxFifo_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadFillLevelRxFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadFillLevelRxFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadFillLevelRxFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadFillLevelRxFifo_C_1
        STS     g_sAta5831, R24
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadFillLevelRxFifo_C_2
??ATA_5831ReadFillLevelRxFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 129
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOVW    R31:R30, R25:R24
        ST      Z, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadFillLevelRxFifo_C_2
??ATA_5831ReadFillLevelRxFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadFillLevelRxFifo_C_2:
          CFI EndBlock cfiBlock31
        REQUIRE ?Subroutine2
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH
        ;               // Fall through to label ?Subroutine2

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI NoFunction
          CFI CFA_Y Y+2
          CFI R24 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -1)
        LD      R24, Y+
          CFI CFA_Y Y+1
          CFI R24 SameValue
        LD      R25, Y+
          CFI CFA_Y Y+0
          CFI R25 SameValue
        RET
          CFI EndBlock cfiBlock32

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadFillLevelTxFifo_C:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function ATA_5831ReadFillLevelTxFifo_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadFillLevelTxFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadFillLevelTxFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadFillLevelTxFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadFillLevelTxFifo_C_1
        STS     g_sAta5831, R24
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 2
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadFillLevelTxFifo_C_2
??ATA_5831ReadFillLevelTxFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 130
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOVW    R31:R30, R25:R24
        ST      Z, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadFillLevelTxFifo_C_2
??ATA_5831ReadFillLevelTxFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadFillLevelTxFifo_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock33
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadFillLevelRssiFifo_C:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function ATA_5831ReadFillLevelRssiFifo_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadFillLevelRssiFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadFillLevelRssiFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadFillLevelRssiFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadFillLevelRssiFifo_C_1
        STS     g_sAta5831, R24
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadFillLevelRssiFifo_C_2
??ATA_5831ReadFillLevelRssiFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 131
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOVW    R31:R30, R25:R24
        ST      Z, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadFillLevelRssiFifo_C_2
??ATA_5831ReadFillLevelRssiFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadFillLevelRssiFifo_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock34
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831GetEventBytes_C:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function ATA_5831GetEventBytes_C
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831GetEventBytes_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831GetEventBytes_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831GetEventBytes_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831GetEventBytes_C_1
        LDI     R16, LOW((g_sAta5831 + 6))
        LDI     R17, HIGH((g_sAta5831 + 6))
        STS     g_sAta5831, R16
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 4
        STS     (g_sAta5831 + 9), R16
        RJMP    ??Subroutine8_0
??ATA_5831GetEventBytes_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 132
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 6), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 7), R16
        RJMP    ??Subroutine9_0
??ATA_5831GetEventBytes_C_0:
        RJMP    ?Subroutine0
          CFI EndBlock cfiBlock35
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831ReadRssiFifo_C:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function ATA_5831ReadRssiFifo_C
        CALL    ?PROLOGUE4_L09
          CFI R27 Frame(CFA_Y, -1)
          CFI R26 Frame(CFA_Y, -2)
          CFI R25 Frame(CFA_Y, -3)
          CFI R24 Frame(CFA_Y, -4)
          CFI CFA_Y Y+4
        MOV     R24, R16
        MOVW    R27:R26, R19:R18
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831ReadRssiFifo_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831ReadRssiFifo_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831ReadRssiFifo_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831ReadRssiFifo_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R19
        LDI     R16, 81
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 5
        STS     (g_sAta5831 + 9), R16
        STS     (g_sAta5831 + 12), R24
        LDS     R16, (g_sAta5831 + 12)
        SUBI    R16, 253
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831ReadRssiFifo_C_2
??ATA_5831ReadRssiFifo_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 133
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        MOV     R16, R24
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        LDI     R18, 0
        RJMP    ??ATA_5831ReadRssiFifo_C_3
??ATA_5831ReadRssiFifo_C_4:
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        ST      X+, R16
        INC     R18
??ATA_5831ReadRssiFifo_C_3:
        CP      R18, R24
        BRCS    ??ATA_5831ReadRssiFifo_C_4
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831ReadRssiFifo_C_2
??ATA_5831ReadRssiFifo_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831ReadRssiFifo_C_2:
        RJMP    ?Subroutine6
          CFI EndBlock cfiBlock36
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831GetRomVersion_C:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ATA_5831GetRomVersion_C
        ST      -Y, R25
          CFI R25 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R24
          CFI R24 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R25:R24, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831GetRomVersion_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831GetRomVersion_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831GetRomVersion_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831GetRomVersion_C_1
        STS     g_sAta5831, R24
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 18
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 3
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831GetRomVersion_C_2
??ATA_5831GetRomVersion_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 146
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        MOVW    R31:R30, R25:R24
        ST      Z, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        RCALL   ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831GetRomVersion_C_2
??ATA_5831GetRomVersion_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831GetRomVersion_C_2:
        RJMP    ?Subroutine2
          CFI EndBlock cfiBlock37
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831GetFlashVersion_C:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function ATA_5831GetFlashVersion_C
        ST      -Y, R27
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_Y Y+1
        ST      -Y, R26
          CFI R26 Frame(CFA_Y, -2)
          CFI CFA_Y Y+2
        MOVW    R27:R26, R17:R16
        IN      R18, 0x3F
        CLI
        LDS     R16, (g_sAta5831 + 8)
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831GetFlashVersion_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831GetFlashVersion_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
        LDS     R16, g_sSpiConfig
        SBRS    R16, 7
        RJMP    ??ATA_5831GetFlashVersion_C_0
        LDS     R16, (g_sAta5831 + 8)
        SBRS    R16, 0
        RJMP    ??ATA_5831GetFlashVersion_C_1
        STS     g_sAta5831, R26
        STS     (g_sAta5831 + 1), R17
        LDI     R16, 1
        STS     (g_sAta5831 + 8), R16
        LDI     R16, 19
        STS     (g_sAta5831 + 9), R16
        LDI     R16, 6
        STS     (g_sAta5831 + 14), R16
          CFI FunCall ATA_5831Start_C
        RCALL   ATA_5831Start_C
        RJMP    ??ATA_5831GetFlashVersion_C_2
??ATA_5831GetFlashVersion_C_1:
        LDI     R16, 0
        STS     (g_sAta5831 + 17), R16
        STS     (g_sAta5831 + 16), R16
          CFI FunCall ATA_spiSelect_C
        CALL    ATA_spiSelect_C
        LDS     R16, (g_sAta5831 + 2)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
        LDI     R16, 147
          CFI FunCall ATA_5831SpiDataExchangeWithChecksum_C
        RCALL   ATA_5831SpiDataExchangeWithChecksum_C
        STS     (g_sAta5831 + 4), R16
        LDI     R16, 0
        RCALL   ?Subroutine10
??CrossCallReturnLabel_0:
        STS     (g_sAta5831 + 5), R16
        LDI     R16, 0
        RCALL   ?Subroutine10
??CrossCallReturnLabel_1:
        ST      X+, R16
        LDI     R16, 0
        RCALL   ?Subroutine10
??CrossCallReturnLabel_2:
        ST      X+, R16
        LDI     R16, 0
        RCALL   ?Subroutine10
??CrossCallReturnLabel_3:
        ST      X+, R16
        LDI     R16, 0
        RCALL   ?Subroutine10
??CrossCallReturnLabel_4:
        ST      X, R16
          CFI FunCall ATA_5831DoCheckSumProcessing_C
        CALL    ATA_5831DoCheckSumProcessing_C
        LDS     R16, (g_sAta5831 + 3)
          CFI FunCall ATA_globalsWaitNus_ASM
        CALL    ATA_globalsWaitNus_ASM
          CFI FunCall ATA_spiDeselect_C
        CALL    ATA_spiDeselect_C
        RJMP    ??ATA_5831GetFlashVersion_C_2
??ATA_5831GetFlashVersion_C_0:
        LDI     R16, 28
        STS     g_sDebug, R16
??ATA_5831GetFlashVersion_C_2:
        RJMP    ?Subroutine1
          CFI EndBlock cfiBlock38
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:NOROOT(1)
?Subroutine10:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function ATA_5831GetFlashVersion_C
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R26 Frame(CFA_Y, -2)
          CFI R27 Frame(CFA_Y, -1)
          CFI CFA_SP SP+4
          CFI CFA_Y Y+2
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function ATA_5831GetFlashVersion_C
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond40) R26 Frame(CFA_Y, -2)
          CFI (cfiCond40) R27 Frame(CFA_Y, -1)
          CFI (cfiCond40) CFA_SP SP+4
          CFI (cfiCond40) CFA_Y Y+2
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function ATA_5831GetFlashVersion_C
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond41) R26 Frame(CFA_Y, -2)
          CFI (cfiCond41) R27 Frame(CFA_Y, -1)
          CFI (cfiCond41) CFA_SP SP+4
          CFI (cfiCond41) CFA_Y Y+2
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ATA_5831GetFlashVersion_C
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond42) R26 Frame(CFA_Y, -2)
          CFI (cfiCond42) R27 Frame(CFA_Y, -1)
          CFI (cfiCond42) CFA_SP SP+4
          CFI (cfiCond42) CFA_Y Y+2
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ATA_5831GetFlashVersion_C
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond43) R26 Frame(CFA_Y, -2)
          CFI (cfiCond43) R27 Frame(CFA_Y, -1)
          CFI (cfiCond43) CFA_SP SP+4
          CFI (cfiCond43) CFA_Y Y+2
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
          CFI (cfiCond39) TailCall ATA_5831GetFlashVersion_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI (cfiCond39) TailCall ATA_5831GetFlashVersion_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI (cfiCond39) TailCall ATA_5831GetFlashVersion_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI (cfiCond39) TailCall ATA_5831GetFlashVersion_C ATA_5831SpiDataExchangeWithChecksum_C
          CFI (cfiCond39) TailCall ATA_5831GetFlashVersion_C ATA_5831SpiDataExchangeWithChecksum_C
        JMP     ATA_5831SpiDataExchangeWithChecksum_C
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG CODE:CODE:ROOT(1)
ATA_5831Init_C:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ATA_5831Init_C
        IN      R19, 0x3F
        CLI
        STS     _A_TRCDR, R16
        LDI     R20, LOW(ATA_5831Init_C/2)
        STS     _A_TRCIDL, R20
        LDI     R20, (ATA_5831Init_C/2) >> 8
        STS     _A_TRCIDH, R20
        OUT     0x3F, R19
        STS     (g_sAta5831 + 8), R16
        LDI     R20, 0
        STS     g_sAta5831, R20
        STS     (g_sAta5831 + 1), R20
        STS     (g_sAta5831 + 2), R17
        STS     (g_sAta5831 + 3), R18
        STS     (g_sAta5831 + 4), R20
        STS     (g_sAta5831 + 5), R20
        STS     (g_sAta5831 + 6), R20
        STS     (g_sAta5831 + 7), R20
        STS     (g_sAta5831 + 16), R20
        STS     (g_sAta5831 + 17), R20
        LDI     R17, 0
        LDI     R16, 81
          CFI FunCall ATA_spiOpen_C
        JMP     ATA_spiOpen_C
          CFI EndBlock cfiBlock45
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        RSEG CODE:CODE:ROOT(1)
ATA_5831Close_C:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ATA_5831Close_C
        IN      R18, 0x3F
        CLI
        LDI     R16, 0
        STS     _A_TRCDR, R16
        LDI     R16, LOW(ATA_5831Close_C/2)
        STS     _A_TRCIDL, R16
        LDI     R16, (ATA_5831Close_C/2) >> 8
        STS     _A_TRCIDH, R16
        OUT     0x3F, R18
          CFI FunCall ATA_spiClose_C
        JMP     ATA_spiClose_C
          CFI EndBlock cfiBlock46
        REQUIRE _A_SREG
        REQUIRE _A_TRCDR
        REQUIRE _A_TRCIDL
        REQUIRE _A_TRCIDH

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
// 2728 
// 2729 /*---------------------------------------------------------------------------*/
// 2730 /** \brief <b>ATA_5831DoCheckSumProcessing_C</b>
// 2731     does the checksum processing/calculation. This routine sends the
// 2732     inverted checksum on MOSI line and reads the checksum on MISO line
// 2733     using function ::ATA_5831SpiDataExchangeWithChecksum_C. If checksum on
// 2734     MISO line is not equal to 0xFF an error is signalled by ::g_sDebug.
// 2735 
// 2736     Variable Usage:
// 2737     \li [out] ::g_sDebug Global Debug component data
// 2738     \li [in] ::g_sAta5831 Global ATA5831 component data
// 2739 
// 2740     \image html ATA_5831DoCheckSumProcessing_C.png
// 2741 
// 2742     \internal
// 2743 
// 2744     \li 010: Compute SPI checksum for actual SPI data transfer by calling function
// 2745              ::ATA_5831SpiDataExchangeWithChecksum_C with the inverted value of
// 2746              ::g_sAta5831 .bChecksumMosi as parameter
// 2747 
// 2748     \li 020: IF the received SPI checksum value in ::g_sAta5831 .bChecksumMiso is
// 2749              not correct, i.e. 0xFFU, then set error condition 
// 2750              DEBUG_ERROR_CODE_ATA5831_SPI_CHECKSUM_ERROR in ::g_sDebug .bErrorCode
// 2751              and set ::g_sDebug .bSsmErrorCode to 0.
// 2752 
// 2753     \Derived{No}
// 2754 
// 2755     \Rationale{N/A}
// 2756 
// 2757     \Traceability{Primus2P-2533}
// 2758     \endinternal
// 2759 \n
// 2760 */
// 2761 /*---------------------------------------------------------------------------*/
// 2762 static VOIDFUNC ATA_5831DoCheckSumProcessing_C(void)
// 2763 {
// 2764     /* LLR-Ref: 010 */
// 2765     ATA_5831SpiDataExchangeWithChecksum_C(~g_sAta5831.bChecksumMosi);
// 2766     
// 2767     /* LLR-Ref: 020 */
// 2768     if (g_sAta5831.bChecksumMiso != 0xFFU) {
// 2769         g_sDebug.bErrorCode    = DEBUG_ERROR_CODE_ATA5831_SPI_CHECKSUM_ERROR;
// 2770         g_sDebug.bSsmErrorCode = 0x00U;
// 2771     }
// 2772 }
// 
//    21 bytes in segment .ata5831
//     9 bytes in segment ABSOLUTE
// 4 250 bytes in segment CODE
// 
// 4 250 bytes of CODE memory
//    21 bytes of DATA memory (+ 9 bytes shared)
//
//Errors: none
//Warnings: none
